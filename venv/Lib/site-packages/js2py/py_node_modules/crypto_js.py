from js2py.pyjs import *
# setting scope
var = Scope( JS_BUILTINS )
set_global_object(var)

# Code follows:
var.registers(['getFromGlobals', 'crypto_js', '_typeof'])
@Js
def PyJsHoisted_getFromGlobals_(name, this, arguments, var=var):
    var = Scope({'name':name, 'this':this, 'arguments':arguments}, var)
    var.registers(['name'])
    if var.get('Object').get('prototype').callprop('hasOwnProperty', Js('_fake_exports')).neg():
        PyJsTempException = JsToPyException(var.get('Error')((Js('Could not find any value named ')+var.get('name'))))
        raise PyJsTempException
    if var.get('Object').get('prototype').get('_fake_exports').callprop('hasOwnProperty', var.get('name')):
        return var.get('Object').get('prototype').get('_fake_exports').get(var.get('name'))
    else:
        PyJsTempException = JsToPyException(var.get('Error')((Js('Could not find any value named ')+var.get('name'))))
        raise PyJsTempException
PyJsHoisted_getFromGlobals_.func_name = 'getFromGlobals'
var.put('getFromGlobals', PyJsHoisted_getFromGlobals_)
Js('use strict')
@Js
def PyJs_anonymous_0_(obj, this, arguments, var=var):
    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
    var.registers(['obj'])
    return var.get('obj',throw=False).typeof()
PyJs_anonymous_0_._set_name('anonymous')
@Js
def PyJs_anonymous_1_(obj, this, arguments, var=var):
    var = Scope({'obj':obj, 'this':this, 'arguments':arguments}, var)
    var.registers(['obj'])
    return (Js('symbol') if (((var.get('obj') and PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function'))) and PyJsStrictEq(var.get('obj').get('constructor'),var.get('Symbol'))) and PyJsStrictNeq(var.get('obj'),var.get('Symbol').get('prototype'))) else var.get('obj',throw=False).typeof())
PyJs_anonymous_1_._set_name('anonymous')
var.put('_typeof', (PyJs_anonymous_0_ if (PyJsStrictEq(var.get('Symbol',throw=False).typeof(),Js('function')) and PyJsStrictEq(var.get('Symbol').get('iterator').typeof(),Js('symbol'))) else PyJs_anonymous_1_))
def PyJs_LONG_1357_(var=var):
    @Js
    def PyJs_anonymous_2_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'module', 'addToGlobals', 'module_temp_love_python'])
        @Js
        def PyJsHoisted_addToGlobals_(name, obj, this, arguments, var=var):
            var = Scope({'name':name, 'obj':obj, 'this':this, 'arguments':arguments}, var)
            var.registers(['name', 'obj'])
            if var.get('Object').get('prototype').callprop('hasOwnProperty', Js('_fake_exports')).neg():
                var.get('Object').get('prototype').put('_fake_exports', Js({}))
            var.get('Object').get('prototype').get('_fake_exports').put(var.get('name'), var.get('obj'))
        PyJsHoisted_addToGlobals_.func_name = 'addToGlobals'
        var.put('addToGlobals', PyJsHoisted_addToGlobals_)
        pass
        pass
        pass
        pass
        var.get('require')(Js('babel-polyfill'))
        var.put('module_temp_love_python', var.get('require')(Js('crypto-js')))
        var.get('addToGlobals')(Js('crypto-js'), var.get('module_temp_love_python'))
    PyJs_anonymous_2_._set_name('anonymous')
    @Js
    def PyJs_anonymous_3_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_4_(PyJsArg_676c6f62616c_, this, arguments, var=var):
            var = Scope({'global':PyJsArg_676c6f62616c_, 'this':this, 'arguments':arguments}, var)
            var.registers(['global'])
            @Js
            def PyJs_anonymous_5_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['DEFINE_PROPERTY', 'define'])
                @Js
                def PyJsHoisted_define_(O, key, value, this, arguments, var=var):
                    var = Scope({'O':O, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
                    var.registers(['O', 'value', 'key'])
                    (var.get('O').get(var.get('key')) or var.get('Object').callprop(var.get('DEFINE_PROPERTY'), var.get('O'), var.get('key'), Js({'writable':Js(True),'configurable':Js(True),'value':var.get('value')})))
                PyJsHoisted_define_.func_name = 'define'
                var.put('define', PyJsHoisted_define_)
                Js('use strict')
                var.get('require')(Js('core-js/shim'))
                var.get('require')(Js('regenerator-runtime/runtime'))
                var.get('require')(Js('core-js/fn/regexp/escape'))
                if var.get('global').get('_babelPolyfill'):
                    PyJsTempException = JsToPyException(var.get('Error').create(Js('only one instance of babel-polyfill is allowed')))
                    raise PyJsTempException
                var.get('global').put('_babelPolyfill', Js(True))
                var.put('DEFINE_PROPERTY', Js('defineProperty'))
                pass
                var.get('define')(var.get('String').get('prototype'), Js('padLeft'), Js('').get('padStart'))
                var.get('define')(var.get('String').get('prototype'), Js('padRight'), Js('').get('padEnd'))
                @Js
                def PyJs_anonymous_6_(key, this, arguments, var=var):
                    var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
                    var.registers(['key'])
                    (Js([]).get(var.get('key')) and var.get('define')(var.get('Array'), var.get('key'), var.get('Function').get('call').callprop('bind', Js([]).get(var.get('key')))))
                PyJs_anonymous_6_._set_name('anonymous')
                Js('pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill').callprop('split', Js(',')).callprop('forEach', PyJs_anonymous_6_)
            PyJs_anonymous_5_._set_name('anonymous')
            PyJs_anonymous_5_.callprop('call', var.get(u"this"))
        PyJs_anonymous_4_._set_name('anonymous')
        PyJs_anonymous_4_.callprop('call', var.get(u"this"), (var.get('global') if PyJsStrictNeq(var.get('global',throw=False).typeof(),Js('undefined')) else (var.get('self') if PyJsStrictNeq(var.get('self',throw=False).typeof(),Js('undefined')) else (var.get('window') if PyJsStrictNeq(var.get('window',throw=False).typeof(),Js('undefined')) else Js({})))))
    PyJs_anonymous_3_._set_name('anonymous')
    @Js
    def PyJs_anonymous_7_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('require')(Js('../../modules/core.regexp.escape'))
        var.get('module').put('exports', var.get('require')(Js('../../modules/_core')).get('RegExp').get('escape'))
    PyJs_anonymous_7_._set_name('anonymous')
    @Js
    def PyJs_anonymous_8_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_9_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if (var.get('it',throw=False).typeof()!=Js('function')):
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('it')+Js(' is not a function!'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_9_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_9_)
    PyJs_anonymous_8_._set_name('anonymous')
    @Js
    def PyJs_anonymous_10_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['cof', 'module', 'require', 'exports'])
        var.put('cof', var.get('require')(Js('./_cof')))
        @Js
        def PyJs_anonymous_11_(it, msg, this, arguments, var=var):
            var = Scope({'it':it, 'msg':msg, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'msg'])
            if ((var.get('it',throw=False).typeof()!=Js('number')) and (var.get('cof')(var.get('it'))!=Js('Number'))):
                PyJsTempException = JsToPyException(var.get('TypeError')(var.get('msg')))
                raise PyJsTempException
            return (+var.get('it'))
        PyJs_anonymous_11_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_11_)
    PyJs_anonymous_10_._set_name('anonymous')
    @Js
    def PyJs_anonymous_12_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'UNSCOPABLES', 'ArrayProto', 'exports', 'module'])
        var.put('UNSCOPABLES', var.get('require')(Js('./_wks'))(Js('unscopables')))
        var.put('ArrayProto', var.get('Array').get('prototype'))
        if (var.get('ArrayProto').get(var.get('UNSCOPABLES'))==var.get('undefined')):
            var.get('require')(Js('./_hide'))(var.get('ArrayProto'), var.get('UNSCOPABLES'), Js({}))
        @Js
        def PyJs_anonymous_13_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            var.get('ArrayProto').get(var.get('UNSCOPABLES')).put(var.get('key'), Js(True))
        PyJs_anonymous_13_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_13_)
    PyJs_anonymous_12_._set_name('anonymous')
    @Js
    def PyJs_anonymous_14_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'at', 'exports'])
        Js('use strict')
        var.put('at', var.get('require')(Js('./_string-at'))(Js(True)))
        @Js
        def PyJs_anonymous_15_(S, index, unicode, this, arguments, var=var):
            var = Scope({'S':S, 'index':index, 'unicode':unicode, 'this':this, 'arguments':arguments}, var)
            var.registers(['index', 'unicode', 'S'])
            return (var.get('index')+(var.get('at')(var.get('S'), var.get('index')).get('length') if var.get('unicode') else Js(1.0)))
        PyJs_anonymous_15_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_15_)
    PyJs_anonymous_14_._set_name('anonymous')
    @Js
    def PyJs_anonymous_16_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_17_(it, Constructor, name, forbiddenField, this, arguments, var=var):
            var = Scope({'it':it, 'Constructor':Constructor, 'name':name, 'forbiddenField':forbiddenField, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'Constructor', 'name', 'forbiddenField'])
            if (var.get('it').instanceof(var.get('Constructor')).neg() or (PyJsStrictNeq(var.get('forbiddenField'),var.get('undefined')) and var.get('it').contains(var.get('forbiddenField')))):
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('name')+Js(': incorrect invocation!'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_17_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_17_)
    PyJs_anonymous_16_._set_name('anonymous')
    @Js
    def PyJs_anonymous_18_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'isObject', 'module', 'exports'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_19_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if var.get('isObject')(var.get('it')).neg():
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('it')+Js(' is not an object!'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_19_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_19_)
    PyJs_anonymous_18_._set_name('anonymous')
    @Js
    def PyJs_anonymous_20_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'toAbsoluteIndex', 'toObject', 'exports', 'module'])
        Js('use strict')
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_copyWithin_21_(target, start, this, arguments, var=var):
            var = Scope({'target':target, 'start':start, 'this':this, 'arguments':arguments, 'copyWithin':PyJs_copyWithin_21_}, var)
            var.registers(['target', 'end', 'start', 'O', 'from', 'to', 'inc', 'count', 'len'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('len', var.get('toLength')(var.get('O').get('length')))
            var.put('to', var.get('toAbsoluteIndex')(var.get('target'), var.get('len')))
            var.put('from', var.get('toAbsoluteIndex')(var.get('start'), var.get('len')))
            var.put('end', (var.get('arguments').get('2') if (var.get('arguments').get('length')>Js(2.0)) else var.get('undefined')))
            var.put('count', var.get('Math').callprop('min', ((var.get('len') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('toAbsoluteIndex')(var.get('end'), var.get('len')))-var.get('from')), (var.get('len')-var.get('to'))))
            var.put('inc', Js(1.0))
            if ((var.get('from')<var.get('to')) and (var.get('to')<(var.get('from')+var.get('count')))):
                var.put('inc', (-Js(1.0)))
                var.put('from', (var.get('count')-Js(1.0)), '+')
                var.put('to', (var.get('count')-Js(1.0)), '+')
            while ((var.put('count',Js(var.get('count').to_number())-Js(1))+Js(1))>Js(0.0)):
                if var.get('O').contains(var.get('from')):
                    var.get('O').put(var.get('to'), var.get('O').get(var.get('from')))
                else:
                    var.get('O').delete(var.get('to'))
                var.put('to', var.get('inc'), '+')
                var.put('from', var.get('inc'), '+')
            return var.get('O')
        PyJs_copyWithin_21_._set_name('copyWithin')
        var.get('module').put('exports', (Js([]).get('copyWithin') or PyJs_copyWithin_21_))
    PyJs_anonymous_20_._set_name('anonymous')
    @Js
    def PyJs_anonymous_22_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'toAbsoluteIndex', 'toObject', 'exports', 'module'])
        Js('use strict')
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_fill_23_(value, this, arguments, var=var):
            var = Scope({'value':value, 'this':this, 'arguments':arguments, 'fill':PyJs_fill_23_}, var)
            var.registers(['length', 'index', 'endPos', 'end', 'O', 'aLen', 'value'])
            var.put('O', var.get('toObject')(var.get(u"this")))
            var.put('length', var.get('toLength')(var.get('O').get('length')))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('index', var.get('toAbsoluteIndex')((var.get('arguments').get('1') if (var.get('aLen')>Js(1.0)) else var.get('undefined')), var.get('length')))
            var.put('end', (var.get('arguments').get('2') if (var.get('aLen')>Js(2.0)) else var.get('undefined')))
            var.put('endPos', (var.get('length') if PyJsStrictEq(var.get('end'),var.get('undefined')) else var.get('toAbsoluteIndex')(var.get('end'), var.get('length'))))
            while (var.get('endPos')>var.get('index')):
                var.get('O').put((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)), var.get('value'))
            return var.get('O')
        PyJs_fill_23_._set_name('fill')
        var.get('module').put('exports', PyJs_fill_23_)
    PyJs_anonymous_22_._set_name('anonymous')
    @Js
    def PyJs_anonymous_24_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['forOf', 'require', 'module', 'exports'])
        var.put('forOf', var.get('require')(Js('./_for-of')))
        @Js
        def PyJs_anonymous_25_(iter, ITERATOR, this, arguments, var=var):
            var = Scope({'iter':iter, 'ITERATOR':ITERATOR, 'this':this, 'arguments':arguments}, var)
            var.registers(['iter', 'result', 'ITERATOR'])
            var.put('result', Js([]))
            var.get('forOf')(var.get('iter'), Js(False), var.get('result').get('push'), var.get('result'), var.get('ITERATOR'))
            return var.get('result')
        PyJs_anonymous_25_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_25_)
    PyJs_anonymous_24_._set_name('anonymous')
    @Js
    def PyJs_anonymous_26_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'toIObject', 'toAbsoluteIndex', 'exports', 'module'])
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('toAbsoluteIndex', var.get('require')(Js('./_to-absolute-index')))
        @Js
        def PyJs_anonymous_27_(IS_INCLUDES, this, arguments, var=var):
            var = Scope({'IS_INCLUDES':IS_INCLUDES, 'this':this, 'arguments':arguments}, var)
            var.registers(['IS_INCLUDES'])
            @Js
            def PyJs_anonymous_28_(PyJsArg_2474686973_, el, fromIndex, this, arguments, var=var):
                var = Scope({'$this':PyJsArg_2474686973_, 'el':el, 'fromIndex':fromIndex, 'this':this, 'arguments':arguments}, var)
                var.registers(['length', 'index', '$this', 'el', 'O', 'fromIndex', 'value'])
                var.put('O', var.get('toIObject')(var.get('$this')))
                var.put('length', var.get('toLength')(var.get('O').get('length')))
                var.put('index', var.get('toAbsoluteIndex')(var.get('fromIndex'), var.get('length')))
                pass
                if (var.get('IS_INCLUDES') and (var.get('el')!=var.get('el'))):
                    while (var.get('length')>var.get('index')):
                        var.put('value', var.get('O').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))))
                        if (var.get('value')!=var.get('value')):
                            return Js(True)
                else:
                    #for JS loop
                    
                    while (var.get('length')>var.get('index')):
                        try:
                            if (var.get('IS_INCLUDES') or var.get('O').contains(var.get('index'))):
                                if PyJsStrictEq(var.get('O').get(var.get('index')),var.get('el')):
                                    return ((var.get('IS_INCLUDES') or var.get('index')) or Js(0.0))
                        finally:
                                (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
                return (var.get('IS_INCLUDES').neg() and (-Js(1.0)))
            PyJs_anonymous_28_._set_name('anonymous')
            return PyJs_anonymous_28_
        PyJs_anonymous_27_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_27_)
    PyJs_anonymous_26_._set_name('anonymous')
    @Js
    def PyJs_anonymous_29_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'toObject', 'asc', 'exports', 'module', 'IObject', 'ctx'])
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('IObject', var.get('require')(Js('./_iobject')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('asc', var.get('require')(Js('./_array-species-create')))
        @Js
        def PyJs_anonymous_30_(TYPE, PyJsArg_24637265617465_, this, arguments, var=var):
            var = Scope({'TYPE':TYPE, '$create':PyJsArg_24637265617465_, 'this':this, 'arguments':arguments}, var)
            var.registers(['IS_FIND_INDEX', 'IS_FILTER', 'TYPE', 'IS_MAP', 'NO_HOLES', '$create', 'IS_EVERY', 'create', 'IS_SOME'])
            var.put('IS_MAP', (var.get('TYPE')==Js(1.0)))
            var.put('IS_FILTER', (var.get('TYPE')==Js(2.0)))
            var.put('IS_SOME', (var.get('TYPE')==Js(3.0)))
            var.put('IS_EVERY', (var.get('TYPE')==Js(4.0)))
            var.put('IS_FIND_INDEX', (var.get('TYPE')==Js(6.0)))
            var.put('NO_HOLES', ((var.get('TYPE')==Js(5.0)) or var.get('IS_FIND_INDEX')))
            var.put('create', (var.get('$create') or var.get('asc')))
            @Js
            def PyJs_anonymous_31_(PyJsArg_2474686973_, callbackfn, that, this, arguments, var=var):
                var = Scope({'$this':PyJsArg_2474686973_, 'callbackfn':callbackfn, 'that':that, 'this':this, 'arguments':arguments}, var)
                var.registers(['f', 'length', 'index', 'val', '$this', 'that', 'O', 'result', 'callbackfn', 'self', 'res'])
                var.put('O', var.get('toObject')(var.get('$this')))
                var.put('self', var.get('IObject')(var.get('O')))
                var.put('f', var.get('ctx')(var.get('callbackfn'), var.get('that'), Js(3.0)))
                var.put('length', var.get('toLength')(var.get('self').get('length')))
                var.put('index', Js(0.0))
                var.put('result', (var.get('create')(var.get('$this'), var.get('length')) if var.get('IS_MAP') else (var.get('create')(var.get('$this'), Js(0.0)) if var.get('IS_FILTER') else var.get('undefined'))))
                pass
                #for JS loop
                
                while (var.get('length')>var.get('index')):
                    try:
                        if (var.get('NO_HOLES') or var.get('self').contains(var.get('index'))):
                            var.put('val', var.get('self').get(var.get('index')))
                            var.put('res', var.get('f')(var.get('val'), var.get('index'), var.get('O')))
                            if var.get('TYPE'):
                                if var.get('IS_MAP'):
                                    var.get('result').put(var.get('index'), var.get('res'))
                                else:
                                    if var.get('res'):
                                        while 1:
                                            SWITCHED = False
                                            CONDITION = (var.get('TYPE'))
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                                                SWITCHED = True
                                                return Js(True)
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(5.0)):
                                                SWITCHED = True
                                                return var.get('val')
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(6.0)):
                                                SWITCHED = True
                                                return var.get('index')
                                            if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                                                SWITCHED = True
                                                var.get('result').callprop('push', var.get('val'))
                                            SWITCHED = True
                                            break
                                    else:
                                        if var.get('IS_EVERY'):
                                            return Js(False)
                    finally:
                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
                return ((-Js(1.0)) if var.get('IS_FIND_INDEX') else (var.get('IS_EVERY') if (var.get('IS_SOME') or var.get('IS_EVERY')) else var.get('result')))
            PyJs_anonymous_31_._set_name('anonymous')
            return PyJs_anonymous_31_
        PyJs_anonymous_30_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_30_)
    PyJs_anonymous_29_._set_name('anonymous')
    @Js
    def PyJs_anonymous_32_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', 'toLength', 'toObject', 'exports', 'module', 'IObject'])
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('IObject', var.get('require')(Js('./_iobject')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_anonymous_33_(that, callbackfn, aLen, memo, isRight, this, arguments, var=var):
            var = Scope({'that':that, 'callbackfn':callbackfn, 'aLen':aLen, 'memo':memo, 'isRight':isRight, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'index', 'i', 'that', 'memo', 'isRight', 'O', 'callbackfn', 'self', 'aLen'])
            var.get('aFunction')(var.get('callbackfn'))
            var.put('O', var.get('toObject')(var.get('that')))
            var.put('self', var.get('IObject')(var.get('O')))
            var.put('length', var.get('toLength')(var.get('O').get('length')))
            var.put('index', ((var.get('length')-Js(1.0)) if var.get('isRight') else Js(0.0)))
            var.put('i', ((-Js(1.0)) if var.get('isRight') else Js(1.0)))
            if (var.get('aLen')<Js(2.0)):
                #for JS loop
                
                while 1:
                    if var.get('self').contains(var.get('index')):
                        var.put('memo', var.get('self').get(var.get('index')))
                        var.put('index', var.get('i'), '+')
                        break
                    var.put('index', var.get('i'), '+')
                    if ((var.get('index')<Js(0.0)) if var.get('isRight') else (var.get('length')<=var.get('index'))):
                        PyJsTempException = JsToPyException(var.get('TypeError')(Js('Reduce of empty array with no initial value')))
                        raise PyJsTempException
                
            #for JS loop
            
            while ((var.get('index')>=Js(0.0)) if var.get('isRight') else (var.get('length')>var.get('index'))):
                try:
                    if var.get('self').contains(var.get('index')):
                        var.put('memo', var.get('callbackfn')(var.get('memo'), var.get('self').get(var.get('index')), var.get('index'), var.get('O')))
                finally:
                        var.put('index', var.get('i'), '+')
            return var.get('memo')
        PyJs_anonymous_33_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_33_)
    PyJs_anonymous_32_._set_name('anonymous')
    @Js
    def PyJs_anonymous_34_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'SPECIES', 'isArray', 'exports', 'module', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('isArray', var.get('require')(Js('./_is-array')))
        var.put('SPECIES', var.get('require')(Js('./_wks'))(Js('species')))
        @Js
        def PyJs_anonymous_35_(original, this, arguments, var=var):
            var = Scope({'original':original, 'this':this, 'arguments':arguments}, var)
            var.registers(['C', 'original'])
            pass
            if var.get('isArray')(var.get('original')):
                var.put('C', var.get('original').get('constructor'))
                if ((var.get('C',throw=False).typeof()==Js('function')) and (PyJsStrictEq(var.get('C'),var.get('Array')) or var.get('isArray')(var.get('C').get('prototype')))):
                    var.put('C', var.get('undefined'))
                if var.get('isObject')(var.get('C')):
                    var.put('C', var.get('C').get(var.get('SPECIES')))
                    if PyJsStrictEq(var.get('C'),var.get(u"null")):
                        var.put('C', var.get('undefined'))
            return (var.get('Array') if PyJsStrictEq(var.get('C'),var.get('undefined')) else var.get('C'))
        PyJs_anonymous_35_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_35_)
    PyJs_anonymous_34_._set_name('anonymous')
    @Js
    def PyJs_anonymous_36_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'speciesConstructor', 'module', 'exports'])
        var.put('speciesConstructor', var.get('require')(Js('./_array-species-constructor')))
        @Js
        def PyJs_anonymous_37_(original, length, this, arguments, var=var):
            var = Scope({'original':original, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'original'])
            return var.get('speciesConstructor')(var.get('original')).create(var.get('length'))
        PyJs_anonymous_37_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_37_)
    PyJs_anonymous_36_._set_name('anonymous')
    @Js
    def PyJs_anonymous_38_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', 'arraySlice', 'invoke', 'construct', 'exports', 'module', 'factories', 'isObject'])
        Js('use strict')
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('invoke', var.get('require')(Js('./_invoke')))
        var.put('arraySlice', Js([]).get('slice'))
        var.put('factories', Js({}))
        @Js
        def PyJs_construct_39_(F, len, args, this, arguments, var=var):
            var = Scope({'F':F, 'len':len, 'args':args, 'this':this, 'arguments':arguments, 'construct':PyJs_construct_39_}, var)
            var.registers(['F', 'n', 'args', 'i', 'len'])
            if var.get('factories').contains(var.get('len')).neg():
                #for JS loop
                var.put('n', Js([]))
                var.put('i', Js(0.0))
                while (var.get('i')<var.get('len')):
                    try:
                        var.get('n').put(var.get('i'), ((Js('a[')+var.get('i'))+Js(']')))
                    finally:
                            (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                var.get('factories').put(var.get('len'), var.get('Function')(Js('F,a'), ((Js('return new F(')+var.get('n').callprop('join', Js(',')))+Js(')'))))
            return var.get('factories').callprop(var.get('len'), var.get('F'), var.get('args'))
        PyJs_construct_39_._set_name('construct')
        var.put('construct', PyJs_construct_39_)
        @Js
        def PyJs_bind_40_(that, this, arguments, var=var):
            var = Scope({'that':that, 'this':this, 'arguments':arguments, 'bind':PyJs_bind_40_}, var)
            var.registers(['bound', 'fn', 'that', 'partArgs'])
            var.put('fn', var.get('aFunction')(var.get(u"this")))
            var.put('partArgs', var.get('arraySlice').callprop('call', var.get('arguments'), Js(1.0)))
            @Js
            def PyJs_bound_41_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'bound':PyJs_bound_41_}, var)
                var.registers(['args'])
                var.put('args', var.get('partArgs').callprop('concat', var.get('arraySlice').callprop('call', var.get('arguments'))))
                return (var.get('construct')(var.get('fn'), var.get('args').get('length'), var.get('args')) if var.get(u"this").instanceof(var.get('bound')) else var.get('invoke')(var.get('fn'), var.get('args'), var.get('that')))
            PyJs_bound_41_._set_name('bound')
            var.put('bound', PyJs_bound_41_)
            if var.get('isObject')(var.get('fn').get('prototype')):
                var.get('bound').put('prototype', var.get('fn').get('prototype'))
            return var.get('bound')
        PyJs_bind_40_._set_name('bind')
        var.get('module').put('exports', (var.get('Function').get('bind') or PyJs_bind_40_))
    PyJs_anonymous_38_._set_name('anonymous')
    @Js
    def PyJs_anonymous_42_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'ARG', 'TAG', 'exports', 'cof', 'module', 'tryGet'])
        var.put('cof', var.get('require')(Js('./_cof')))
        var.put('TAG', var.get('require')(Js('./_wks'))(Js('toStringTag')))
        @Js
        def PyJs_anonymous_43_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('arguments')
        PyJs_anonymous_43_._set_name('anonymous')
        var.put('ARG', (var.get('cof')(PyJs_anonymous_43_())==Js('Arguments')))
        @Js
        def PyJs_tryGet_44_(it, key, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'this':this, 'arguments':arguments, 'tryGet':PyJs_tryGet_44_}, var)
            var.registers(['it', 'key'])
            try:
                return var.get('it').get(var.get('key'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_23754863 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_23754863 is not None:
                        var.own['e'] = PyJsHolder_65_23754863
                    else:
                        del var.own['e']
                    del PyJsHolder_65_23754863
        PyJs_tryGet_44_._set_name('tryGet')
        var.put('tryGet', PyJs_tryGet_44_)
        @Js
        def PyJs_anonymous_45_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'O', 'B', 'T'])
            pass
            def PyJs_LONG_46_(var=var):
                return (Js('Null') if PyJsStrictEq(var.get('it'),var.get(u"null")) else (var.get('T') if (var.put('T', var.get('tryGet')(var.put('O', var.get('Object')(var.get('it'))), var.get('TAG'))).typeof()==Js('string')) else (var.get('cof')(var.get('O')) if var.get('ARG') else (Js('Arguments') if ((var.put('B', var.get('cof')(var.get('O')))==Js('Object')) and (var.get('O').get('callee').typeof()==Js('function'))) else var.get('B')))))
            return (Js('Undefined') if PyJsStrictEq(var.get('it'),var.get('undefined')) else PyJs_LONG_46_())
        PyJs_anonymous_45_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_45_)
    PyJs_anonymous_42_._set_name('anonymous')
    @Js
    def PyJs_anonymous_47_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'module', 'toString'])
        var.put('toString', Js({}).get('toString'))
        @Js
        def PyJs_anonymous_48_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('toString').callprop('call', var.get('it')).callprop('slice', Js(8.0), (-Js(1.0)))
        PyJs_anonymous_48_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_48_)
    PyJs_anonymous_47_._set_name('anonymous')
    @Js
    def PyJs_anonymous_49_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'redefineAll', 'anInstance', 'DESCRIPTORS', 'SIZE', '$iterDefine', 'getEntry', 'module', 'exports', 'setSpecies', 'step', 'validate', 'create', 'forOf', 'ctx', 'fastKey', 'dP'])
        Js('use strict')
        var.put('dP', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('create', var.get('require')(Js('./_object-create')))
        var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        var.put('$iterDefine', var.get('require')(Js('./_iter-define')))
        var.put('step', var.get('require')(Js('./_iter-step')))
        var.put('setSpecies', var.get('require')(Js('./_set-species')))
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('fastKey', var.get('require')(Js('./_meta')).get('fastKey'))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('SIZE', (Js('_s') if var.get('DESCRIPTORS') else Js('size')))
        @Js
        def PyJs_getEntry_50_(that, key, this, arguments, var=var):
            var = Scope({'that':that, 'key':key, 'this':this, 'arguments':arguments, 'getEntry':PyJs_getEntry_50_}, var)
            var.registers(['index', 'entry', 'that', 'key'])
            var.put('index', var.get('fastKey')(var.get('key')))
            pass
            if PyJsStrictNeq(var.get('index'),Js('F')):
                return var.get('that').get('_i').get(var.get('index'))
            #for JS loop
            var.put('entry', var.get('that').get('_f'))
            while var.get('entry'):
                try:
                    if (var.get('entry').get('k')==var.get('key')):
                        return var.get('entry')
                finally:
                        var.put('entry', var.get('entry').get('n'))
        PyJs_getEntry_50_._set_name('getEntry')
        var.put('getEntry', PyJs_getEntry_50_)
        @Js
        def PyJs_getConstructor_51_(wrapper, NAME, IS_MAP, ADDER, this, arguments, var=var):
            var = Scope({'wrapper':wrapper, 'NAME':NAME, 'IS_MAP':IS_MAP, 'ADDER':ADDER, 'this':this, 'arguments':arguments, 'getConstructor':PyJs_getConstructor_51_}, var)
            var.registers(['C', 'ADDER', 'wrapper', 'NAME', 'IS_MAP'])
            @Js
            def PyJs_anonymous_52_(that, iterable, this, arguments, var=var):
                var = Scope({'that':that, 'iterable':iterable, 'this':this, 'arguments':arguments}, var)
                var.registers(['iterable', 'that'])
                var.get('anInstance')(var.get('that'), var.get('C'), var.get('NAME'), Js('_i'))
                var.get('that').put('_t', var.get('NAME'))
                var.get('that').put('_i', var.get('create')(var.get(u"null")))
                var.get('that').put('_f', var.get('undefined'))
                var.get('that').put('_l', var.get('undefined'))
                var.get('that').put(var.get('SIZE'), Js(0.0))
                if (var.get('iterable')!=var.get('undefined')):
                    var.get('forOf')(var.get('iterable'), var.get('IS_MAP'), var.get('that').get(var.get('ADDER')), var.get('that'))
            PyJs_anonymous_52_._set_name('anonymous')
            var.put('C', var.get('wrapper')(PyJs_anonymous_52_))
            @Js
            def PyJs_clear_53_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'clear':PyJs_clear_53_}, var)
                var.registers(['entry', 'that', 'data'])
                #for JS loop
                var.put('that', var.get('validate')(var.get(u"this"), var.get('NAME')))
                var.put('data', var.get('that').get('_i'))
                var.put('entry', var.get('that').get('_f'))
                while var.get('entry'):
                    try:
                        var.get('entry').put('r', Js(True))
                        if var.get('entry').get('p'):
                            var.get('entry').put('p', var.get('entry').get('p').put('n', var.get('undefined')))
                        var.get('data').delete(var.get('entry').get('i'))
                    finally:
                            var.put('entry', var.get('entry').get('n'))
                var.get('that').put('_f', var.get('that').put('_l', var.get('undefined')))
                var.get('that').put(var.get('SIZE'), Js(0.0))
            PyJs_clear_53_._set_name('clear')
            @Js
            def PyJs__delete_54_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, '_delete':PyJs__delete_54_}, var)
                var.registers(['next', 'that', 'prev', 'entry', 'key'])
                var.put('that', var.get('validate')(var.get(u"this"), var.get('NAME')))
                var.put('entry', var.get('getEntry')(var.get('that'), var.get('key')))
                if var.get('entry'):
                    var.put('next', var.get('entry').get('n'))
                    var.put('prev', var.get('entry').get('p'))
                    var.get('that').get('_i').delete(var.get('entry').get('i'))
                    var.get('entry').put('r', Js(True))
                    if var.get('prev'):
                        var.get('prev').put('n', var.get('next'))
                    if var.get('next'):
                        var.get('next').put('p', var.get('prev'))
                    if (var.get('that').get('_f')==var.get('entry')):
                        var.get('that').put('_f', var.get('next'))
                    if (var.get('that').get('_l')==var.get('entry')):
                        var.get('that').put('_l', var.get('prev'))
                    (var.get('that').put(var.get('SIZE'),Js(var.get('that').get(var.get('SIZE')).to_number())-Js(1))+Js(1))
                return var.get('entry').neg().neg()
            PyJs__delete_54_._set_name('_delete')
            @Js
            def PyJs_forEach_55_(callbackfn, this, arguments, var=var):
                var = Scope({'callbackfn':callbackfn, 'this':this, 'arguments':arguments, 'forEach':PyJs_forEach_55_}, var)
                var.registers(['entry', 'callbackfn', 'f'])
                var.get('validate')(var.get(u"this"), var.get('NAME'))
                var.put('f', var.get('ctx')(var.get('callbackfn'), (var.get('arguments').get('1') if (var.get('arguments').get('length')>Js(1.0)) else var.get('undefined')), Js(3.0)))
                pass
                while var.put('entry', (var.get('entry').get('n') if var.get('entry') else var.get(u"this").get('_f'))):
                    var.get('f')(var.get('entry').get('v'), var.get('entry').get('k'), var.get(u"this"))
                    while (var.get('entry') and var.get('entry').get('r')):
                        var.put('entry', var.get('entry').get('p'))
            PyJs_forEach_55_._set_name('forEach')
            @Js
            def PyJs_has_56_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, 'has':PyJs_has_56_}, var)
                var.registers(['key'])
                return var.get('getEntry')(var.get('validate')(var.get(u"this"), var.get('NAME')), var.get('key')).neg().neg()
            PyJs_has_56_._set_name('has')
            var.get('redefineAll')(var.get('C').get('prototype'), Js({'clear':PyJs_clear_53_,'delete':PyJs__delete_54_,'forEach':PyJs_forEach_55_,'has':PyJs_has_56_}))
            if var.get('DESCRIPTORS'):
                @Js
                def PyJs_get_57_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_57_}, var)
                    var.registers([])
                    return var.get('validate')(var.get(u"this"), var.get('NAME')).get(var.get('SIZE'))
                PyJs_get_57_._set_name('get')
                var.get('dP')(var.get('C').get('prototype'), Js('size'), Js({'get':PyJs_get_57_}))
            return var.get('C')
        PyJs_getConstructor_51_._set_name('getConstructor')
        @Js
        def PyJs_InlineNonPyName_58_(that, key, value, this, arguments, var=var):
            var = Scope({'that':that, 'key':key, 'value':value, 'this':this, 'arguments':arguments, 'def':PyJs_InlineNonPyName_58_}, var)
            var.registers(['index', 'that', 'prev', 'entry', 'value', 'key'])
            var.put('entry', var.get('getEntry')(var.get('that'), var.get('key')))
            pass
            if var.get('entry'):
                var.get('entry').put('v', var.get('value'))
            else:
                var.get('that').put('_l', var.put('entry', Js({'i':var.put('index', var.get('fastKey')(var.get('key'), Js(True))),'k':var.get('key'),'v':var.get('value'),'p':var.put('prev', var.get('that').get('_l')),'n':var.get('undefined'),'r':Js(False)})))
                if var.get('that').get('_f').neg():
                    var.get('that').put('_f', var.get('entry'))
                if var.get('prev'):
                    var.get('prev').put('n', var.get('entry'))
                (var.get('that').put(var.get('SIZE'),Js(var.get('that').get(var.get('SIZE')).to_number())+Js(1))-Js(1))
                if PyJsStrictNeq(var.get('index'),Js('F')):
                    var.get('that').get('_i').put(var.get('index'), var.get('entry'))
            return var.get('that')
        PyJs_InlineNonPyName_58_._set_name('def')
        @Js
        def PyJs_setStrong_59_(C, NAME, IS_MAP, this, arguments, var=var):
            var = Scope({'C':C, 'NAME':NAME, 'IS_MAP':IS_MAP, 'this':this, 'arguments':arguments, 'setStrong':PyJs_setStrong_59_}, var)
            var.registers(['NAME', 'C', 'IS_MAP'])
            @Js
            def PyJs_anonymous_60_(iterated, kind, this, arguments, var=var):
                var = Scope({'iterated':iterated, 'kind':kind, 'this':this, 'arguments':arguments}, var)
                var.registers(['iterated', 'kind'])
                var.get(u"this").put('_t', var.get('validate')(var.get('iterated'), var.get('NAME')))
                var.get(u"this").put('_k', var.get('kind'))
                var.get(u"this").put('_l', var.get('undefined'))
            PyJs_anonymous_60_._set_name('anonymous')
            @Js
            def PyJs_anonymous_61_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['entry', 'that', 'kind'])
                var.put('that', var.get(u"this"))
                var.put('kind', var.get('that').get('_k'))
                var.put('entry', var.get('that').get('_l'))
                while (var.get('entry') and var.get('entry').get('r')):
                    var.put('entry', var.get('entry').get('p'))
                if (var.get('that').get('_t').neg() or var.get('that').put('_l', var.put('entry', (var.get('entry').get('n') if var.get('entry') else var.get('that').get('_t').get('_f')))).neg()):
                    var.get('that').put('_t', var.get('undefined'))
                    return var.get('step')(Js(1.0))
                if (var.get('kind')==Js('keys')):
                    return var.get('step')(Js(0.0), var.get('entry').get('k'))
                if (var.get('kind')==Js('values')):
                    return var.get('step')(Js(0.0), var.get('entry').get('v'))
                return var.get('step')(Js(0.0), Js([var.get('entry').get('k'), var.get('entry').get('v')]))
            PyJs_anonymous_61_._set_name('anonymous')
            var.get('$iterDefine')(var.get('C'), var.get('NAME'), PyJs_anonymous_60_, PyJs_anonymous_61_, (Js('entries') if var.get('IS_MAP') else Js('values')), var.get('IS_MAP').neg(), Js(True))
            var.get('setSpecies')(var.get('NAME'))
        PyJs_setStrong_59_._set_name('setStrong')
        var.get('module').put('exports', Js({'getConstructor':PyJs_getConstructor_51_,'def':PyJs_InlineNonPyName_58_,'getEntry':var.get('getEntry'),'setStrong':PyJs_setStrong_59_}))
    PyJs_anonymous_49_._set_name('anonymous')
    @Js
    def PyJs_anonymous_62_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'classof', 'exports', 'module', 'from'])
        var.put('classof', var.get('require')(Js('./_classof')))
        var.put('from', var.get('require')(Js('./_array-from-iterable')))
        @Js
        def PyJs_anonymous_63_(NAME, this, arguments, var=var):
            var = Scope({'NAME':NAME, 'this':this, 'arguments':arguments}, var)
            var.registers(['NAME'])
            @Js
            def PyJs_toJSON_64_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'toJSON':PyJs_toJSON_64_}, var)
                var.registers([])
                if (var.get('classof')(var.get(u"this"))!=var.get('NAME')):
                    PyJsTempException = JsToPyException(var.get('TypeError')((var.get('NAME')+Js("#toJSON isn't generic"))))
                    raise PyJsTempException
                return var.get('from')(var.get(u"this"))
            PyJs_toJSON_64_._set_name('toJSON')
            return PyJs_toJSON_64_
        PyJs_anonymous_63_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_63_)
    PyJs_anonymous_62_._set_name('anonymous')
    @Js
    def PyJs_anonymous_65_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['getWeak', 'arrayFindIndex', 'require', 'UncaughtFrozenStore', 'redefineAll', 'anInstance', 'arrayFind', 'uncaughtFrozenStore', 'exports', 'createArrayMethod', 'module', 'id', 'validate', '$has', 'forOf', 'isObject', 'findUncaughtFrozen', 'anObject'])
        Js('use strict')
        var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
        var.put('getWeak', var.get('require')(Js('./_meta')).get('getWeak'))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        var.put('createArrayMethod', var.get('require')(Js('./_array-methods')))
        var.put('$has', var.get('require')(Js('./_has')))
        var.put('validate', var.get('require')(Js('./_validate-collection')))
        var.put('arrayFind', var.get('createArrayMethod')(Js(5.0)))
        var.put('arrayFindIndex', var.get('createArrayMethod')(Js(6.0)))
        var.put('id', Js(0.0))
        @Js
        def PyJs_uncaughtFrozenStore_66_(that, this, arguments, var=var):
            var = Scope({'that':that, 'this':this, 'arguments':arguments, 'uncaughtFrozenStore':PyJs_uncaughtFrozenStore_66_}, var)
            var.registers(['that'])
            return (var.get('that').get('_l') or var.get('that').put('_l', var.get('UncaughtFrozenStore').create()))
        PyJs_uncaughtFrozenStore_66_._set_name('uncaughtFrozenStore')
        var.put('uncaughtFrozenStore', PyJs_uncaughtFrozenStore_66_)
        @Js
        def PyJs_UncaughtFrozenStore_67_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'UncaughtFrozenStore':PyJs_UncaughtFrozenStore_67_}, var)
            var.registers([])
            var.get(u"this").put('a', Js([]))
        PyJs_UncaughtFrozenStore_67_._set_name('UncaughtFrozenStore')
        var.put('UncaughtFrozenStore', PyJs_UncaughtFrozenStore_67_)
        @Js
        def PyJs_findUncaughtFrozen_68_(store, key, this, arguments, var=var):
            var = Scope({'store':store, 'key':key, 'this':this, 'arguments':arguments, 'findUncaughtFrozen':PyJs_findUncaughtFrozen_68_}, var)
            var.registers(['store', 'key'])
            @Js
            def PyJs_anonymous_69_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it'])
                return PyJsStrictEq(var.get('it').get('0'),var.get('key'))
            PyJs_anonymous_69_._set_name('anonymous')
            return var.get('arrayFind')(var.get('store').get('a'), PyJs_anonymous_69_)
        PyJs_findUncaughtFrozen_68_._set_name('findUncaughtFrozen')
        var.put('findUncaughtFrozen', PyJs_findUncaughtFrozen_68_)
        @Js
        def PyJs_get_70_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'get':PyJs_get_70_}, var)
            var.registers(['entry', 'key'])
            var.put('entry', var.get('findUncaughtFrozen')(var.get(u"this"), var.get('key')))
            if var.get('entry'):
                return var.get('entry').get('1')
        PyJs_get_70_._set_name('get')
        @Js
        def PyJs_has_71_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, 'has':PyJs_has_71_}, var)
            var.registers(['key'])
            return var.get('findUncaughtFrozen')(var.get(u"this"), var.get('key')).neg().neg()
        PyJs_has_71_._set_name('has')
        @Js
        def PyJs_set_72_(key, value, this, arguments, var=var):
            var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments, 'set':PyJs_set_72_}, var)
            var.registers(['entry', 'value', 'key'])
            var.put('entry', var.get('findUncaughtFrozen')(var.get(u"this"), var.get('key')))
            if var.get('entry'):
                var.get('entry').put('1', var.get('value'))
            else:
                var.get(u"this").get('a').callprop('push', Js([var.get('key'), var.get('value')]))
        PyJs_set_72_._set_name('set')
        @Js
        def PyJs__delete_73_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments, '_delete':PyJs__delete_73_}, var)
            var.registers(['index', 'key'])
            @Js
            def PyJs_anonymous_74_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it'])
                return PyJsStrictEq(var.get('it').get('0'),var.get('key'))
            PyJs_anonymous_74_._set_name('anonymous')
            var.put('index', var.get('arrayFindIndex')(var.get(u"this").get('a'), PyJs_anonymous_74_))
            if (~var.get('index')):
                var.get(u"this").get('a').callprop('splice', var.get('index'), Js(1.0))
            return (~var.get('index')).neg().neg()
        PyJs__delete_73_._set_name('_delete')
        var.get('UncaughtFrozenStore').put('prototype', Js({'get':PyJs_get_70_,'has':PyJs_has_71_,'set':PyJs_set_72_,'delete':PyJs__delete_73_}))
        @Js
        def PyJs_getConstructor_75_(wrapper, NAME, IS_MAP, ADDER, this, arguments, var=var):
            var = Scope({'wrapper':wrapper, 'NAME':NAME, 'IS_MAP':IS_MAP, 'ADDER':ADDER, 'this':this, 'arguments':arguments, 'getConstructor':PyJs_getConstructor_75_}, var)
            var.registers(['C', 'ADDER', 'wrapper', 'NAME', 'IS_MAP'])
            @Js
            def PyJs_anonymous_76_(that, iterable, this, arguments, var=var):
                var = Scope({'that':that, 'iterable':iterable, 'this':this, 'arguments':arguments}, var)
                var.registers(['iterable', 'that'])
                var.get('anInstance')(var.get('that'), var.get('C'), var.get('NAME'), Js('_i'))
                var.get('that').put('_t', var.get('NAME'))
                var.get('that').put('_i', (var.put('id',Js(var.get('id').to_number())+Js(1))-Js(1)))
                var.get('that').put('_l', var.get('undefined'))
                if (var.get('iterable')!=var.get('undefined')):
                    var.get('forOf')(var.get('iterable'), var.get('IS_MAP'), var.get('that').get(var.get('ADDER')), var.get('that'))
            PyJs_anonymous_76_._set_name('anonymous')
            var.put('C', var.get('wrapper')(PyJs_anonymous_76_))
            @Js
            def PyJs__delete_77_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, '_delete':PyJs__delete_77_}, var)
                var.registers(['data', 'key'])
                if var.get('isObject')(var.get('key')).neg():
                    return Js(False)
                var.put('data', var.get('getWeak')(var.get('key')))
                if PyJsStrictEq(var.get('data'),Js(True)):
                    return var.get('uncaughtFrozenStore')(var.get('validate')(var.get(u"this"), var.get('NAME'))).callprop('delete', var.get('key'))
                return ((var.get('data') and var.get('$has')(var.get('data'), var.get(u"this").get('_i'))) and var.get('data').delete(var.get(u"this").get('_i')))
            PyJs__delete_77_._set_name('_delete')
            @Js
            def PyJs_has_78_(key, this, arguments, var=var):
                var = Scope({'key':key, 'this':this, 'arguments':arguments, 'has':PyJs_has_78_}, var)
                var.registers(['data', 'key'])
                if var.get('isObject')(var.get('key')).neg():
                    return Js(False)
                var.put('data', var.get('getWeak')(var.get('key')))
                if PyJsStrictEq(var.get('data'),Js(True)):
                    return var.get('uncaughtFrozenStore')(var.get('validate')(var.get(u"this"), var.get('NAME'))).callprop('has', var.get('key'))
                return (var.get('data') and var.get('$has')(var.get('data'), var.get(u"this").get('_i')))
            PyJs_has_78_._set_name('has')
            var.get('redefineAll')(var.get('C').get('prototype'), Js({'delete':PyJs__delete_77_,'has':PyJs_has_78_}))
            return var.get('C')
        PyJs_getConstructor_75_._set_name('getConstructor')
        @Js
        def PyJs_InlineNonPyName_79_(that, key, value, this, arguments, var=var):
            var = Scope({'that':that, 'key':key, 'value':value, 'this':this, 'arguments':arguments, 'def':PyJs_InlineNonPyName_79_}, var)
            var.registers(['value', 'data', 'key', 'that'])
            var.put('data', var.get('getWeak')(var.get('anObject')(var.get('key')), Js(True)))
            if PyJsStrictEq(var.get('data'),Js(True)):
                var.get('uncaughtFrozenStore')(var.get('that')).callprop('set', var.get('key'), var.get('value'))
            else:
                var.get('data').put(var.get('that').get('_i'), var.get('value'))
            return var.get('that')
        PyJs_InlineNonPyName_79_._set_name('def')
        var.get('module').put('exports', Js({'getConstructor':PyJs_getConstructor_75_,'def':PyJs_InlineNonPyName_79_,'ufstore':var.get('uncaughtFrozenStore')}))
    PyJs_anonymous_65_._set_name('anonymous')
    @Js
    def PyJs_anonymous_80_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'setToStringTag', 'redefineAll', 'anInstance', 'inheritIfRequired', 'redefine', 'meta', '$export', 'exports', 'module', 'forOf', 'fails', 'global', 'isObject', '$iterDetect'])
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('redefineAll', var.get('require')(Js('./_redefine-all')))
        var.put('meta', var.get('require')(Js('./_meta')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        var.put('anInstance', var.get('require')(Js('./_an-instance')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('$iterDetect', var.get('require')(Js('./_iter-detect')))
        var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
        var.put('inheritIfRequired', var.get('require')(Js('./_inherit-if-required')))
        @Js
        def PyJs_anonymous_81_(NAME, wrapper, methods, common, IS_MAP, IS_WEAK, this, arguments, var=var):
            var = Scope({'NAME':NAME, 'wrapper':wrapper, 'methods':methods, 'common':common, 'IS_MAP':IS_MAP, 'IS_WEAK':IS_WEAK, 'this':this, 'arguments':arguments}, var)
            var.registers(['ACCEPT_ITERABLES', 'C', 'THROWS_ON_PRIMITIVES', 'fixMethod', 'proto', 'methods', 'IS_WEAK', 'O', 'Base', 'ADDER', 'BUGGY_ZERO', 'wrapper', 'NAME', 'HASNT_CHAINING', 'IS_MAP', 'instance', 'common'])
            var.put('Base', var.get('global').get(var.get('NAME')))
            var.put('C', var.get('Base'))
            var.put('ADDER', (Js('set') if var.get('IS_MAP') else Js('add')))
            var.put('proto', (var.get('C') and var.get('C').get('prototype')))
            var.put('O', Js({}))
            @Js
            def PyJs_fixMethod_82_(KEY, this, arguments, var=var):
                var = Scope({'KEY':KEY, 'this':this, 'arguments':arguments, 'fixMethod':PyJs_fixMethod_82_}, var)
                var.registers(['fn', 'KEY'])
                var.put('fn', var.get('proto').get(var.get('KEY')))
                @Js
                def PyJs_anonymous_83_(a, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'arguments':arguments}, var)
                    var.registers(['a'])
                    return (Js(False) if (var.get('IS_WEAK') and var.get('isObject')(var.get('a')).neg()) else var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if PyJsStrictEq(var.get('a'),Js(0.0)) else var.get('a'))))
                PyJs_anonymous_83_._set_name('anonymous')
                @Js
                def PyJs_has_84_(a, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'arguments':arguments, 'has':PyJs_has_84_}, var)
                    var.registers(['a'])
                    return (Js(False) if (var.get('IS_WEAK') and var.get('isObject')(var.get('a')).neg()) else var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if PyJsStrictEq(var.get('a'),Js(0.0)) else var.get('a'))))
                PyJs_has_84_._set_name('has')
                @Js
                def PyJs_get_85_(a, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'arguments':arguments, 'get':PyJs_get_85_}, var)
                    var.registers(['a'])
                    return (var.get('undefined') if (var.get('IS_WEAK') and var.get('isObject')(var.get('a')).neg()) else var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if PyJsStrictEq(var.get('a'),Js(0.0)) else var.get('a'))))
                PyJs_get_85_._set_name('get')
                @Js
                def PyJs_add_86_(a, this, arguments, var=var):
                    var = Scope({'a':a, 'this':this, 'arguments':arguments, 'add':PyJs_add_86_}, var)
                    var.registers(['a'])
                    var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if PyJsStrictEq(var.get('a'),Js(0.0)) else var.get('a')))
                    return var.get(u"this")
                PyJs_add_86_._set_name('add')
                @Js
                def PyJs_set_87_(a, b, this, arguments, var=var):
                    var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments, 'set':PyJs_set_87_}, var)
                    var.registers(['a', 'b'])
                    var.get('fn').callprop('call', var.get(u"this"), (Js(0.0) if PyJsStrictEq(var.get('a'),Js(0.0)) else var.get('a')), var.get('b'))
                    return var.get(u"this")
                PyJs_set_87_._set_name('set')
                var.get('redefine')(var.get('proto'), var.get('KEY'), (PyJs_anonymous_83_ if (var.get('KEY')==Js('delete')) else (PyJs_has_84_ if (var.get('KEY')==Js('has')) else (PyJs_get_85_ if (var.get('KEY')==Js('get')) else (PyJs_add_86_ if (var.get('KEY')==Js('add')) else PyJs_set_87_)))))
            PyJs_fixMethod_82_._set_name('fixMethod')
            var.put('fixMethod', PyJs_fixMethod_82_)
            @Js
            def PyJs_anonymous_88_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('C').create().callprop('entries').callprop('next')
            PyJs_anonymous_88_._set_name('anonymous')
            if ((var.get('C',throw=False).typeof()!=Js('function')) or (var.get('IS_WEAK') or (var.get('proto').get('forEach') and var.get('fails')(PyJs_anonymous_88_).neg())).neg()):
                var.put('C', var.get('common').callprop('getConstructor', var.get('wrapper'), var.get('NAME'), var.get('IS_MAP'), var.get('ADDER')))
                var.get('redefineAll')(var.get('C').get('prototype'), var.get('methods'))
                var.get('meta').put('NEED', Js(True))
            else:
                var.put('instance', var.get('C').create())
                var.put('HASNT_CHAINING', (var.get('instance').callprop(var.get('ADDER'), (Js({}) if var.get('IS_WEAK') else (-Js(0.0))), Js(1.0))!=var.get('instance')))
                @Js
                def PyJs_anonymous_89_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('instance').callprop('has', Js(1.0))
                PyJs_anonymous_89_._set_name('anonymous')
                var.put('THROWS_ON_PRIMITIVES', var.get('fails')(PyJs_anonymous_89_))
                @Js
                def PyJs_anonymous_90_(iter, this, arguments, var=var):
                    var = Scope({'iter':iter, 'this':this, 'arguments':arguments}, var)
                    var.registers(['iter'])
                    var.get('C').create(var.get('iter'))
                PyJs_anonymous_90_._set_name('anonymous')
                var.put('ACCEPT_ITERABLES', var.get('$iterDetect')(PyJs_anonymous_90_))
                @Js
                def PyJs_anonymous_91_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers(['index', '$instance'])
                    var.put('$instance', var.get('C').create())
                    var.put('index', Js(5.0))
                    while (var.put('index',Js(var.get('index').to_number())-Js(1))+Js(1)):
                        var.get('$instance').callprop(var.get('ADDER'), var.get('index'), var.get('index'))
                    return var.get('$instance').callprop('has', (-Js(0.0))).neg()
                PyJs_anonymous_91_._set_name('anonymous')
                var.put('BUGGY_ZERO', (var.get('IS_WEAK').neg() and var.get('fails')(PyJs_anonymous_91_)))
                if var.get('ACCEPT_ITERABLES').neg():
                    @Js
                    def PyJs_anonymous_92_(target, iterable, this, arguments, var=var):
                        var = Scope({'target':target, 'iterable':iterable, 'this':this, 'arguments':arguments}, var)
                        var.registers(['target', 'iterable', 'that'])
                        var.get('anInstance')(var.get('target'), var.get('C'), var.get('NAME'))
                        var.put('that', var.get('inheritIfRequired')(var.get('Base').create(), var.get('target'), var.get('C')))
                        if (var.get('iterable')!=var.get('undefined')):
                            var.get('forOf')(var.get('iterable'), var.get('IS_MAP'), var.get('that').get(var.get('ADDER')), var.get('that'))
                        return var.get('that')
                    PyJs_anonymous_92_._set_name('anonymous')
                    var.put('C', var.get('wrapper')(PyJs_anonymous_92_))
                    var.get('C').put('prototype', var.get('proto'))
                    var.get('proto').put('constructor', var.get('C'))
                if (var.get('THROWS_ON_PRIMITIVES') or var.get('BUGGY_ZERO')):
                    var.get('fixMethod')(Js('delete'))
                    var.get('fixMethod')(Js('has'))
                    (var.get('IS_MAP') and var.get('fixMethod')(Js('get')))
                if (var.get('BUGGY_ZERO') or var.get('HASNT_CHAINING')):
                    var.get('fixMethod')(var.get('ADDER'))
                if (var.get('IS_WEAK') and var.get('proto').get('clear')):
                    var.get('proto').delete('clear')
            var.get('setToStringTag')(var.get('C'), var.get('NAME'))
            var.get('O').put(var.get('NAME'), var.get('C'))
            var.get('$export')(((var.get('$export').get('G')+var.get('$export').get('W'))+(var.get('$export').get('F')*(var.get('C')!=var.get('Base')))), var.get('O'))
            if var.get('IS_WEAK').neg():
                var.get('common').callprop('setStrong', var.get('C'), var.get('NAME'), var.get('IS_MAP'))
            return var.get('C')
        PyJs_anonymous_81_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_81_)
    PyJs_anonymous_80_._set_name('anonymous')
    @Js
    def PyJs_anonymous_93_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['core', 'module', 'require', 'exports'])
        var.put('core', var.get('module').put('exports', Js({'version':Js('2.6.12')})))
        if (var.get('__e',throw=False).typeof()==Js('number')):
            var.put('__e', var.get('core'))
    PyJs_anonymous_93_._set_name('anonymous')
    @Js
    def PyJs_anonymous_94_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$defineProperty', 'exports', 'module', 'createDesc'])
        Js('use strict')
        var.put('$defineProperty', var.get('require')(Js('./_object-dp')))
        var.put('createDesc', var.get('require')(Js('./_property-desc')))
        @Js
        def PyJs_anonymous_95_(object, index, value, this, arguments, var=var):
            var = Scope({'object':object, 'index':index, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['index', 'value', 'object'])
            if var.get('object').contains(var.get('index')):
                var.get('$defineProperty').callprop('f', var.get('object'), var.get('index'), var.get('createDesc')(Js(0.0), var.get('value')))
            else:
                var.get('object').put(var.get('index'), var.get('value'))
        PyJs_anonymous_95_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_95_)
    PyJs_anonymous_94_._set_name('anonymous')
    @Js
    def PyJs_anonymous_96_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', 'module', 'exports'])
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        @Js
        def PyJs_anonymous_97_(fn, that, length, this, arguments, var=var):
            var = Scope({'fn':fn, 'that':that, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'fn', 'that'])
            var.get('aFunction')(var.get('fn'))
            if PyJsStrictEq(var.get('that'),var.get('undefined')):
                return var.get('fn')
            while 1:
                SWITCHED = False
                CONDITION = (var.get('length'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_98_(a, this, arguments, var=var):
                        var = Scope({'a':a, 'this':this, 'arguments':arguments}, var)
                        var.registers(['a'])
                        return var.get('fn').callprop('call', var.get('that'), var.get('a'))
                    PyJs_anonymous_98_._set_name('anonymous')
                    return PyJs_anonymous_98_
                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_99_(a, b, this, arguments, var=var):
                        var = Scope({'a':a, 'b':b, 'this':this, 'arguments':arguments}, var)
                        var.registers(['a', 'b'])
                        return var.get('fn').callprop('call', var.get('that'), var.get('a'), var.get('b'))
                    PyJs_anonymous_99_._set_name('anonymous')
                    return PyJs_anonymous_99_
                if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                    SWITCHED = True
                    @Js
                    def PyJs_anonymous_100_(a, b, c, this, arguments, var=var):
                        var = Scope({'a':a, 'b':b, 'c':c, 'this':this, 'arguments':arguments}, var)
                        var.registers(['c', 'a', 'b'])
                        return var.get('fn').callprop('call', var.get('that'), var.get('a'), var.get('b'), var.get('c'))
                    PyJs_anonymous_100_._set_name('anonymous')
                    return PyJs_anonymous_100_
                SWITCHED = True
                break
            @Js
            def PyJs_anonymous_101_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('fn').callprop('apply', var.get('that'), var.get('arguments'))
            PyJs_anonymous_101_._set_name('anonymous')
            return PyJs_anonymous_101_
        PyJs_anonymous_97_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_97_)
    PyJs_anonymous_96_._set_name('anonymous')
    @Js
    def PyJs_anonymous_102_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$toISOString', 'exports', 'lz', 'module', 'getTime', 'fails'])
        Js('use strict')
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('getTime', var.get('Date').get('prototype').get('getTime'))
        var.put('$toISOString', var.get('Date').get('prototype').get('toISOString'))
        @Js
        def PyJs_lz_103_(num, this, arguments, var=var):
            var = Scope({'num':num, 'this':this, 'arguments':arguments, 'lz':PyJs_lz_103_}, var)
            var.registers(['num'])
            return (var.get('num') if (var.get('num')>Js(9.0)) else (Js('0')+var.get('num')))
        PyJs_lz_103_._set_name('lz')
        var.put('lz', PyJs_lz_103_)
        @Js
        def PyJs_toISOString_104_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'toISOString':PyJs_toISOString_104_}, var)
            var.registers(['s', 'm', 'd', 'y'])
            if var.get('isFinite')(var.get('getTime').callprop('call', var.get(u"this"))).neg():
                PyJsTempException = JsToPyException(var.get('RangeError')(Js('Invalid time value')))
                raise PyJsTempException
            var.put('d', var.get(u"this"))
            var.put('y', var.get('d').callprop('getUTCFullYear'))
            var.put('m', var.get('d').callprop('getUTCMilliseconds'))
            var.put('s', (Js('-') if (var.get('y')<Js(0.0)) else (Js('+') if (var.get('y')>Js(9999.0)) else Js(''))))
            def PyJs_LONG_105_(var=var):
                return (((((((((var.get('s')+(Js('00000')+var.get('Math').callprop('abs', var.get('y'))).callprop('slice', ((-Js(6.0)) if var.get('s') else (-Js(4.0)))))+Js('-'))+var.get('lz')((var.get('d').callprop('getUTCMonth')+Js(1.0))))+Js('-'))+var.get('lz')(var.get('d').callprop('getUTCDate')))+Js('T'))+var.get('lz')(var.get('d').callprop('getUTCHours')))+Js(':'))+var.get('lz')(var.get('d').callprop('getUTCMinutes')))
            return (((((PyJs_LONG_105_()+Js(':'))+var.get('lz')(var.get('d').callprop('getUTCSeconds')))+Js('.'))+(var.get('m') if (var.get('m')>Js(99.0)) else (Js('0')+var.get('lz')(var.get('m')))))+Js('Z'))
        PyJs_toISOString_104_._set_name('toISOString')
        @Js
        def PyJs_anonymous_106_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return (var.get('$toISOString').callprop('call', var.get('Date').create(((-Js(50000000000000.0))-Js(1.0))))!=Js('0385-07-25T07:06:39.999Z'))
        PyJs_anonymous_106_._set_name('anonymous')
        @Js
        def PyJs_anonymous_107_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            var.get('$toISOString').callprop('call', var.get('Date').create(var.get('NaN')))
        PyJs_anonymous_107_._set_name('anonymous')
        var.get('module').put('exports', (PyJs_toISOString_104_ if (var.get('fails')(PyJs_anonymous_106_) or var.get('fails')(PyJs_anonymous_107_).neg()) else var.get('$toISOString')))
    PyJs_anonymous_102_._set_name('anonymous')
    @Js
    def PyJs_anonymous_108_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toPrimitive', 'NUMBER', 'exports', 'module', 'anObject'])
        Js('use strict')
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('NUMBER', Js('number'))
        @Js
        def PyJs_anonymous_109_(hint, this, arguments, var=var):
            var = Scope({'hint':hint, 'this':this, 'arguments':arguments}, var)
            var.registers(['hint'])
            if ((PyJsStrictNeq(var.get('hint'),Js('string')) and PyJsStrictNeq(var.get('hint'),var.get('NUMBER'))) and PyJsStrictNeq(var.get('hint'),Js('default'))):
                PyJsTempException = JsToPyException(var.get('TypeError')(Js('Incorrect hint')))
                raise PyJsTempException
            return var.get('toPrimitive')(var.get('anObject')(var.get(u"this")), (var.get('hint')!=var.get('NUMBER')))
        PyJs_anonymous_109_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_109_)
    PyJs_anonymous_108_._set_name('anonymous')
    @Js
    def PyJs_anonymous_110_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_111_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            if (var.get('it')==var.get('undefined')):
                PyJsTempException = JsToPyException(var.get('TypeError')((Js("Can't call method on  ")+var.get('it'))))
                raise PyJsTempException
            return var.get('it')
        PyJs_anonymous_111_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_111_)
    PyJs_anonymous_110_._set_name('anonymous')
    @Js
    def PyJs_anonymous_112_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_113_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_get_114_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_114_}, var)
                var.registers([])
                return Js(7.0)
            PyJs_get_114_._set_name('get')
            return (var.get('Object').callprop('defineProperty', Js({}), Js('a'), Js({'get':PyJs_get_114_})).get('a')!=Js(7.0))
        PyJs_anonymous_113_._set_name('anonymous')
        var.get('module').put('exports', var.get('require')(Js('./_fails'))(PyJs_anonymous_113_).neg())
    PyJs_anonymous_112_._set_name('anonymous')
    @Js
    def PyJs_anonymous_115_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['document', 'require', 'is', 'exports', 'module', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('document', var.get('require')(Js('./_global')).get('document'))
        var.put('is', (var.get('isObject')(var.get('document')) and var.get('isObject')(var.get('document').get('createElement'))))
        @Js
        def PyJs_anonymous_116_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (var.get('document').callprop('createElement', var.get('it')) if var.get('is') else Js({}))
        PyJs_anonymous_116_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_116_)
    PyJs_anonymous_115_._set_name('anonymous')
    @Js
    def PyJs_anonymous_117_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('module').put('exports', Js('constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf').callprop('split', Js(',')))
    PyJs_anonymous_117_._set_name('anonymous')
    @Js
    def PyJs_anonymous_118_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'getKeys', 'pIE', 'gOPS', 'exports', 'module'])
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        var.put('gOPS', var.get('require')(Js('./_object-gops')))
        var.put('pIE', var.get('require')(Js('./_object-pie')))
        @Js
        def PyJs_anonymous_119_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'symbols', 'i', 'result', 'getSymbols', 'isEnum', 'key'])
            var.put('result', var.get('getKeys')(var.get('it')))
            var.put('getSymbols', var.get('gOPS').get('f'))
            if var.get('getSymbols'):
                var.put('symbols', var.get('getSymbols')(var.get('it')))
                var.put('isEnum', var.get('pIE').get('f'))
                var.put('i', Js(0.0))
                pass
                while (var.get('symbols').get('length')>var.get('i')):
                    if var.get('isEnum').callprop('call', var.get('it'), var.put('key', var.get('symbols').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))):
                        var.get('result').callprop('push', var.get('key'))
            return var.get('result')
        PyJs_anonymous_119_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_119_)
    PyJs_anonymous_118_._set_name('anonymous')
    @Js
    def PyJs_anonymous_120_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['core', 'PROTOTYPE', 'hide', 'require', 'redefine', '$export', 'exports', 'module', 'ctx', 'global'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('core', var.get('require')(Js('./_core')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('PROTOTYPE', Js('prototype'))
        @Js
        def PyJs_InlineNonPyName_121_(type, name, source, this, arguments, var=var):
            var = Scope({'type':type, 'name':name, 'source':source, 'this':this, 'arguments':arguments, '$export':PyJs_InlineNonPyName_121_}, var)
            var.registers(['expProto', 'target', 'IS_BIND', 'IS_STATIC', 'type', 'source', 'exports', 'IS_PROTO', 'out', 'name', 'key', 'IS_FORCED', 'own', 'exp', 'IS_GLOBAL'])
            var.put('IS_FORCED', (var.get('type')&var.get('$export').get('F')))
            var.put('IS_GLOBAL', (var.get('type')&var.get('$export').get('G')))
            var.put('IS_STATIC', (var.get('type')&var.get('$export').get('S')))
            var.put('IS_PROTO', (var.get('type')&var.get('$export').get('P')))
            var.put('IS_BIND', (var.get('type')&var.get('$export').get('B')))
            var.put('target', (var.get('global') if var.get('IS_GLOBAL') else ((var.get('global').get(var.get('name')) or var.get('global').put(var.get('name'), Js({}))) if var.get('IS_STATIC') else (var.get('global').get(var.get('name')) or Js({})).get(var.get('PROTOTYPE')))))
            var.put('exports', (var.get('core') if var.get('IS_GLOBAL') else (var.get('core').get(var.get('name')) or var.get('core').put(var.get('name'), Js({})))))
            var.put('expProto', (var.get('exports').get(var.get('PROTOTYPE')) or var.get('exports').put(var.get('PROTOTYPE'), Js({}))))
            pass
            if var.get('IS_GLOBAL'):
                var.put('source', var.get('name'))
            for PyJsTemp in var.get('source'):
                var.put('key', PyJsTemp)
                var.put('own', ((var.get('IS_FORCED').neg() and var.get('target')) and PyJsStrictNeq(var.get('target').get(var.get('key')),var.get('undefined'))))
                var.put('out', (var.get('target') if var.get('own') else var.get('source')).get(var.get('key')))
                var.put('exp', (var.get('ctx')(var.get('out'), var.get('global')) if (var.get('IS_BIND') and var.get('own')) else (var.get('ctx')(var.get('Function').get('call'), var.get('out')) if (var.get('IS_PROTO') and (var.get('out',throw=False).typeof()==Js('function'))) else var.get('out'))))
                if var.get('target'):
                    var.get('redefine')(var.get('target'), var.get('key'), var.get('out'), (var.get('type')&var.get('$export').get('U')))
                if (var.get('exports').get(var.get('key'))!=var.get('out')):
                    var.get('hide')(var.get('exports'), var.get('key'), var.get('exp'))
                if (var.get('IS_PROTO') and (var.get('expProto').get(var.get('key'))!=var.get('out'))):
                    var.get('expProto').put(var.get('key'), var.get('out'))
        PyJs_InlineNonPyName_121_._set_name('$export')
        var.put('$export', PyJs_InlineNonPyName_121_)
        var.get('global').put('core', var.get('core'))
        var.get('$export').put('F', Js(1.0))
        var.get('$export').put('G', Js(2.0))
        var.get('$export').put('S', Js(4.0))
        var.get('$export').put('P', Js(8.0))
        var.get('$export').put('B', Js(16.0))
        var.get('$export').put('W', Js(32.0))
        var.get('$export').put('U', Js(64.0))
        var.get('$export').put('R', Js(128.0))
        var.get('module').put('exports', var.get('$export'))
    PyJs_anonymous_120_._set_name('anonymous')
    @Js
    def PyJs_anonymous_122_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'MATCH', 'module', 'exports'])
        var.put('MATCH', var.get('require')(Js('./_wks'))(Js('match')))
        @Js
        def PyJs_anonymous_123_(KEY, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'this':this, 'arguments':arguments}, var)
            var.registers(['re', 'KEY'])
            var.put('re', JsRegExp('/./'))
            try:
                Js('/./').callprop(var.get('KEY'), var.get('re'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_39574769 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    try:
                        var.get('re').put(var.get('MATCH'), Js(False))
                        return Js('/./').callprop(var.get('KEY'), var.get('re')).neg()
                    except PyJsException as PyJsTempException:
                        PyJsHolder_66_54701817 = var.own.get('f')
                        var.force_own_put('f', PyExceptionToJs(PyJsTempException))
                        try:
                            pass
                        finally:
                            if PyJsHolder_66_54701817 is not None:
                                var.own['f'] = PyJsHolder_66_54701817
                            else:
                                del var.own['f']
                            del PyJsHolder_66_54701817
                finally:
                    if PyJsHolder_65_39574769 is not None:
                        var.own['e'] = PyJsHolder_65_39574769
                    else:
                        del var.own['e']
                    del PyJsHolder_65_39574769
            return Js(True)
        PyJs_anonymous_123_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_123_)
    PyJs_anonymous_122_._set_name('anonymous')
    @Js
    def PyJs_anonymous_124_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_125_(exec, this, arguments, var=var):
            var = Scope({'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['exec'])
            try:
                return var.get('exec')().neg().neg()
            except PyJsException as PyJsTempException:
                PyJsHolder_65_92210443 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js(True)
                finally:
                    if PyJsHolder_65_92210443 is not None:
                        var.own['e'] = PyJsHolder_65_92210443
                    else:
                        del var.own['e']
                    del PyJsHolder_65_92210443
        PyJs_anonymous_125_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_125_)
    PyJs_anonymous_124_._set_name('anonymous')
    @Js
    def PyJs_anonymous_126_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'defined', 'hide', 'wks', 'SPECIES', 'redefine', 'REPLACE_SUPPORTS_NAMED_GROUPS', 'exports', 'module', 'SPLIT_WORKS_WITH_OVERWRITTEN_EXEC', 'fails', 'regexpExec'])
        Js('use strict')
        var.get('require')(Js('./es6.regexp.exec'))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('defined', var.get('require')(Js('./_defined')))
        var.put('wks', var.get('require')(Js('./_wks')))
        var.put('regexpExec', var.get('require')(Js('./_regexp-exec')))
        var.put('SPECIES', var.get('wks')(Js('species')))
        @Js
        def PyJs_anonymous_127_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['re'])
            var.put('re', JsRegExp('/./'))
            @Js
            def PyJs_anonymous_128_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['result'])
                var.put('result', Js([]))
                var.get('result').put('groups', Js({'a':Js('7')}))
                return var.get('result')
            PyJs_anonymous_128_._set_name('anonymous')
            var.get('re').put('exec', PyJs_anonymous_128_)
            return PyJsStrictNeq(Js('').callprop('replace', var.get('re'), Js('$<a>')),Js('7'))
        PyJs_anonymous_127_._set_name('anonymous')
        var.put('REPLACE_SUPPORTS_NAMED_GROUPS', var.get('fails')(PyJs_anonymous_127_).neg())
        @Js
        def PyJs_anonymous_129_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['re', 'result', 'originalExec'])
            var.put('re', JsRegExp('/(?:)/'))
            var.put('originalExec', var.get('re').get('exec'))
            @Js
            def PyJs_anonymous_130_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('originalExec').callprop('apply', var.get(u"this"), var.get('arguments'))
            PyJs_anonymous_130_._set_name('anonymous')
            var.get('re').put('exec', PyJs_anonymous_130_)
            var.put('result', Js('ab').callprop('split', var.get('re')))
            return ((PyJsStrictEq(var.get('result').get('length'),Js(2.0)) and PyJsStrictEq(var.get('result').get('0'),Js('a'))) and PyJsStrictEq(var.get('result').get('1'),Js('b')))
        PyJs_anonymous_129_._set_name('anonymous')
        var.put('SPLIT_WORKS_WITH_OVERWRITTEN_EXEC', PyJs_anonymous_129_())
        @Js
        def PyJs_anonymous_131_(KEY, length, exec, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'length':length, 'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['SYMBOL', 'KEY', 'fns', 'nativeRegExpMethod', 'strfn', 'length', 'rxfn', 'exec', 'DELEGATES_TO_SYMBOL', 'DELEGATES_TO_EXEC'])
            var.put('SYMBOL', var.get('wks')(var.get('KEY')))
            @Js
            def PyJs_anonymous_132_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['O'])
                var.put('O', Js({}))
                @Js
                def PyJs_anonymous_133_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return Js(7.0)
                PyJs_anonymous_133_._set_name('anonymous')
                var.get('O').put(var.get('SYMBOL'), PyJs_anonymous_133_)
                return (Js('').callprop(var.get('KEY'), var.get('O'))!=Js(7.0))
            PyJs_anonymous_132_._set_name('anonymous')
            var.put('DELEGATES_TO_SYMBOL', var.get('fails')(PyJs_anonymous_132_).neg())
            @Js
            def PyJs_anonymous_134_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['execCalled', 're'])
                var.put('execCalled', Js(False))
                var.put('re', JsRegExp('/a/'))
                @Js
                def PyJs_anonymous_135_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.put('execCalled', Js(True))
                    return var.get(u"null")
                PyJs_anonymous_135_._set_name('anonymous')
                var.get('re').put('exec', PyJs_anonymous_135_)
                if PyJsStrictEq(var.get('KEY'),Js('split')):
                    var.get('re').put('constructor', Js({}))
                    @Js
                    def PyJs_anonymous_136_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        return var.get('re')
                    PyJs_anonymous_136_._set_name('anonymous')
                    var.get('re').get('constructor').put(var.get('SPECIES'), PyJs_anonymous_136_)
                var.get('re').callprop(var.get('SYMBOL'), Js(''))
                return var.get('execCalled').neg()
            PyJs_anonymous_134_._set_name('anonymous')
            var.put('DELEGATES_TO_EXEC', (var.get('fails')(PyJs_anonymous_134_).neg() if var.get('DELEGATES_TO_SYMBOL') else var.get('undefined')))
            if (((var.get('DELEGATES_TO_SYMBOL').neg() or var.get('DELEGATES_TO_EXEC').neg()) or (PyJsStrictEq(var.get('KEY'),Js('replace')) and var.get('REPLACE_SUPPORTS_NAMED_GROUPS').neg())) or (PyJsStrictEq(var.get('KEY'),Js('split')) and var.get('SPLIT_WORKS_WITH_OVERWRITTEN_EXEC').neg())):
                var.put('nativeRegExpMethod', JsRegExp('/./').get(var.get('SYMBOL')))
                @Js
                def PyJs_maybeCallNative_137_(nativeMethod, regexp, str, arg2, forceStringMethod, this, arguments, var=var):
                    var = Scope({'nativeMethod':nativeMethod, 'regexp':regexp, 'str':str, 'arg2':arg2, 'forceStringMethod':forceStringMethod, 'this':this, 'arguments':arguments, 'maybeCallNative':PyJs_maybeCallNative_137_}, var)
                    var.registers(['regexp', 'nativeMethod', 'str', 'forceStringMethod', 'arg2'])
                    if PyJsStrictEq(var.get('regexp').get('exec'),var.get('regexpExec')):
                        if (var.get('DELEGATES_TO_SYMBOL') and var.get('forceStringMethod').neg()):
                            return Js({'done':Js(True),'value':var.get('nativeRegExpMethod').callprop('call', var.get('regexp'), var.get('str'), var.get('arg2'))})
                        return Js({'done':Js(True),'value':var.get('nativeMethod').callprop('call', var.get('str'), var.get('regexp'), var.get('arg2'))})
                    return Js({'done':Js(False)})
                PyJs_maybeCallNative_137_._set_name('maybeCallNative')
                var.put('fns', var.get('exec')(var.get('defined'), var.get('SYMBOL'), Js('').get(var.get('KEY')), PyJs_maybeCallNative_137_))
                var.put('strfn', var.get('fns').get('0'))
                var.put('rxfn', var.get('fns').get('1'))
                var.get('redefine')(var.get('String').get('prototype'), var.get('KEY'), var.get('strfn'))
                @Js
                def PyJs_anonymous_138_(string, arg, this, arguments, var=var):
                    var = Scope({'string':string, 'arg':arg, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string', 'arg'])
                    return var.get('rxfn').callprop('call', var.get('string'), var.get(u"this"), var.get('arg'))
                PyJs_anonymous_138_._set_name('anonymous')
                @Js
                def PyJs_anonymous_139_(string, this, arguments, var=var):
                    var = Scope({'string':string, 'this':this, 'arguments':arguments}, var)
                    var.registers(['string'])
                    return var.get('rxfn').callprop('call', var.get('string'), var.get(u"this"))
                PyJs_anonymous_139_._set_name('anonymous')
                var.get('hide')(var.get('RegExp').get('prototype'), var.get('SYMBOL'), (PyJs_anonymous_138_ if (var.get('length')==Js(2.0)) else PyJs_anonymous_139_))
        PyJs_anonymous_131_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_131_)
    PyJs_anonymous_126_._set_name('anonymous')
    @Js
    def PyJs_anonymous_140_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'anObject', 'exports'])
        Js('use strict')
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_anonymous_141_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'that'])
            var.put('that', var.get('anObject')(var.get(u"this")))
            var.put('result', Js(''))
            if var.get('that').get('global'):
                var.put('result', Js('g'), '+')
            if var.get('that').get('ignoreCase'):
                var.put('result', Js('i'), '+')
            if var.get('that').get('multiline'):
                var.put('result', Js('m'), '+')
            if var.get('that').get('unicode'):
                var.put('result', Js('u'), '+')
            if var.get('that').get('sticky'):
                var.put('result', Js('y'), '+')
            return var.get('result')
        PyJs_anonymous_141_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_141_)
    PyJs_anonymous_140_._set_name('anonymous')
    @Js
    def PyJs_anonymous_142_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'flattenIntoArray', 'IS_CONCAT_SPREADABLE', 'isArray', 'module', 'exports', 'ctx', 'isObject'])
        @Js
        def PyJsHoisted_flattenIntoArray_(target, original, source, sourceLen, start, depth, mapper, thisArg, this, arguments, var=var):
            var = Scope({'target':target, 'original':original, 'source':source, 'sourceLen':sourceLen, 'start':start, 'depth':depth, 'mapper':mapper, 'thisArg':thisArg, 'this':this, 'arguments':arguments}, var)
            var.registers(['mapFn', 'target', 'depth', 'sourceIndex', 'original', 'source', 'sourceLen', 'start', 'targetIndex', 'spreadable', 'mapper', 'thisArg', 'element'])
            var.put('targetIndex', var.get('start'))
            var.put('sourceIndex', Js(0.0))
            var.put('mapFn', (var.get('ctx')(var.get('mapper'), var.get('thisArg'), Js(3.0)) if var.get('mapper') else Js(False)))
            pass
            while (var.get('sourceIndex')<var.get('sourceLen')):
                if var.get('source').contains(var.get('sourceIndex')):
                    var.put('element', (var.get('mapFn')(var.get('source').get(var.get('sourceIndex')), var.get('sourceIndex'), var.get('original')) if var.get('mapFn') else var.get('source').get(var.get('sourceIndex'))))
                    var.put('spreadable', Js(False))
                    if var.get('isObject')(var.get('element')):
                        var.put('spreadable', var.get('element').get(var.get('IS_CONCAT_SPREADABLE')))
                        var.put('spreadable', (var.get('spreadable').neg().neg() if PyJsStrictNeq(var.get('spreadable'),var.get('undefined')) else var.get('isArray')(var.get('element'))))
                    if (var.get('spreadable') and (var.get('depth')>Js(0.0))):
                        var.put('targetIndex', (var.get('flattenIntoArray')(var.get('target'), var.get('original'), var.get('element'), var.get('toLength')(var.get('element').get('length')), var.get('targetIndex'), (var.get('depth')-Js(1.0)))-Js(1.0)))
                    else:
                        if (var.get('targetIndex')>=Js(9007199254740991)):
                            PyJsTempException = JsToPyException(var.get('TypeError')())
                            raise PyJsTempException
                        var.get('target').put(var.get('targetIndex'), var.get('element'))
                    (var.put('targetIndex',Js(var.get('targetIndex').to_number())+Js(1))-Js(1))
                (var.put('sourceIndex',Js(var.get('sourceIndex').to_number())+Js(1))-Js(1))
            return var.get('targetIndex')
        PyJsHoisted_flattenIntoArray_.func_name = 'flattenIntoArray'
        var.put('flattenIntoArray', PyJsHoisted_flattenIntoArray_)
        Js('use strict')
        var.put('isArray', var.get('require')(Js('./_is-array')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('IS_CONCAT_SPREADABLE', var.get('require')(Js('./_wks'))(Js('isConcatSpreadable')))
        pass
        var.get('module').put('exports', var.get('flattenIntoArray'))
    PyJs_anonymous_142_._set_name('anonymous')
    @Js
    def PyJs_anonymous_143_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'getIterFn', 'BREAK', 'toLength', 'isArrayIter', 'call', 'exports', 'module', 'ctx', 'RETURN', 'anObject'])
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('call', var.get('require')(Js('./_iter-call')))
        var.put('isArrayIter', var.get('require')(Js('./_is-array-iter')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('getIterFn', var.get('require')(Js('./core.get-iterator-method')))
        var.put('BREAK', Js({}))
        var.put('RETURN', Js({}))
        @Js
        def PyJs_anonymous_144_(iterable, entries, fn, that, ITERATOR, this, arguments, var=var):
            var = Scope({'iterable':iterable, 'entries':entries, 'fn':fn, 'that':that, 'ITERATOR':ITERATOR, 'this':this, 'arguments':arguments}, var)
            var.registers(['f', 'iterator', 'index', 'length', 'ITERATOR', 'fn', 'that', 'result', 'step', 'iterFn', 'iterable', 'entries'])
            @Js
            def PyJs_anonymous_145_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return var.get('iterable')
            PyJs_anonymous_145_._set_name('anonymous')
            var.put('iterFn', (PyJs_anonymous_145_ if var.get('ITERATOR') else var.get('getIterFn')(var.get('iterable'))))
            var.put('f', var.get('ctx')(var.get('fn'), var.get('that'), (Js(2.0) if var.get('entries') else Js(1.0))))
            var.put('index', Js(0.0))
            pass
            if (var.get('iterFn',throw=False).typeof()!=Js('function')):
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('iterable')+Js(' is not iterable!'))))
                raise PyJsTempException
            if var.get('isArrayIter')(var.get('iterFn')):
                #for JS loop
                var.put('length', var.get('toLength')(var.get('iterable').get('length')))
                while (var.get('length')>var.get('index')):
                    try:
                        var.put('result', (var.get('f')(var.get('anObject')(var.put('step', var.get('iterable').get(var.get('index')))).get('0'), var.get('step').get('1')) if var.get('entries') else var.get('f')(var.get('iterable').get(var.get('index')))))
                        if (PyJsStrictEq(var.get('result'),var.get('BREAK')) or PyJsStrictEq(var.get('result'),var.get('RETURN'))):
                            return var.get('result')
                    finally:
                            (var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1))
            else:
                #for JS loop
                var.put('iterator', var.get('iterFn').callprop('call', var.get('iterable')))
                while var.put('step', var.get('iterator').callprop('next')).get('done').neg():
                    var.put('result', var.get('call')(var.get('iterator'), var.get('f'), var.get('step').get('value'), var.get('entries')))
                    if (PyJsStrictEq(var.get('result'),var.get('BREAK')) or PyJsStrictEq(var.get('result'),var.get('RETURN'))):
                        return var.get('result')
                
        PyJs_anonymous_144_._set_name('anonymous')
        var.put('exports', var.get('module').put('exports', PyJs_anonymous_144_))
        var.get('exports').put('BREAK', var.get('BREAK'))
        var.get('exports').put('RETURN', var.get('RETURN'))
    PyJs_anonymous_143_._set_name('anonymous')
    @Js
    def PyJs_anonymous_146_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('module').put('exports', var.get('require')(Js('./_shared'))(Js('native-function-to-string'), var.get('Function').get('toString')))
    PyJs_anonymous_146_._set_name('anonymous')
    @Js
    def PyJs_anonymous_147_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'global', 'module', 'exports'])
        var.put('global', var.get('module').put('exports', (var.get('window') if ((var.get('window',throw=False).typeof()!=Js('undefined')) and (var.get('window').get('Math')==var.get('Math'))) else (var.get('self') if ((var.get('self',throw=False).typeof()!=Js('undefined')) and (var.get('self').get('Math')==var.get('Math'))) else var.get('Function')(Js('return this'))()))))
        if (var.get('__g',throw=False).typeof()==Js('number')):
            var.put('__g', var.get('global'))
    PyJs_anonymous_147_._set_name('anonymous')
    @Js
    def PyJs_anonymous_148_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['hasOwnProperty', 'require', 'module', 'exports'])
        var.put('hasOwnProperty', Js({}).get('hasOwnProperty'))
        @Js
        def PyJs_anonymous_149_(it, key, this, arguments, var=var):
            var = Scope({'it':it, 'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'key'])
            return var.get('hasOwnProperty').callprop('call', var.get('it'), var.get('key'))
        PyJs_anonymous_149_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_149_)
    PyJs_anonymous_148_._set_name('anonymous')
    @Js
    def PyJs_anonymous_150_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'module', 'createDesc', 'dP'])
        var.put('dP', var.get('require')(Js('./_object-dp')))
        var.put('createDesc', var.get('require')(Js('./_property-desc')))
        @Js
        def PyJs_anonymous_151_(object, key, value, this, arguments, var=var):
            var = Scope({'object':object, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value', 'object', 'key'])
            return var.get('dP').callprop('f', var.get('object'), var.get('key'), var.get('createDesc')(Js(1.0), var.get('value')))
        PyJs_anonymous_151_._set_name('anonymous')
        @Js
        def PyJs_anonymous_152_(object, key, value, this, arguments, var=var):
            var = Scope({'object':object, 'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value', 'object', 'key'])
            var.get('object').put(var.get('key'), var.get('value'))
            return var.get('object')
        PyJs_anonymous_152_._set_name('anonymous')
        var.get('module').put('exports', (PyJs_anonymous_151_ if var.get('require')(Js('./_descriptors')) else PyJs_anonymous_152_))
    PyJs_anonymous_150_._set_name('anonymous')
    @Js
    def PyJs_anonymous_153_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['document', 'module', 'require', 'exports'])
        var.put('document', var.get('require')(Js('./_global')).get('document'))
        var.get('module').put('exports', (var.get('document') and var.get('document').get('documentElement')))
    PyJs_anonymous_153_._set_name('anonymous')
    @Js
    def PyJs_anonymous_154_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_155_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            @Js
            def PyJs_get_156_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_156_}, var)
                var.registers([])
                return Js(7.0)
            PyJs_get_156_._set_name('get')
            return (var.get('Object').callprop('defineProperty', var.get('require')(Js('./_dom-create'))(Js('div')), Js('a'), Js({'get':PyJs_get_156_})).get('a')!=Js(7.0))
        PyJs_anonymous_155_._set_name('anonymous')
        var.get('module').put('exports', (var.get('require')(Js('./_descriptors')).neg() and var.get('require')(Js('./_fails'))(PyJs_anonymous_155_).neg()))
    PyJs_anonymous_154_._set_name('anonymous')
    @Js
    def PyJs_anonymous_157_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'setPrototypeOf', 'module', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('setPrototypeOf', var.get('require')(Js('./_set-proto')).get('set'))
        @Js
        def PyJs_anonymous_158_(that, target, C, this, arguments, var=var):
            var = Scope({'that':that, 'target':target, 'C':C, 'this':this, 'arguments':arguments}, var)
            var.registers(['target', 'C', 'that', 'S', 'P'])
            var.put('S', var.get('target').get('constructor'))
            pass
            if ((((PyJsStrictNeq(var.get('S'),var.get('C')) and (var.get('S',throw=False).typeof()==Js('function'))) and PyJsStrictNeq(var.put('P', var.get('S').get('prototype')),var.get('C').get('prototype'))) and var.get('isObject')(var.get('P'))) and var.get('setPrototypeOf')):
                var.get('setPrototypeOf')(var.get('that'), var.get('P'))
            return var.get('that')
        PyJs_anonymous_158_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_158_)
    PyJs_anonymous_157_._set_name('anonymous')
    @Js
    def PyJs_anonymous_159_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_160_(fn, args, that, this, arguments, var=var):
            var = Scope({'fn':fn, 'args':args, 'that':that, 'this':this, 'arguments':arguments}, var)
            var.registers(['fn', 'that', 'args', 'un'])
            var.put('un', PyJsStrictEq(var.get('that'),var.get('undefined')))
            while 1:
                SWITCHED = False
                CONDITION = (var.get('args').get('length'))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(0.0)):
                    SWITCHED = True
                    return (var.get('fn')() if var.get('un') else var.get('fn').callprop('call', var.get('that')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(1.0)):
                    SWITCHED = True
                    return (var.get('fn')(var.get('args').get('0')) if var.get('un') else var.get('fn').callprop('call', var.get('that'), var.get('args').get('0')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(2.0)):
                    SWITCHED = True
                    return (var.get('fn')(var.get('args').get('0'), var.get('args').get('1')) if var.get('un') else var.get('fn').callprop('call', var.get('that'), var.get('args').get('0'), var.get('args').get('1')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(3.0)):
                    SWITCHED = True
                    return (var.get('fn')(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2')) if var.get('un') else var.get('fn').callprop('call', var.get('that'), var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2')))
                if SWITCHED or PyJsStrictEq(CONDITION, Js(4.0)):
                    SWITCHED = True
                    return (var.get('fn')(var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3')) if var.get('un') else var.get('fn').callprop('call', var.get('that'), var.get('args').get('0'), var.get('args').get('1'), var.get('args').get('2'), var.get('args').get('3')))
                SWITCHED = True
                break
            return var.get('fn').callprop('apply', var.get('that'), var.get('args'))
        PyJs_anonymous_160_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_160_)
    PyJs_anonymous_159_._set_name('anonymous')
    @Js
    def PyJs_anonymous_161_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['cof', 'module', 'require', 'exports'])
        var.put('cof', var.get('require')(Js('./_cof')))
        @Js
        def PyJs_anonymous_162_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (var.get('it').callprop('split', Js('')) if (var.get('cof')(var.get('it'))==Js('String')) else var.get('Object')(var.get('it')))
        PyJs_anonymous_162_._set_name('anonymous')
        var.get('module').put('exports', (var.get('Object') if var.get('Object')(Js('z')).callprop('propertyIsEnumerable', Js(0.0)) else PyJs_anonymous_162_))
    PyJs_anonymous_161_._set_name('anonymous')
    @Js
    def PyJs_anonymous_163_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'ArrayProto', 'ITERATOR', 'exports', 'module', 'Iterators'])
        var.put('Iterators', var.get('require')(Js('./_iterators')))
        var.put('ITERATOR', var.get('require')(Js('./_wks'))(Js('iterator')))
        var.put('ArrayProto', var.get('Array').get('prototype'))
        @Js
        def PyJs_anonymous_164_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (PyJsStrictNeq(var.get('it'),var.get('undefined')) and (PyJsStrictEq(var.get('Iterators').get('Array'),var.get('it')) or PyJsStrictEq(var.get('ArrayProto').get(var.get('ITERATOR')),var.get('it'))))
        PyJs_anonymous_164_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_164_)
    PyJs_anonymous_163_._set_name('anonymous')
    @Js
    def PyJs_anonymous_165_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['cof', 'module', 'require', 'exports'])
        var.put('cof', var.get('require')(Js('./_cof')))
        @Js
        def PyJs_isArray_166_(arg, this, arguments, var=var):
            var = Scope({'arg':arg, 'this':this, 'arguments':arguments, 'isArray':PyJs_isArray_166_}, var)
            var.registers(['arg'])
            return (var.get('cof')(var.get('arg'))==Js('Array'))
        PyJs_isArray_166_._set_name('isArray')
        var.get('module').put('exports', (var.get('Array').get('isArray') or PyJs_isArray_166_))
    PyJs_anonymous_165_._set_name('anonymous')
    @Js
    def PyJs_anonymous_167_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'floor', 'exports', 'module', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('floor', var.get('Math').get('floor'))
        @Js
        def PyJs_isInteger_168_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'isInteger':PyJs_isInteger_168_}, var)
            var.registers(['it'])
            return ((var.get('isObject')(var.get('it')).neg() and var.get('isFinite')(var.get('it'))) and PyJsStrictEq(var.get('floor')(var.get('it')),var.get('it')))
        PyJs_isInteger_168_._set_name('isInteger')
        var.get('module').put('exports', PyJs_isInteger_168_)
    PyJs_anonymous_167_._set_name('anonymous')
    @Js
    def PyJs_anonymous_169_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_170_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (PyJsStrictNeq(var.get('it'),var.get(u"null")) if PyJsStrictEq((Js('undefined') if PyJsStrictEq(var.get('it',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('it'))),Js('object')) else PyJsStrictEq(var.get('it',throw=False).typeof(),Js('function')))
        PyJs_anonymous_170_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_170_)
    PyJs_anonymous_169_._set_name('anonymous')
    @Js
    def PyJs_anonymous_171_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'MATCH', 'exports', 'cof', 'module', 'isObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('cof', var.get('require')(Js('./_cof')))
        var.put('MATCH', var.get('require')(Js('./_wks'))(Js('match')))
        @Js
        def PyJs_anonymous_172_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'isRegExp'])
            pass
            return (var.get('isObject')(var.get('it')) and (var.get('isRegExp').neg().neg() if PyJsStrictNeq(var.put('isRegExp', var.get('it').get(var.get('MATCH'))),var.get('undefined')) else (var.get('cof')(var.get('it'))==Js('RegExp'))))
        PyJs_anonymous_172_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_172_)
    PyJs_anonymous_171_._set_name('anonymous')
    @Js
    def PyJs_anonymous_173_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'anObject', 'exports'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_anonymous_174_(iterator, fn, value, entries, this, arguments, var=var):
            var = Scope({'iterator':iterator, 'fn':fn, 'value':value, 'entries':entries, 'this':this, 'arguments':arguments}, var)
            var.registers(['iterator', 'fn', 'value', 'ret', 'entries'])
            try:
                return (var.get('fn')(var.get('anObject')(var.get('value')).get('0'), var.get('value').get('1')) if var.get('entries') else var.get('fn')(var.get('value')))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_72948994 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('ret', var.get('iterator').get('return'))
                    if PyJsStrictNeq(var.get('ret'),var.get('undefined')):
                        var.get('anObject')(var.get('ret').callprop('call', var.get('iterator')))
                    PyJsTempException = JsToPyException(var.get('e'))
                    raise PyJsTempException
                finally:
                    if PyJsHolder_65_72948994 is not None:
                        var.own['e'] = PyJsHolder_65_72948994
                    else:
                        del var.own['e']
                    del PyJsHolder_65_72948994
        PyJs_anonymous_174_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_174_)
    PyJs_anonymous_173_._set_name('anonymous')
    @Js
    def PyJs_anonymous_175_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'setToStringTag', 'IteratorPrototype', 'exports', 'module', 'create', 'descriptor'])
        Js('use strict')
        var.put('create', var.get('require')(Js('./_object-create')))
        var.put('descriptor', var.get('require')(Js('./_property-desc')))
        var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
        var.put('IteratorPrototype', Js({}))
        @Js
        def PyJs_anonymous_176_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get(u"this")
        PyJs_anonymous_176_._set_name('anonymous')
        var.get('require')(Js('./_hide'))(var.get('IteratorPrototype'), var.get('require')(Js('./_wks'))(Js('iterator')), PyJs_anonymous_176_)
        @Js
        def PyJs_anonymous_177_(Constructor, NAME, next, this, arguments, var=var):
            var = Scope({'Constructor':Constructor, 'NAME':NAME, 'next':next, 'this':this, 'arguments':arguments}, var)
            var.registers(['NAME', 'Constructor', 'next'])
            var.get('Constructor').put('prototype', var.get('create')(var.get('IteratorPrototype'), Js({'next':var.get('descriptor')(Js(1.0), var.get('next'))})))
            var.get('setToStringTag')(var.get('Constructor'), (var.get('NAME')+Js(' Iterator')))
        PyJs_anonymous_177_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_177_)
    PyJs_anonymous_175_._set_name('anonymous')
    @Js
    def PyJs_anonymous_178_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'setToStringTag', 'hide', 'ITERATOR', '$iterCreate', 'redefine', 'LIBRARY', '$export', 'exports', 'module', 'FF_ITERATOR', 'returnThis', 'getPrototypeOf', 'KEYS', 'Iterators', 'BUGGY', 'VALUES'])
        Js('use strict')
        var.put('LIBRARY', var.get('require')(Js('./_library')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('redefine', var.get('require')(Js('./_redefine')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('Iterators', var.get('require')(Js('./_iterators')))
        var.put('$iterCreate', var.get('require')(Js('./_iter-create')))
        var.put('setToStringTag', var.get('require')(Js('./_set-to-string-tag')))
        var.put('getPrototypeOf', var.get('require')(Js('./_object-gpo')))
        var.put('ITERATOR', var.get('require')(Js('./_wks'))(Js('iterator')))
        var.put('BUGGY', (Js([]).get('keys') and Js([]).callprop('keys').contains(Js('next'))).neg())
        var.put('FF_ITERATOR', Js('@@iterator'))
        var.put('KEYS', Js('keys'))
        var.put('VALUES', Js('values'))
        @Js
        def PyJs_returnThis_179_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'returnThis':PyJs_returnThis_179_}, var)
            var.registers([])
            return var.get(u"this")
        PyJs_returnThis_179_._set_name('returnThis')
        var.put('returnThis', PyJs_returnThis_179_)
        @Js
        def PyJs_anonymous_180_(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED, this, arguments, var=var):
            var = Scope({'Base':Base, 'NAME':NAME, 'Constructor':Constructor, 'next':next, 'DEFAULT':DEFAULT, 'IS_SET':IS_SET, 'FORCED':FORCED, 'this':this, 'arguments':arguments}, var)
            var.registers(['proto', 'methods', 'TAG', 'Base', 'DEFAULT', 'IS_SET', 'key', '$anyNative', 'getMethod', 'FORCED', '$default', 'IteratorPrototype', 'next', 'Constructor', 'NAME', '$native', '$entries', 'DEF_VALUES', 'VALUES_BUG'])
            var.get('$iterCreate')(var.get('Constructor'), var.get('NAME'), var.get('next'))
            @Js
            def PyJs_getMethod_181_(kind, this, arguments, var=var):
                var = Scope({'kind':kind, 'this':this, 'arguments':arguments, 'getMethod':PyJs_getMethod_181_}, var)
                var.registers(['kind'])
                if (var.get('BUGGY').neg() and var.get('proto').contains(var.get('kind'))):
                    return var.get('proto').get(var.get('kind'))
                while 1:
                    SWITCHED = False
                    CONDITION = (var.get('kind'))
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('KEYS')):
                        SWITCHED = True
                        @Js
                        def PyJs_keys_182_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'keys':PyJs_keys_182_}, var)
                            var.registers([])
                            return var.get('Constructor').create(var.get(u"this"), var.get('kind'))
                        PyJs_keys_182_._set_name('keys')
                        return PyJs_keys_182_
                    if SWITCHED or PyJsStrictEq(CONDITION, var.get('VALUES')):
                        SWITCHED = True
                        @Js
                        def PyJs_values_183_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'values':PyJs_values_183_}, var)
                            var.registers([])
                            return var.get('Constructor').create(var.get(u"this"), var.get('kind'))
                        PyJs_values_183_._set_name('values')
                        return PyJs_values_183_
                    SWITCHED = True
                    break
                @Js
                def PyJs_entries_184_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'entries':PyJs_entries_184_}, var)
                    var.registers([])
                    return var.get('Constructor').create(var.get(u"this"), var.get('kind'))
                PyJs_entries_184_._set_name('entries')
                return PyJs_entries_184_
            PyJs_getMethod_181_._set_name('getMethod')
            var.put('getMethod', PyJs_getMethod_181_)
            var.put('TAG', (var.get('NAME')+Js(' Iterator')))
            var.put('DEF_VALUES', (var.get('DEFAULT')==var.get('VALUES')))
            var.put('VALUES_BUG', Js(False))
            var.put('proto', var.get('Base').get('prototype'))
            var.put('$native', ((var.get('proto').get(var.get('ITERATOR')) or var.get('proto').get(var.get('FF_ITERATOR'))) or (var.get('DEFAULT') and var.get('proto').get(var.get('DEFAULT')))))
            var.put('$default', (var.get('$native') or var.get('getMethod')(var.get('DEFAULT'))))
            var.put('$entries', ((var.get('$default') if var.get('DEF_VALUES').neg() else var.get('getMethod')(Js('entries'))) if var.get('DEFAULT') else var.get('undefined')))
            var.put('$anyNative', ((var.get('proto').get('entries') or var.get('$native')) if (var.get('NAME')==Js('Array')) else var.get('$native')))
            pass
            if var.get('$anyNative'):
                var.put('IteratorPrototype', var.get('getPrototypeOf')(var.get('$anyNative').callprop('call', var.get('Base').create())))
                if (PyJsStrictNeq(var.get('IteratorPrototype'),var.get('Object').get('prototype')) and var.get('IteratorPrototype').get('next')):
                    var.get('setToStringTag')(var.get('IteratorPrototype'), var.get('TAG'), Js(True))
                    if (var.get('LIBRARY').neg() and (var.get('IteratorPrototype').get(var.get('ITERATOR')).typeof()!=Js('function'))):
                        var.get('hide')(var.get('IteratorPrototype'), var.get('ITERATOR'), var.get('returnThis'))
            if ((var.get('DEF_VALUES') and var.get('$native')) and PyJsStrictNeq(var.get('$native').get('name'),var.get('VALUES'))):
                var.put('VALUES_BUG', Js(True))
                @Js
                def PyJs_values_185_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'values':PyJs_values_185_}, var)
                    var.registers([])
                    return var.get('$native').callprop('call', var.get(u"this"))
                PyJs_values_185_._set_name('values')
                var.put('$default', PyJs_values_185_)
            if ((var.get('LIBRARY').neg() or var.get('FORCED')) and ((var.get('BUGGY') or var.get('VALUES_BUG')) or var.get('proto').get(var.get('ITERATOR')).neg())):
                var.get('hide')(var.get('proto'), var.get('ITERATOR'), var.get('$default'))
            var.get('Iterators').put(var.get('NAME'), var.get('$default'))
            var.get('Iterators').put(var.get('TAG'), var.get('returnThis'))
            if var.get('DEFAULT'):
                var.put('methods', Js({'values':(var.get('$default') if var.get('DEF_VALUES') else var.get('getMethod')(var.get('VALUES'))),'keys':(var.get('$default') if var.get('IS_SET') else var.get('getMethod')(var.get('KEYS'))),'entries':var.get('$entries')}))
                if var.get('FORCED'):
                    for PyJsTemp in var.get('methods'):
                        var.put('key', PyJsTemp)
                        if var.get('proto').contains(var.get('key')).neg():
                            var.get('redefine')(var.get('proto'), var.get('key'), var.get('methods').get(var.get('key')))
                else:
                    var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*(var.get('BUGGY') or var.get('VALUES_BUG')))), var.get('NAME'), var.get('methods'))
            return var.get('methods')
        PyJs_anonymous_180_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_180_)
    PyJs_anonymous_178_._set_name('anonymous')
    @Js
    def PyJs_anonymous_186_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'riter', 'ITERATOR', 'exports', 'module', 'SAFE_CLOSING'])
        var.put('ITERATOR', var.get('require')(Js('./_wks'))(Js('iterator')))
        var.put('SAFE_CLOSING', Js(False))
        try:
            var.put('riter', Js([Js(7.0)]).callprop(var.get('ITERATOR')))
            @Js
            def PyJs_anonymous_187_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.put('SAFE_CLOSING', Js(True))
            PyJs_anonymous_187_._set_name('anonymous')
            var.get('riter').put('return', PyJs_anonymous_187_)
            @Js
            def PyJs_anonymous_188_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                PyJsTempException = JsToPyException(Js(2.0))
                raise PyJsTempException
            PyJs_anonymous_188_._set_name('anonymous')
            var.get('Array').callprop('from', var.get('riter'), PyJs_anonymous_188_)
        except PyJsException as PyJsTempException:
            PyJsHolder_65_84662025 = var.own.get('e')
            var.force_own_put('e', PyExceptionToJs(PyJsTempException))
            try:
                pass
            finally:
                if PyJsHolder_65_84662025 is not None:
                    var.own['e'] = PyJsHolder_65_84662025
                else:
                    del var.own['e']
                del PyJsHolder_65_84662025
        @Js
        def PyJs_anonymous_189_(exec, skipClosing, this, arguments, var=var):
            var = Scope({'exec':exec, 'skipClosing':skipClosing, 'this':this, 'arguments':arguments}, var)
            var.registers(['iter', 'safe', 'arr', 'exec', 'skipClosing'])
            if (var.get('skipClosing').neg() and var.get('SAFE_CLOSING').neg()):
                return Js(False)
            var.put('safe', Js(False))
            try:
                var.put('arr', Js([Js(7.0)]))
                var.put('iter', var.get('arr').callprop(var.get('ITERATOR')))
                @Js
                def PyJs_anonymous_190_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return Js({'done':var.put('safe', Js(True))})
                PyJs_anonymous_190_._set_name('anonymous')
                var.get('iter').put('next', PyJs_anonymous_190_)
                @Js
                def PyJs_anonymous_191_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    return var.get('iter')
                PyJs_anonymous_191_._set_name('anonymous')
                var.get('arr').put(var.get('ITERATOR'), PyJs_anonymous_191_)
                var.get('exec')(var.get('arr'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_98625816 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    pass
                finally:
                    if PyJsHolder_65_98625816 is not None:
                        var.own['e'] = PyJsHolder_65_98625816
                    else:
                        del var.own['e']
                    del PyJsHolder_65_98625816
            return var.get('safe')
        PyJs_anonymous_189_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_189_)
    PyJs_anonymous_186_._set_name('anonymous')
    @Js
    def PyJs_anonymous_192_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_193_(done, value, this, arguments, var=var):
            var = Scope({'done':done, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value', 'done'])
            return Js({'value':var.get('value'),'done':var.get('done').neg().neg()})
        PyJs_anonymous_193_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_193_)
    PyJs_anonymous_192_._set_name('anonymous')
    @Js
    def PyJs_anonymous_194_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('module').put('exports', Js({}))
    PyJs_anonymous_194_._set_name('anonymous')
    @Js
    def PyJs_anonymous_195_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('module').put('exports', Js(False))
    PyJs_anonymous_195_._set_name('anonymous')
    @Js
    def PyJs_anonymous_196_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$expm1', 'exports'])
        var.put('$expm1', var.get('Math').get('expm1'))
        @Js
        def PyJs_expm1_197_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'expm1':PyJs_expm1_197_}, var)
            var.registers(['x'])
            return (var.get('x') if (var.put('x', (+var.get('x')))==Js(0.0)) else ((var.get('x')+((var.get('x')*var.get('x'))/Js(2.0))) if ((var.get('x')>(-Js(1e-06))) and (var.get('x')<Js(1e-06))) else (var.get('Math').callprop('exp', var.get('x'))-Js(1.0))))
        PyJs_expm1_197_._set_name('expm1')
        var.get('module').put('exports', (PyJs_expm1_197_ if (((var.get('$expm1').neg() or (var.get('$expm1')(Js(10.0))>Js(22025.465794806718))) or (var.get('$expm1')(Js(10.0))<Js(22025.465794806718))) or (var.get('$expm1')((-Js(2e-17)))!=(-Js(2e-17)))) else var.get('$expm1')))
    PyJs_anonymous_196_._set_name('anonymous')
    @Js
    def PyJs_anonymous_198_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'MIN32', 'EPSILON', 'roundTiesToEven', 'exports', 'module', 'sign', 'pow', 'MAX32', 'EPSILON32'])
        var.put('sign', var.get('require')(Js('./_math-sign')))
        var.put('pow', var.get('Math').get('pow'))
        var.put('EPSILON', var.get('pow')(Js(2.0), (-Js(52.0))))
        var.put('EPSILON32', var.get('pow')(Js(2.0), (-Js(23.0))))
        var.put('MAX32', (var.get('pow')(Js(2.0), Js(127.0))*(Js(2.0)-var.get('EPSILON32'))))
        var.put('MIN32', var.get('pow')(Js(2.0), (-Js(126.0))))
        @Js
        def PyJs_roundTiesToEven_199_(n, this, arguments, var=var):
            var = Scope({'n':n, 'this':this, 'arguments':arguments, 'roundTiesToEven':PyJs_roundTiesToEven_199_}, var)
            var.registers(['n'])
            return ((var.get('n')+(Js(1.0)/var.get('EPSILON')))-(Js(1.0)/var.get('EPSILON')))
        PyJs_roundTiesToEven_199_._set_name('roundTiesToEven')
        var.put('roundTiesToEven', PyJs_roundTiesToEven_199_)
        @Js
        def PyJs_fround_200_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'fround':PyJs_fround_200_}, var)
            var.registers(['$sign', 'x', '$abs', 'result', 'a'])
            var.put('$abs', var.get('Math').callprop('abs', var.get('x')))
            var.put('$sign', var.get('sign')(var.get('x')))
            pass
            if (var.get('$abs')<var.get('MIN32')):
                return (((var.get('$sign')*var.get('roundTiesToEven')(((var.get('$abs')/var.get('MIN32'))/var.get('EPSILON32'))))*var.get('MIN32'))*var.get('EPSILON32'))
            var.put('a', ((Js(1.0)+(var.get('EPSILON32')/var.get('EPSILON')))*var.get('$abs')))
            var.put('result', (var.get('a')-(var.get('a')-var.get('$abs'))))
            if ((var.get('result')>var.get('MAX32')) or (var.get('result')!=var.get('result'))):
                return (var.get('$sign')*var.get('Infinity'))
            return (var.get('$sign')*var.get('result'))
        PyJs_fround_200_._set_name('fround')
        var.get('module').put('exports', (var.get('Math').get('fround') or PyJs_fround_200_))
    PyJs_anonymous_198_._set_name('anonymous')
    @Js
    def PyJs_anonymous_201_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_log1p_202_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'log1p':PyJs_log1p_202_}, var)
            var.registers(['x'])
            return ((var.get('x')-((var.get('x')*var.get('x'))/Js(2.0))) if ((var.put('x', (+var.get('x')))>(-Js(1e-08))) and (var.get('x')<Js(1e-08))) else var.get('Math').callprop('log', (Js(1.0)+var.get('x'))))
        PyJs_log1p_202_._set_name('log1p')
        var.get('module').put('exports', (var.get('Math').get('log1p') or PyJs_log1p_202_))
    PyJs_anonymous_201_._set_name('anonymous')
    @Js
    def PyJs_anonymous_203_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_scale_204_(x, inLow, inHigh, outLow, outHigh, this, arguments, var=var):
            var = Scope({'x':x, 'inLow':inLow, 'inHigh':inHigh, 'outLow':outLow, 'outHigh':outHigh, 'this':this, 'arguments':arguments, 'scale':PyJs_scale_204_}, var)
            var.registers(['outLow', 'x', 'inLow', 'inHigh', 'outHigh'])
            if (((((PyJsStrictEq(var.get('arguments').get('length'),Js(0.0)) or (var.get('x')!=var.get('x'))) or (var.get('inLow')!=var.get('inLow'))) or (var.get('inHigh')!=var.get('inHigh'))) or (var.get('outLow')!=var.get('outLow'))) or (var.get('outHigh')!=var.get('outHigh'))):
                return var.get('NaN')
            if (PyJsStrictEq(var.get('x'),var.get('Infinity')) or PyJsStrictEq(var.get('x'),(-var.get('Infinity')))):
                return var.get('x')
            return ((((var.get('x')-var.get('inLow'))*(var.get('outHigh')-var.get('outLow')))/(var.get('inHigh')-var.get('inLow')))+var.get('outLow'))
        PyJs_scale_204_._set_name('scale')
        var.get('module').put('exports', (var.get('Math').get('scale') or PyJs_scale_204_))
    PyJs_anonymous_203_._set_name('anonymous')
    @Js
    def PyJs_anonymous_205_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_sign_206_(x, this, arguments, var=var):
            var = Scope({'x':x, 'this':this, 'arguments':arguments, 'sign':PyJs_sign_206_}, var)
            var.registers(['x'])
            return (var.get('x') if ((var.put('x', (+var.get('x')))==Js(0.0)) or (var.get('x')!=var.get('x'))) else ((-Js(1.0)) if (var.get('x')<Js(0.0)) else Js(1.0)))
        PyJs_sign_206_._set_name('sign')
        var.get('module').put('exports', (var.get('Math').get('sign') or PyJs_sign_206_))
    PyJs_anonymous_205_._set_name('anonymous')
    @Js
    def PyJs_anonymous_207_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['getWeak', 'require', 'onFreeze', 'fastKey', 'META', 'setDesc', 'isExtensible', 'meta', 'FREEZE', 'exports', 'module', 'id', 'setMeta', 'isObject', 'has'])
        var.put('META', var.get('require')(Js('./_uid'))(Js('meta')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('setDesc', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('id', Js(0.0))
        @Js
        def PyJs_anonymous_208_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return Js(True)
        PyJs_anonymous_208_._set_name('anonymous')
        var.put('isExtensible', (var.get('Object').get('isExtensible') or PyJs_anonymous_208_))
        @Js
        def PyJs_anonymous_209_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers([])
            return var.get('isExtensible')(var.get('Object').callprop('preventExtensions', Js({})))
        PyJs_anonymous_209_._set_name('anonymous')
        var.put('FREEZE', var.get('require')(Js('./_fails'))(PyJs_anonymous_209_).neg())
        @Js
        def PyJs_setMeta_210_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'setMeta':PyJs_setMeta_210_}, var)
            var.registers(['it'])
            var.get('setDesc')(var.get('it'), var.get('META'), Js({'value':Js({'i':(Js('O')+var.put('id',Js(var.get('id').to_number())+Js(1))),'w':Js({})})}))
        PyJs_setMeta_210_._set_name('setMeta')
        var.put('setMeta', PyJs_setMeta_210_)
        @Js
        def PyJs_fastKey_211_(it, create, this, arguments, var=var):
            var = Scope({'it':it, 'create':create, 'this':this, 'arguments':arguments, 'fastKey':PyJs_fastKey_211_}, var)
            var.registers(['it', 'create'])
            if var.get('isObject')(var.get('it')).neg():
                return (var.get('it') if ((Js('undefined') if PyJsStrictEq(var.get('it',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('it')))==Js('symbol')) else ((Js('S') if (var.get('it',throw=False).typeof()==Js('string')) else Js('P'))+var.get('it')))
            if var.get('has')(var.get('it'), var.get('META')).neg():
                if var.get('isExtensible')(var.get('it')).neg():
                    return Js('F')
                if var.get('create').neg():
                    return Js('E')
                var.get('setMeta')(var.get('it'))
            return var.get('it').get(var.get('META')).get('i')
        PyJs_fastKey_211_._set_name('fastKey')
        var.put('fastKey', PyJs_fastKey_211_)
        @Js
        def PyJs_getWeak_212_(it, create, this, arguments, var=var):
            var = Scope({'it':it, 'create':create, 'this':this, 'arguments':arguments, 'getWeak':PyJs_getWeak_212_}, var)
            var.registers(['it', 'create'])
            if var.get('has')(var.get('it'), var.get('META')).neg():
                if var.get('isExtensible')(var.get('it')).neg():
                    return Js(True)
                if var.get('create').neg():
                    return Js(False)
                var.get('setMeta')(var.get('it'))
            return var.get('it').get(var.get('META')).get('w')
        PyJs_getWeak_212_._set_name('getWeak')
        var.put('getWeak', PyJs_getWeak_212_)
        @Js
        def PyJs_onFreeze_213_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'onFreeze':PyJs_onFreeze_213_}, var)
            var.registers(['it'])
            if (((var.get('FREEZE') and var.get('meta').get('NEED')) and var.get('isExtensible')(var.get('it'))) and var.get('has')(var.get('it'), var.get('META')).neg()):
                var.get('setMeta')(var.get('it'))
            return var.get('it')
        PyJs_onFreeze_213_._set_name('onFreeze')
        var.put('onFreeze', PyJs_onFreeze_213_)
        var.put('meta', var.get('module').put('exports', Js({'KEY':var.get('META'),'NEED':Js(False),'fastKey':var.get('fastKey'),'getWeak':var.get('getWeak'),'onFreeze':var.get('onFreeze')})))
    PyJs_anonymous_207_._set_name('anonymous')
    @Js
    def PyJs_anonymous_214_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'ordinaryGetOwnMetadata', 'ordinaryDefineOwnMetadata', '$export', 'exports', 'shared', 'getOrCreateMetadataMap', 'store', 'toMetaKey', 'module', 'ordinaryOwnMetadataKeys', 'Map', 'exp', 'ordinaryHasOwnMetadata'])
        var.put('Map', var.get('require')(Js('./es6.map')))
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('shared', var.get('require')(Js('./_shared'))(Js('metadata')))
        var.put('store', (var.get('shared').get('store') or var.get('shared').put('store', var.get('require')(Js('./es6.weak-map')).create())))
        @Js
        def PyJs_getOrCreateMetadataMap_215_(target, targetKey, create, this, arguments, var=var):
            var = Scope({'target':target, 'targetKey':targetKey, 'create':create, 'this':this, 'arguments':arguments, 'getOrCreateMetadataMap':PyJs_getOrCreateMetadataMap_215_}, var)
            var.registers(['target', 'keyMetadata', 'targetMetadata', 'targetKey', 'create'])
            var.put('targetMetadata', var.get('store').callprop('get', var.get('target')))
            if var.get('targetMetadata').neg():
                if var.get('create').neg():
                    return var.get('undefined')
                var.get('store').callprop('set', var.get('target'), var.put('targetMetadata', var.get('Map').create()))
            var.put('keyMetadata', var.get('targetMetadata').callprop('get', var.get('targetKey')))
            if var.get('keyMetadata').neg():
                if var.get('create').neg():
                    return var.get('undefined')
                var.get('targetMetadata').callprop('set', var.get('targetKey'), var.put('keyMetadata', var.get('Map').create()))
            return var.get('keyMetadata')
        PyJs_getOrCreateMetadataMap_215_._set_name('getOrCreateMetadataMap')
        var.put('getOrCreateMetadataMap', PyJs_getOrCreateMetadataMap_215_)
        @Js
        def PyJs_ordinaryHasOwnMetadata_216_(MetadataKey, O, P, this, arguments, var=var):
            var = Scope({'MetadataKey':MetadataKey, 'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryHasOwnMetadata':PyJs_ordinaryHasOwnMetadata_216_}, var)
            var.registers(['metadataMap', 'O', 'P', 'MetadataKey'])
            var.put('metadataMap', var.get('getOrCreateMetadataMap')(var.get('O'), var.get('P'), Js(False)))
            return (Js(False) if PyJsStrictEq(var.get('metadataMap'),var.get('undefined')) else var.get('metadataMap').callprop('has', var.get('MetadataKey')))
        PyJs_ordinaryHasOwnMetadata_216_._set_name('ordinaryHasOwnMetadata')
        var.put('ordinaryHasOwnMetadata', PyJs_ordinaryHasOwnMetadata_216_)
        @Js
        def PyJs_ordinaryGetOwnMetadata_217_(MetadataKey, O, P, this, arguments, var=var):
            var = Scope({'MetadataKey':MetadataKey, 'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryGetOwnMetadata':PyJs_ordinaryGetOwnMetadata_217_}, var)
            var.registers(['metadataMap', 'O', 'P', 'MetadataKey'])
            var.put('metadataMap', var.get('getOrCreateMetadataMap')(var.get('O'), var.get('P'), Js(False)))
            return (var.get('undefined') if PyJsStrictEq(var.get('metadataMap'),var.get('undefined')) else var.get('metadataMap').callprop('get', var.get('MetadataKey')))
        PyJs_ordinaryGetOwnMetadata_217_._set_name('ordinaryGetOwnMetadata')
        var.put('ordinaryGetOwnMetadata', PyJs_ordinaryGetOwnMetadata_217_)
        @Js
        def PyJs_ordinaryDefineOwnMetadata_218_(MetadataKey, MetadataValue, O, P, this, arguments, var=var):
            var = Scope({'MetadataKey':MetadataKey, 'MetadataValue':MetadataValue, 'O':O, 'P':P, 'this':this, 'arguments':arguments, 'ordinaryDefineOwnMetadata':PyJs_ordinaryDefineOwnMetadata_218_}, var)
            var.registers(['O', 'MetadataValue', 'P', 'MetadataKey'])
            var.get('getOrCreateMetadataMap')(var.get('O'), var.get('P'), Js(True)).callprop('set', var.get('MetadataKey'), var.get('MetadataValue'))
        PyJs_ordinaryDefineOwnMetadata_218_._set_name('ordinaryDefineOwnMetadata')
        var.put('ordinaryDefineOwnMetadata', PyJs_ordinaryDefineOwnMetadata_218_)
        @Js
        def PyJs_ordinaryOwnMetadataKeys_219_(target, targetKey, this, arguments, var=var):
            var = Scope({'target':target, 'targetKey':targetKey, 'this':this, 'arguments':arguments, 'ordinaryOwnMetadataKeys':PyJs_ordinaryOwnMetadataKeys_219_}, var)
            var.registers(['metadataMap', 'target', 'targetKey', 'keys'])
            var.put('metadataMap', var.get('getOrCreateMetadataMap')(var.get('target'), var.get('targetKey'), Js(False)))
            var.put('keys', Js([]))
            if var.get('metadataMap'):
                @Js
                def PyJs_anonymous_220_(_, key, this, arguments, var=var):
                    var = Scope({'_':_, 'key':key, 'this':this, 'arguments':arguments}, var)
                    var.registers(['_', 'key'])
                    var.get('keys').callprop('push', var.get('key'))
                PyJs_anonymous_220_._set_name('anonymous')
                var.get('metadataMap').callprop('forEach', PyJs_anonymous_220_)
            return var.get('keys')
        PyJs_ordinaryOwnMetadataKeys_219_._set_name('ordinaryOwnMetadataKeys')
        var.put('ordinaryOwnMetadataKeys', PyJs_ordinaryOwnMetadataKeys_219_)
        @Js
        def PyJs_toMetaKey_221_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'toMetaKey':PyJs_toMetaKey_221_}, var)
            var.registers(['it'])
            return (var.get('it') if (PyJsStrictEq(var.get('it'),var.get('undefined')) or ((Js('undefined') if PyJsStrictEq(var.get('it',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('it')))==Js('symbol'))) else var.get('String')(var.get('it')))
        PyJs_toMetaKey_221_._set_name('toMetaKey')
        var.put('toMetaKey', PyJs_toMetaKey_221_)
        @Js
        def PyJs_exp_222_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments, 'exp':PyJs_exp_222_}, var)
            var.registers(['O'])
            var.get('$export')(var.get('$export').get('S'), Js('Reflect'), var.get('O'))
        PyJs_exp_222_._set_name('exp')
        var.put('exp', PyJs_exp_222_)
        var.get('module').put('exports', Js({'store':var.get('store'),'map':var.get('getOrCreateMetadataMap'),'has':var.get('ordinaryHasOwnMetadata'),'get':var.get('ordinaryGetOwnMetadata'),'set':var.get('ordinaryDefineOwnMetadata'),'keys':var.get('ordinaryOwnMetadataKeys'),'key':var.get('toMetaKey'),'exp':var.get('exp')}))
    PyJs_anonymous_214_._set_name('anonymous')
    @Js
    def PyJs_anonymous_223_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['isNode', 'require', 'Promise', 'macrotask', 'exports', 'module', 'Observer', 'global', 'process'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('macrotask', var.get('require')(Js('./_task')).get('set'))
        var.put('Observer', (var.get('global').get('MutationObserver') or var.get('global').get('WebKitMutationObserver')))
        var.put('process', var.get('global').get('process'))
        var.put('Promise', var.get('global').get('Promise'))
        var.put('isNode', (var.get('require')(Js('./_cof'))(var.get('process'))==Js('process')))
        @Js
        def PyJs_anonymous_224_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['head', 'toggle', 'node', 'flush', 'promise', 'last', 'notify'])
            pass
            @Js
            def PyJs_flush_225_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'flush':PyJs_flush_225_}, var)
                var.registers(['parent', 'fn'])
                pass
                if (var.get('isNode') and var.put('parent', var.get('process').get('domain'))):
                    var.get('parent').callprop('exit')
                while var.get('head'):
                    var.put('fn', var.get('head').get('fn'))
                    var.put('head', var.get('head').get('next'))
                    try:
                        var.get('fn')()
                    except PyJsException as PyJsTempException:
                        PyJsHolder_65_18298253 = var.own.get('e')
                        var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                        try:
                            if var.get('head'):
                                var.get('notify')()
                            else:
                                var.put('last', var.get('undefined'))
                            PyJsTempException = JsToPyException(var.get('e'))
                            raise PyJsTempException
                        finally:
                            if PyJsHolder_65_18298253 is not None:
                                var.own['e'] = PyJsHolder_65_18298253
                            else:
                                del var.own['e']
                            del PyJsHolder_65_18298253
                var.put('last', var.get('undefined'))
                if var.get('parent'):
                    var.get('parent').callprop('enter')
            PyJs_flush_225_._set_name('flush')
            var.put('flush', PyJs_flush_225_)
            if var.get('isNode'):
                @Js
                def PyJs_notify_226_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'notify':PyJs_notify_226_}, var)
                    var.registers([])
                    var.get('process').callprop('nextTick', var.get('flush'))
                PyJs_notify_226_._set_name('notify')
                var.put('notify', PyJs_notify_226_)
            else:
                if (var.get('Observer') and (var.get('global').get('navigator') and var.get('global').get('navigator').get('standalone')).neg()):
                    var.put('toggle', Js(True))
                    var.put('node', var.get('document').callprop('createTextNode', Js('')))
                    var.get('Observer').create(var.get('flush')).callprop('observe', var.get('node'), Js({'characterData':Js(True)}))
                    @Js
                    def PyJs_notify_227_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments, 'notify':PyJs_notify_227_}, var)
                        var.registers([])
                        var.get('node').put('data', var.put('toggle', var.get('toggle').neg()))
                    PyJs_notify_227_._set_name('notify')
                    var.put('notify', PyJs_notify_227_)
                else:
                    if (var.get('Promise') and var.get('Promise').get('resolve')):
                        var.put('promise', var.get('Promise').callprop('resolve', var.get('undefined')))
                        @Js
                        def PyJs_notify_228_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'notify':PyJs_notify_228_}, var)
                            var.registers([])
                            var.get('promise').callprop('then', var.get('flush'))
                        PyJs_notify_228_._set_name('notify')
                        var.put('notify', PyJs_notify_228_)
                    else:
                        @Js
                        def PyJs_notify_229_(this, arguments, var=var):
                            var = Scope({'this':this, 'arguments':arguments, 'notify':PyJs_notify_229_}, var)
                            var.registers([])
                            var.get('macrotask').callprop('call', var.get('global'), var.get('flush'))
                        PyJs_notify_229_._set_name('notify')
                        var.put('notify', PyJs_notify_229_)
            @Js
            def PyJs_anonymous_230_(fn, this, arguments, var=var):
                var = Scope({'fn':fn, 'this':this, 'arguments':arguments}, var)
                var.registers(['task', 'fn'])
                var.put('task', Js({'fn':var.get('fn'),'next':var.get('undefined')}))
                if var.get('last'):
                    var.get('last').put('next', var.get('task'))
                if var.get('head').neg():
                    var.put('head', var.get('task'))
                    var.get('notify')()
                var.put('last', var.get('task'))
            PyJs_anonymous_230_._set_name('anonymous')
            return PyJs_anonymous_230_
        PyJs_anonymous_224_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_224_)
    PyJs_anonymous_223_._set_name('anonymous')
    @Js
    def PyJs_anonymous_231_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', 'PromiseCapability', 'exports', 'module'])
        @Js
        def PyJsHoisted_PromiseCapability_(C, this, arguments, var=var):
            var = Scope({'C':C, 'this':this, 'arguments':arguments}, var)
            var.registers(['C', 'resolve', 'reject'])
            pass
            @Js
            def PyJs_anonymous_232_(PyJsArg_24247265736f6c7665_, PyJsArg_242472656a656374_, this, arguments, var=var):
                var = Scope({'$$resolve':PyJsArg_24247265736f6c7665_, '$$reject':PyJsArg_242472656a656374_, 'this':this, 'arguments':arguments}, var)
                var.registers(['$$reject', '$$resolve'])
                if (PyJsStrictNeq(var.get('resolve'),var.get('undefined')) or PyJsStrictNeq(var.get('reject'),var.get('undefined'))):
                    PyJsTempException = JsToPyException(var.get('TypeError')(Js('Bad Promise constructor')))
                    raise PyJsTempException
                var.put('resolve', var.get('$$resolve'))
                var.put('reject', var.get('$$reject'))
            PyJs_anonymous_232_._set_name('anonymous')
            var.get(u"this").put('promise', var.get('C').create(PyJs_anonymous_232_))
            var.get(u"this").put('resolve', var.get('aFunction')(var.get('resolve')))
            var.get(u"this").put('reject', var.get('aFunction')(var.get('reject')))
        PyJsHoisted_PromiseCapability_.func_name = 'PromiseCapability'
        var.put('PromiseCapability', PyJsHoisted_PromiseCapability_)
        Js('use strict')
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        pass
        @Js
        def PyJs_anonymous_233_(C, this, arguments, var=var):
            var = Scope({'C':C, 'this':this, 'arguments':arguments}, var)
            var.registers(['C'])
            return var.get('PromiseCapability').create(var.get('C'))
        PyJs_anonymous_233_._set_name('anonymous')
        var.get('module').get('exports').put('f', PyJs_anonymous_233_)
    PyJs_anonymous_231_._set_name('anonymous')
    @Js
    def PyJs_anonymous_234_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'getKeys', 'DESCRIPTORS', 'pIE', 'gOPS', 'toObject', 'exports', 'module', 'IObject', '$assign'])
        Js('use strict')
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        var.put('gOPS', var.get('require')(Js('./_object-gops')))
        var.put('pIE', var.get('require')(Js('./_object-pie')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('IObject', var.get('require')(Js('./_iobject')))
        var.put('$assign', var.get('Object').get('assign'))
        @Js
        def PyJs_assign_235_(target, source, this, arguments, var=var):
            var = Scope({'target':target, 'source':source, 'this':this, 'arguments':arguments, 'assign':PyJs_assign_235_}, var)
            var.registers(['target', 'keys', 'index', 'length', 'source', 'j', 'getSymbols', 'isEnum', 'aLen', 'S', 'key', 'T'])
            var.put('T', var.get('toObject')(var.get('target')))
            var.put('aLen', var.get('arguments').get('length'))
            var.put('index', Js(1.0))
            var.put('getSymbols', var.get('gOPS').get('f'))
            var.put('isEnum', var.get('pIE').get('f'))
            while (var.get('aLen')>var.get('index')):
                var.put('S', var.get('IObject')(var.get('arguments').get((var.put('index',Js(var.get('index').to_number())+Js(1))-Js(1)))))
                var.put('keys', (var.get('getKeys')(var.get('S')).callprop('concat', var.get('getSymbols')(var.get('S'))) if var.get('getSymbols') else var.get('getKeys')(var.get('S'))))
                var.put('length', var.get('keys').get('length'))
                var.put('j', Js(0.0))
                pass
                while (var.get('length')>var.get('j')):
                    var.put('key', var.get('keys').get((var.put('j',Js(var.get('j').to_number())+Js(1))-Js(1))))
                    if (var.get('DESCRIPTORS').neg() or var.get('isEnum').callprop('call', var.get('S'), var.get('key'))):
                        var.get('T').put(var.get('key'), var.get('S').get(var.get('key')))
            return var.get('T')
        PyJs_assign_235_._set_name('assign')
        @Js
        def PyJs_anonymous_236_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['B', 'K', 'S', 'A'])
            var.put('A', Js({}))
            var.put('B', Js({}))
            var.put('S', var.get('Symbol')())
            var.put('K', Js('abcdefghijklmnopqrst'))
            var.get('A').put(var.get('S'), Js(7.0))
            @Js
            def PyJs_anonymous_237_(k, this, arguments, var=var):
                var = Scope({'k':k, 'this':this, 'arguments':arguments}, var)
                var.registers(['k'])
                var.get('B').put(var.get('k'), var.get('k'))
            PyJs_anonymous_237_._set_name('anonymous')
            var.get('K').callprop('split', Js('')).callprop('forEach', PyJs_anonymous_237_)
            return ((var.get('$assign')(Js({}), var.get('A')).get(var.get('S'))!=Js(7.0)) or (var.get('Object').callprop('keys', var.get('$assign')(Js({}), var.get('B'))).callprop('join', Js(''))!=var.get('K')))
        PyJs_anonymous_236_._set_name('anonymous')
        var.get('module').put('exports', (PyJs_assign_235_ if (var.get('$assign').neg() or var.get('require')(Js('./_fails'))(PyJs_anonymous_236_)) else var.get('$assign')))
    PyJs_anonymous_234_._set_name('anonymous')
    @Js
    def PyJs_anonymous_238_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['PROTOTYPE', 'require', 'IE_PROTO', 'enumBugKeys', '_createDict', 'Empty', 'exports', 'module', 'anObject', 'dPs'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('dPs', var.get('require')(Js('./_object-dps')))
        var.put('enumBugKeys', var.get('require')(Js('./_enum-bug-keys')))
        var.put('IE_PROTO', var.get('require')(Js('./_shared-key'))(Js('IE_PROTO')))
        @Js
        def PyJs_Empty_239_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'Empty':PyJs_Empty_239_}, var)
            var.registers([])
            pass
        PyJs_Empty_239_._set_name('Empty')
        var.put('Empty', PyJs_Empty_239_)
        var.put('PROTOTYPE', Js('prototype'))
        @Js
        def PyJs_createDict_240_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'createDict':PyJs_createDict_240_}, var)
            var.registers(['lt', 'iframe', 'i', 'iframeDocument', 'gt'])
            var.put('iframe', var.get('require')(Js('./_dom-create'))(Js('iframe')))
            var.put('i', var.get('enumBugKeys').get('length'))
            var.put('lt', Js('<'))
            var.put('gt', Js('>'))
            pass
            var.get('iframe').get('style').put('display', Js('none'))
            var.get('require')(Js('./_html')).callprop('appendChild', var.get('iframe'))
            var.get('iframe').put('src', Js('javascript:'))
            var.put('iframeDocument', var.get('iframe').get('contentWindow').get('document'))
            var.get('iframeDocument').callprop('open')
            var.get('iframeDocument').callprop('write', ((((((var.get('lt')+Js('script'))+var.get('gt'))+Js('document.F=Object'))+var.get('lt'))+Js('/script'))+var.get('gt')))
            var.get('iframeDocument').callprop('close')
            var.put('_createDict', var.get('iframeDocument').get('F'))
            while (var.put('i',Js(var.get('i').to_number())-Js(1))+Js(1)):
                var.get('_createDict').get(var.get('PROTOTYPE')).delete(var.get('enumBugKeys').get(var.get('i')))
            return var.get('_createDict')()
        PyJs_createDict_240_._set_name('createDict')
        var.put('_createDict', PyJs_createDict_240_)
        @Js
        def PyJs_create_241_(O, Properties, this, arguments, var=var):
            var = Scope({'O':O, 'Properties':Properties, 'this':this, 'arguments':arguments, 'create':PyJs_create_241_}, var)
            var.registers(['Properties', 'O', 'result'])
            pass
            if PyJsStrictNeq(var.get('O'),var.get(u"null")):
                var.get('Empty').put(var.get('PROTOTYPE'), var.get('anObject')(var.get('O')))
                var.put('result', var.get('Empty').create())
                var.get('Empty').put(var.get('PROTOTYPE'), var.get(u"null"))
                var.get('result').put(var.get('IE_PROTO'), var.get('O'))
            else:
                var.put('result', var.get('_createDict')())
            return (var.get('result') if PyJsStrictEq(var.get('Properties'),var.get('undefined')) else var.get('dPs')(var.get('result'), var.get('Properties')))
        PyJs_create_241_._set_name('create')
        var.get('module').put('exports', (var.get('Object').get('create') or PyJs_create_241_))
    PyJs_anonymous_238_._set_name('anonymous')
    @Js
    def PyJs_anonymous_242_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toPrimitive', 'exports', 'module', 'IE8_DOM_DEFINE', 'dP', 'anObject'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('IE8_DOM_DEFINE', var.get('require')(Js('./_ie8-dom-define')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('dP', var.get('Object').get('defineProperty'))
        @Js
        def PyJs_defineProperty_243_(O, P, Attributes, this, arguments, var=var):
            var = Scope({'O':O, 'P':P, 'Attributes':Attributes, 'this':this, 'arguments':arguments, 'defineProperty':PyJs_defineProperty_243_}, var)
            var.registers(['Attributes', 'O', 'P'])
            var.get('anObject')(var.get('O'))
            var.put('P', var.get('toPrimitive')(var.get('P'), Js(True)))
            var.get('anObject')(var.get('Attributes'))
            if var.get('IE8_DOM_DEFINE'):
                try:
                    return var.get('dP')(var.get('O'), var.get('P'), var.get('Attributes'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_44789280 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        pass
                    finally:
                        if PyJsHolder_65_44789280 is not None:
                            var.own['e'] = PyJsHolder_65_44789280
                        else:
                            del var.own['e']
                        del PyJsHolder_65_44789280
            if (var.get('Attributes').contains(Js('get')) or var.get('Attributes').contains(Js('set'))):
                PyJsTempException = JsToPyException(var.get('TypeError')(Js('Accessors not supported!')))
                raise PyJsTempException
            if var.get('Attributes').contains(Js('value')):
                var.get('O').put(var.get('P'), var.get('Attributes').get('value'))
            return var.get('O')
        PyJs_defineProperty_243_._set_name('defineProperty')
        var.get('exports').put('f', (var.get('Object').get('defineProperty') if var.get('require')(Js('./_descriptors')) else PyJs_defineProperty_243_))
    PyJs_anonymous_242_._set_name('anonymous')
    @Js
    def PyJs_anonymous_244_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'getKeys', 'exports', 'module', 'dP', 'anObject'])
        var.put('dP', var.get('require')(Js('./_object-dp')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        @Js
        def PyJs_defineProperties_245_(O, Properties, this, arguments, var=var):
            var = Scope({'O':O, 'Properties':Properties, 'this':this, 'arguments':arguments, 'defineProperties':PyJs_defineProperties_245_}, var)
            var.registers(['keys', 'length', 'i', 'O', 'Properties', 'P'])
            var.get('anObject')(var.get('O'))
            var.put('keys', var.get('getKeys')(var.get('Properties')))
            var.put('length', var.get('keys').get('length'))
            var.put('i', Js(0.0))
            pass
            while (var.get('length')>var.get('i')):
                var.get('dP').callprop('f', var.get('O'), var.put('P', var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1)))), var.get('Properties').get(var.get('P')))
            return var.get('O')
        PyJs_defineProperties_245_._set_name('defineProperties')
        var.get('module').put('exports', (var.get('Object').get('defineProperties') if var.get('require')(Js('./_descriptors')) else PyJs_defineProperties_245_))
    PyJs_anonymous_244_._set_name('anonymous')
    @Js
    def PyJs_anonymous_246_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        Js('use strict')
        @Js
        def PyJs_anonymous_247_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['K'])
            var.put('K', var.get('Math').callprop('random'))
            @Js
            def PyJs_anonymous_248_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                pass
            PyJs_anonymous_248_._set_name('anonymous')
            var.get('__defineSetter__').callprop('call', var.get(u"null"), var.get('K'), PyJs_anonymous_248_)
            var.get('require')(Js('./_global')).delete(var.get('K'))
        PyJs_anonymous_247_._set_name('anonymous')
        var.get('module').put('exports', (var.get('require')(Js('./_library')) or var.get('require')(Js('./_fails'))(PyJs_anonymous_247_).neg()))
    PyJs_anonymous_246_._set_name('anonymous')
    @Js
    def PyJs_anonymous_249_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toPrimitive', 'toIObject', 'pIE', 'gOPD', 'exports', 'module', 'IE8_DOM_DEFINE', 'createDesc', 'has'])
        var.put('pIE', var.get('require')(Js('./_object-pie')))
        var.put('createDesc', var.get('require')(Js('./_property-desc')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('toPrimitive', var.get('require')(Js('./_to-primitive')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('IE8_DOM_DEFINE', var.get('require')(Js('./_ie8-dom-define')))
        var.put('gOPD', var.get('Object').get('getOwnPropertyDescriptor'))
        @Js
        def PyJs_getOwnPropertyDescriptor_250_(O, P, this, arguments, var=var):
            var = Scope({'O':O, 'P':P, 'this':this, 'arguments':arguments, 'getOwnPropertyDescriptor':PyJs_getOwnPropertyDescriptor_250_}, var)
            var.registers(['O', 'P'])
            var.put('O', var.get('toIObject')(var.get('O')))
            var.put('P', var.get('toPrimitive')(var.get('P'), Js(True)))
            if var.get('IE8_DOM_DEFINE'):
                try:
                    return var.get('gOPD')(var.get('O'), var.get('P'))
                except PyJsException as PyJsTempException:
                    PyJsHolder_65_12374525 = var.own.get('e')
                    var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                    try:
                        pass
                    finally:
                        if PyJsHolder_65_12374525 is not None:
                            var.own['e'] = PyJsHolder_65_12374525
                        else:
                            del var.own['e']
                        del PyJsHolder_65_12374525
            if var.get('has')(var.get('O'), var.get('P')):
                return var.get('createDesc')(var.get('pIE').get('f').callprop('call', var.get('O'), var.get('P')).neg(), var.get('O').get(var.get('P')))
        PyJs_getOwnPropertyDescriptor_250_._set_name('getOwnPropertyDescriptor')
        var.get('exports').put('f', (var.get('gOPD') if var.get('require')(Js('./_descriptors')) else PyJs_getOwnPropertyDescriptor_250_))
    PyJs_anonymous_249_._set_name('anonymous')
    @Js
    def PyJs_anonymous_251_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'windowNames', 'toIObject', 'gOPN', 'toString', 'exports', 'module', 'getWindowNames'])
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('gOPN', var.get('require')(Js('./_object-gopn')).get('f'))
        var.put('toString', Js({}).get('toString'))
        var.put('windowNames', (var.get('Object').callprop('getOwnPropertyNames', var.get('window')) if ((((Js('undefined') if PyJsStrictEq(var.get('window',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('window')))==Js('object')) and var.get('window')) and var.get('Object').get('getOwnPropertyNames')) else Js([])))
        @Js
        def PyJs_getWindowNames_252_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getWindowNames':PyJs_getWindowNames_252_}, var)
            var.registers(['it'])
            try:
                return var.get('gOPN')(var.get('it'))
            except PyJsException as PyJsTempException:
                PyJsHolder_65_89617369 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return var.get('windowNames').callprop('slice')
                finally:
                    if PyJsHolder_65_89617369 is not None:
                        var.own['e'] = PyJsHolder_65_89617369
                    else:
                        del var.own['e']
                    del PyJsHolder_65_89617369
        PyJs_getWindowNames_252_._set_name('getWindowNames')
        var.put('getWindowNames', PyJs_getWindowNames_252_)
        @Js
        def PyJs_getOwnPropertyNames_253_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'getOwnPropertyNames':PyJs_getOwnPropertyNames_253_}, var)
            var.registers(['it'])
            return (var.get('getWindowNames')(var.get('it')) if (var.get('windowNames') and (var.get('toString').callprop('call', var.get('it'))==Js('[object Window]'))) else var.get('gOPN')(var.get('toIObject')(var.get('it'))))
        PyJs_getOwnPropertyNames_253_._set_name('getOwnPropertyNames')
        var.get('module').get('exports').put('f', PyJs_getOwnPropertyNames_253_)
    PyJs_anonymous_251_._set_name('anonymous')
    @Js
    def PyJs_anonymous_254_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$keys', 'exports', 'module', 'hiddenKeys'])
        var.put('$keys', var.get('require')(Js('./_object-keys-internal')))
        var.put('hiddenKeys', var.get('require')(Js('./_enum-bug-keys')).callprop('concat', Js('length'), Js('prototype')))
        @Js
        def PyJs_getOwnPropertyNames_255_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments, 'getOwnPropertyNames':PyJs_getOwnPropertyNames_255_}, var)
            var.registers(['O'])
            return var.get('$keys')(var.get('O'), var.get('hiddenKeys'))
        PyJs_getOwnPropertyNames_255_._set_name('getOwnPropertyNames')
        var.get('exports').put('f', (var.get('Object').get('getOwnPropertyNames') or PyJs_getOwnPropertyNames_255_))
    PyJs_anonymous_254_._set_name('anonymous')
    @Js
    def PyJs_anonymous_256_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('exports').put('f', var.get('Object').get('getOwnPropertySymbols'))
    PyJs_anonymous_256_._set_name('anonymous')
    @Js
    def PyJs_anonymous_257_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'IE_PROTO', 'toObject', 'exports', 'module', 'ObjectProto', 'has'])
        var.put('has', var.get('require')(Js('./_has')))
        var.put('toObject', var.get('require')(Js('./_to-object')))
        var.put('IE_PROTO', var.get('require')(Js('./_shared-key'))(Js('IE_PROTO')))
        var.put('ObjectProto', var.get('Object').get('prototype'))
        @Js
        def PyJs_anonymous_258_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments}, var)
            var.registers(['O'])
            var.put('O', var.get('toObject')(var.get('O')))
            if var.get('has')(var.get('O'), var.get('IE_PROTO')):
                return var.get('O').get(var.get('IE_PROTO'))
            if ((var.get('O').get('constructor').typeof()==Js('function')) and var.get('O').instanceof(var.get('O').get('constructor'))):
                return var.get('O').get('constructor').get('prototype')
            return (var.get('ObjectProto') if var.get('O').instanceof(var.get('Object')) else var.get(u"null"))
        PyJs_anonymous_258_._set_name('anonymous')
        var.get('module').put('exports', (var.get('Object').get('getPrototypeOf') or PyJs_anonymous_258_))
    PyJs_anonymous_257_._set_name('anonymous')
    @Js
    def PyJs_anonymous_259_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'IE_PROTO', 'arrayIndexOf', 'toIObject', 'exports', 'module', 'has'])
        var.put('has', var.get('require')(Js('./_has')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('arrayIndexOf', var.get('require')(Js('./_array-includes'))(Js(False)))
        var.put('IE_PROTO', var.get('require')(Js('./_shared-key'))(Js('IE_PROTO')))
        @Js
        def PyJs_anonymous_260_(object, names, this, arguments, var=var):
            var = Scope({'object':object, 'names':names, 'this':this, 'arguments':arguments}, var)
            var.registers(['object', 'i', 'O', 'result', 'key', 'names'])
            var.put('O', var.get('toIObject')(var.get('object')))
            var.put('i', Js(0.0))
            var.put('result', Js([]))
            pass
            for PyJsTemp in var.get('O'):
                var.put('key', PyJsTemp)
                if (var.get('key')!=var.get('IE_PROTO')):
                    (var.get('has')(var.get('O'), var.get('key')) and var.get('result').callprop('push', var.get('key')))
            while (var.get('names').get('length')>var.get('i')):
                if var.get('has')(var.get('O'), var.put('key', var.get('names').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))):
                    ((~var.get('arrayIndexOf')(var.get('result'), var.get('key'))) or var.get('result').callprop('push', var.get('key')))
            return var.get('result')
        PyJs_anonymous_260_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_260_)
    PyJs_anonymous_259_._set_name('anonymous')
    @Js
    def PyJs_anonymous_261_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'enumBugKeys', '$keys', 'exports', 'module'])
        var.put('$keys', var.get('require')(Js('./_object-keys-internal')))
        var.put('enumBugKeys', var.get('require')(Js('./_enum-bug-keys')))
        @Js
        def PyJs_keys_262_(O, this, arguments, var=var):
            var = Scope({'O':O, 'this':this, 'arguments':arguments, 'keys':PyJs_keys_262_}, var)
            var.registers(['O'])
            return var.get('$keys')(var.get('O'), var.get('enumBugKeys'))
        PyJs_keys_262_._set_name('keys')
        var.get('module').put('exports', (var.get('Object').get('keys') or PyJs_keys_262_))
    PyJs_anonymous_261_._set_name('anonymous')
    @Js
    def PyJs_anonymous_263_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('exports').put('f', Js({}).get('propertyIsEnumerable'))
    PyJs_anonymous_263_._set_name('anonymous')
    @Js
    def PyJs_anonymous_264_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['core', 'require', '$export', 'exports', 'module', 'fails'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('core', var.get('require')(Js('./_core')))
        var.put('fails', var.get('require')(Js('./_fails')))
        @Js
        def PyJs_anonymous_265_(KEY, exec, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['exp', 'exec', 'fn', 'KEY'])
            var.put('fn', ((var.get('core').get('Object') or Js({})).get(var.get('KEY')) or var.get('Object').get(var.get('KEY'))))
            var.put('exp', Js({}))
            var.get('exp').put(var.get('KEY'), var.get('exec')(var.get('fn')))
            @Js
            def PyJs_anonymous_266_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                var.get('fn')(Js(1.0))
            PyJs_anonymous_266_._set_name('anonymous')
            var.get('$export')((var.get('$export').get('S')+(var.get('$export').get('F')*var.get('fails')(PyJs_anonymous_266_))), Js('Object'), var.get('exp'))
        PyJs_anonymous_265_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_265_)
    PyJs_anonymous_264_._set_name('anonymous')
    @Js
    def PyJs_anonymous_267_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'getKeys', 'toIObject', 'DESCRIPTORS', 'exports', 'module', 'isEnum'])
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('getKeys', var.get('require')(Js('./_object-keys')))
        var.put('toIObject', var.get('require')(Js('./_to-iobject')))
        var.put('isEnum', var.get('require')(Js('./_object-pie')).get('f'))
        @Js
        def PyJs_anonymous_268_(isEntries, this, arguments, var=var):
            var = Scope({'isEntries':isEntries, 'this':this, 'arguments':arguments}, var)
            var.registers(['isEntries'])
            @Js
            def PyJs_anonymous_269_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it', 'length', 'i', 'O', 'result', 'key', 'keys'])
                var.put('O', var.get('toIObject')(var.get('it')))
                var.put('keys', var.get('getKeys')(var.get('O')))
                var.put('length', var.get('keys').get('length'))
                var.put('i', Js(0.0))
                var.put('result', Js([]))
                pass
                while (var.get('length')>var.get('i')):
                    var.put('key', var.get('keys').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                    if (var.get('DESCRIPTORS').neg() or var.get('isEnum').callprop('call', var.get('O'), var.get('key'))):
                        var.get('result').callprop('push', (Js([var.get('key'), var.get('O').get(var.get('key'))]) if var.get('isEntries') else var.get('O').get(var.get('key'))))
                return var.get('result')
            PyJs_anonymous_269_._set_name('anonymous')
            return PyJs_anonymous_269_
        PyJs_anonymous_268_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_268_)
    PyJs_anonymous_267_._set_name('anonymous')
    @Js
    def PyJs_anonymous_270_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'Reflect', 'gOPN', 'gOPS', 'exports', 'module', 'anObject'])
        var.put('gOPN', var.get('require')(Js('./_object-gopn')))
        var.put('gOPS', var.get('require')(Js('./_object-gops')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('Reflect', var.get('require')(Js('./_global')).get('Reflect'))
        @Js
        def PyJs_ownKeys_271_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments, 'ownKeys':PyJs_ownKeys_271_}, var)
            var.registers(['it', 'getSymbols', 'keys'])
            var.put('keys', var.get('gOPN').callprop('f', var.get('anObject')(var.get('it'))))
            var.put('getSymbols', var.get('gOPS').get('f'))
            return (var.get('keys').callprop('concat', var.get('getSymbols')(var.get('it'))) if var.get('getSymbols') else var.get('keys'))
        PyJs_ownKeys_271_._set_name('ownKeys')
        var.get('module').put('exports', ((var.get('Reflect') and var.get('Reflect').get('ownKeys')) or PyJs_ownKeys_271_))
    PyJs_anonymous_270_._set_name('anonymous')
    @Js
    def PyJs_anonymous_272_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', '$parseFloat', 'exports', 'module', '$trim'])
        var.put('$parseFloat', var.get('require')(Js('./_global')).get('parseFloat'))
        var.put('$trim', var.get('require')(Js('./_string-trim')).get('trim'))
        @Js
        def PyJs_parseFloat_273_(str, this, arguments, var=var):
            var = Scope({'str':str, 'this':this, 'arguments':arguments, 'parseFloat':PyJs_parseFloat_273_}, var)
            var.registers(['str', 'string', 'result'])
            var.put('string', var.get('$trim')(var.get('String')(var.get('str')), Js(3.0)))
            var.put('result', var.get('$parseFloat')(var.get('string')))
            return ((-Js(0.0)) if (PyJsStrictEq(var.get('result'),Js(0.0)) and (var.get('string').callprop('charAt', Js(0.0))==Js('-'))) else var.get('result'))
        PyJs_parseFloat_273_._set_name('parseFloat')
        var.get('module').put('exports', (PyJs_parseFloat_273_ if PyJsStrictNeq((Js(1.0)/var.get('$parseFloat')((var.get('require')(Js('./_string-ws'))+Js('-0')))),(-var.get('Infinity'))) else var.get('$parseFloat')))
    PyJs_anonymous_272_._set_name('anonymous')
    @Js
    def PyJs_anonymous_274_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'hex', '$parseInt', 'ws', 'exports', 'module', '$trim'])
        var.put('$parseInt', var.get('require')(Js('./_global')).get('parseInt'))
        var.put('$trim', var.get('require')(Js('./_string-trim')).get('trim'))
        var.put('ws', var.get('require')(Js('./_string-ws')))
        var.put('hex', JsRegExp('/^[-+]?0[xX]/'))
        @Js
        def PyJs_parseInt_275_(str, radix, this, arguments, var=var):
            var = Scope({'str':str, 'radix':radix, 'this':this, 'arguments':arguments, 'parseInt':PyJs_parseInt_275_}, var)
            var.registers(['str', 'string', 'radix'])
            var.put('string', var.get('$trim')(var.get('String')(var.get('str')), Js(3.0)))
            return var.get('$parseInt')(var.get('string'), (PyJsBshift(var.get('radix'),Js(0.0)) or (Js(16.0) if var.get('hex').callprop('test', var.get('string')) else Js(10.0))))
        PyJs_parseInt_275_._set_name('parseInt')
        var.get('module').put('exports', (PyJs_parseInt_275_ if (PyJsStrictNeq(var.get('$parseInt')((var.get('ws')+Js('08'))),Js(8.0)) or PyJsStrictNeq(var.get('$parseInt')((var.get('ws')+Js('0x16'))),Js(22.0))) else var.get('$parseInt')))
    PyJs_anonymous_274_._set_name('anonymous')
    @Js
    def PyJs_anonymous_276_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_277_(exec, this, arguments, var=var):
            var = Scope({'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['exec'])
            try:
                return Js({'e':Js(False),'v':var.get('exec')()})
            except PyJsException as PyJsTempException:
                PyJsHolder_65_57087974 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    return Js({'e':Js(True),'v':var.get('e')})
                finally:
                    if PyJsHolder_65_57087974 is not None:
                        var.own['e'] = PyJsHolder_65_57087974
                    else:
                        del var.own['e']
                    del PyJsHolder_65_57087974
        PyJs_anonymous_277_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_277_)
    PyJs_anonymous_276_._set_name('anonymous')
    @Js
    def PyJs_anonymous_278_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'module', 'newPromiseCapability', 'isObject', 'anObject'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('newPromiseCapability', var.get('require')(Js('./_new-promise-capability')))
        @Js
        def PyJs_anonymous_279_(C, x, this, arguments, var=var):
            var = Scope({'C':C, 'x':x, 'this':this, 'arguments':arguments}, var)
            var.registers(['C', 'x', 'promiseCapability', 'resolve'])
            var.get('anObject')(var.get('C'))
            if (var.get('isObject')(var.get('x')) and PyJsStrictEq(var.get('x').get('constructor'),var.get('C'))):
                return var.get('x')
            var.put('promiseCapability', var.get('newPromiseCapability').callprop('f', var.get('C')))
            var.put('resolve', var.get('promiseCapability').get('resolve'))
            var.get('resolve')(var.get('x'))
            return var.get('promiseCapability').get('promise')
        PyJs_anonymous_279_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_279_)
    PyJs_anonymous_278_._set_name('anonymous')
    @Js
    def PyJs_anonymous_280_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_281_(bitmap, value, this, arguments, var=var):
            var = Scope({'bitmap':bitmap, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value', 'bitmap'])
            return Js({'enumerable':(var.get('bitmap')&Js(1.0)).neg(),'configurable':(var.get('bitmap')&Js(2.0)).neg(),'writable':(var.get('bitmap')&Js(4.0)).neg(),'value':var.get('value')})
        PyJs_anonymous_281_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_281_)
    PyJs_anonymous_280_._set_name('anonymous')
    @Js
    def PyJs_anonymous_282_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'redefine', 'module', 'exports'])
        var.put('redefine', var.get('require')(Js('./_redefine')))
        @Js
        def PyJs_anonymous_283_(target, src, safe, this, arguments, var=var):
            var = Scope({'target':target, 'src':src, 'safe':safe, 'this':this, 'arguments':arguments}, var)
            var.registers(['target', 'src', 'key', 'safe'])
            for PyJsTemp in var.get('src'):
                var.put('key', PyJsTemp)
                var.get('redefine')(var.get('target'), var.get('key'), var.get('src').get(var.get('key')), var.get('safe'))
            return var.get('target')
        PyJs_anonymous_283_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_283_)
    PyJs_anonymous_282_._set_name('anonymous')
    @Js
    def PyJs_anonymous_284_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'has', 'hide', 'TPL', 'exports', 'module', 'TO_STRING', 'global', '$toString', 'SRC'])
        var.put('global', var.get('require')(Js('./_global')))
        var.put('hide', var.get('require')(Js('./_hide')))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('SRC', var.get('require')(Js('./_uid'))(Js('src')))
        var.put('$toString', var.get('require')(Js('./_function-to-string')))
        var.put('TO_STRING', Js('toString'))
        var.put('TPL', (Js('')+var.get('$toString')).callprop('split', var.get('TO_STRING')))
        @Js
        def PyJs_anonymous_285_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('$toString').callprop('call', var.get('it'))
        PyJs_anonymous_285_._set_name('anonymous')
        var.get('require')(Js('./_core')).put('inspectSource', PyJs_anonymous_285_)
        @Js
        def PyJs_toString_286_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'toString':PyJs_toString_286_}, var)
            var.registers([])
            return (((var.get(u"this",throw=False).typeof()==Js('function')) and var.get(u"this").get(var.get('SRC'))) or var.get('$toString').callprop('call', var.get(u"this")))
        PyJs_toString_286_._set_name('toString')
        @Js
        def PyJs_anonymous_287_(O, key, val, safe, this, arguments, var=var):
            var = Scope({'O':O, 'key':key, 'val':val, 'safe':safe, 'this':this, 'arguments':arguments}, var)
            var.registers(['isFunction', 'safe', 'val', 'O', 'key'])
            var.put('isFunction', (var.get('val',throw=False).typeof()==Js('function')))
            if var.get('isFunction'):
                (var.get('has')(var.get('val'), Js('name')) or var.get('hide')(var.get('val'), Js('name'), var.get('key')))
            if PyJsStrictEq(var.get('O').get(var.get('key')),var.get('val')):
                return var.get('undefined')
            if var.get('isFunction'):
                (var.get('has')(var.get('val'), var.get('SRC')) or var.get('hide')(var.get('val'), var.get('SRC'), ((Js('')+var.get('O').get(var.get('key'))) if var.get('O').get(var.get('key')) else var.get('TPL').callprop('join', var.get('String')(var.get('key'))))))
            if PyJsStrictEq(var.get('O'),var.get('global')):
                var.get('O').put(var.get('key'), var.get('val'))
            else:
                if var.get('safe').neg():
                    var.get('O').delete(var.get('key'))
                    var.get('hide')(var.get('O'), var.get('key'), var.get('val'))
                else:
                    if var.get('O').get(var.get('key')):
                        var.get('O').put(var.get('key'), var.get('val'))
                    else:
                        var.get('hide')(var.get('O'), var.get('key'), var.get('val'))
        PyJs_anonymous_287_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_287_)(var.get('Function').get('prototype'), var.get('TO_STRING'), PyJs_toString_286_)
    PyJs_anonymous_284_._set_name('anonymous')
    @Js
    def PyJs_anonymous_288_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'builtinExec', 'classof', 'exports', 'module'])
        Js('use strict')
        var.put('classof', var.get('require')(Js('./_classof')))
        var.put('builtinExec', var.get('RegExp').get('prototype').get('exec'))
        @Js
        def PyJs_anonymous_289_(R, S, this, arguments, var=var):
            var = Scope({'R':R, 'S':S, 'this':this, 'arguments':arguments}, var)
            var.registers(['result', 'exec', 'S', 'R'])
            var.put('exec', var.get('R').get('exec'))
            if PyJsStrictEq(var.get('exec',throw=False).typeof(),Js('function')):
                var.put('result', var.get('exec').callprop('call', var.get('R'), var.get('S')))
                if PyJsStrictNeq((Js('undefined') if PyJsStrictEq(var.get('result',throw=False).typeof(),Js('undefined')) else var.get('_typeof')(var.get('result'))),Js('object')):
                    PyJsTempException = JsToPyException(var.get('TypeError').create(Js('RegExp exec method returned something other than an Object or null')))
                    raise PyJsTempException
                return var.get('result')
            if PyJsStrictNeq(var.get('classof')(var.get('R')),Js('RegExp')):
                PyJsTempException = JsToPyException(var.get('TypeError').create(Js('RegExp#exec called on incompatible receiver')))
                raise PyJsTempException
            return var.get('builtinExec').callprop('call', var.get('R'), var.get('S'))
        PyJs_anonymous_289_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_289_)
    PyJs_anonymous_288_._set_name('anonymous')
    @Js
    def PyJs_anonymous_290_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'UPDATES_LAST_INDEX_WRONG', 'regexpFlags', 'NPCG_INCLUDED', 'nativeExec', 'PATCH', 'nativeReplace', 'exports', 'LAST_INDEX', 'module', 'patchedExec'])
        Js('use strict')
        var.put('regexpFlags', var.get('require')(Js('./_flags')))
        var.put('nativeExec', var.get('RegExp').get('prototype').get('exec'))
        var.put('nativeReplace', var.get('String').get('prototype').get('replace'))
        var.put('patchedExec', var.get('nativeExec'))
        var.put('LAST_INDEX', Js('lastIndex'))
        @Js
        def PyJs_anonymous_291_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments}, var)
            var.registers(['re2', 're1'])
            var.put('re1', JsRegExp('/a/'))
            var.put('re2', JsRegExp('/b*/g'))
            var.get('nativeExec').callprop('call', var.get('re1'), Js('a'))
            var.get('nativeExec').callprop('call', var.get('re2'), Js('a'))
            return (PyJsStrictNeq(var.get('re1').get(var.get('LAST_INDEX')),Js(0.0)) or PyJsStrictNeq(var.get('re2').get(var.get('LAST_INDEX')),Js(0.0)))
        PyJs_anonymous_291_._set_name('anonymous')
        var.put('UPDATES_LAST_INDEX_WRONG', PyJs_anonymous_291_())
        var.put('NPCG_INCLUDED', PyJsStrictNeq(JsRegExp('/()??/').callprop('exec', Js('')).get('1'),var.get('undefined')))
        var.put('PATCH', (var.get('UPDATES_LAST_INDEX_WRONG') or var.get('NPCG_INCLUDED')))
        if var.get('PATCH'):
            @Js
            def PyJs_exec_292_(str, this, arguments, var=var):
                var = Scope({'str':str, 'this':this, 'arguments':arguments, 'exec':PyJs_exec_292_}, var)
                var.registers(['reCopy', 'str', 're', 'i', 'match', 'lastIndex'])
                var.put('re', var.get(u"this"))
                pass
                if var.get('NPCG_INCLUDED'):
                    var.put('reCopy', var.get('RegExp').create(((Js('^')+var.get('re').get('source'))+Js('$(?!\\s)')), var.get('regexpFlags').callprop('call', var.get('re'))))
                if var.get('UPDATES_LAST_INDEX_WRONG'):
                    var.put('lastIndex', var.get('re').get(var.get('LAST_INDEX')))
                var.put('match', var.get('nativeExec').callprop('call', var.get('re'), var.get('str')))
                if (var.get('UPDATES_LAST_INDEX_WRONG') and var.get('match')):
                    var.get('re').put(var.get('LAST_INDEX'), ((var.get('match').get('index')+var.get('match').get('0').get('length')) if var.get('re').get('global') else var.get('lastIndex')))
                if ((var.get('NPCG_INCLUDED') and var.get('match')) and (var.get('match').get('length')>Js(1.0))):
                    @Js
                    def PyJs_anonymous_293_(this, arguments, var=var):
                        var = Scope({'this':this, 'arguments':arguments}, var)
                        var.registers([])
                        #for JS loop
                        var.put('i', Js(1.0))
                        while (var.get('i')<(var.get('arguments').get('length')-Js(2.0))):
                            try:
                                if PyJsStrictEq(var.get('arguments').get(var.get('i')),var.get('undefined')):
                                    var.get('match').put(var.get('i'), var.get('undefined'))
                            finally:
                                    (var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))
                    PyJs_anonymous_293_._set_name('anonymous')
                    var.get('nativeReplace').callprop('call', var.get('match').get('0'), var.get('reCopy'), PyJs_anonymous_293_)
                return var.get('match')
            PyJs_exec_292_._set_name('exec')
            var.put('patchedExec', PyJs_exec_292_)
        var.get('module').put('exports', var.get('patchedExec'))
    PyJs_anonymous_290_._set_name('anonymous')
    @Js
    def PyJs_anonymous_294_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_anonymous_295_(regExp, replace, this, arguments, var=var):
            var = Scope({'regExp':regExp, 'replace':replace, 'this':this, 'arguments':arguments}, var)
            var.registers(['replacer', 'replace', 'regExp'])
            @Js
            def PyJs_anonymous_296_(part, this, arguments, var=var):
                var = Scope({'part':part, 'this':this, 'arguments':arguments}, var)
                var.registers(['part'])
                return var.get('replace').get(var.get('part'))
            PyJs_anonymous_296_._set_name('anonymous')
            var.put('replacer', (PyJs_anonymous_296_ if PyJsStrictEq(var.get('replace'),var.get('Object')(var.get('replace'))) else var.get('replace')))
            @Js
            def PyJs_anonymous_297_(it, this, arguments, var=var):
                var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
                var.registers(['it'])
                return var.get('String')(var.get('it')).callprop('replace', var.get('regExp'), var.get('replacer'))
            PyJs_anonymous_297_._set_name('anonymous')
            return PyJs_anonymous_297_
        PyJs_anonymous_295_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_295_)
    PyJs_anonymous_294_._set_name('anonymous')
    @Js
    def PyJs_anonymous_298_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        @Js
        def PyJs_InlineNonPyName_299_(x, y, this, arguments, var=var):
            var = Scope({'x':x, 'y':y, 'this':this, 'arguments':arguments, 'is':PyJs_InlineNonPyName_299_}, var)
            var.registers(['x', 'y'])
            return ((PyJsStrictNeq(var.get('x'),Js(0.0)) or PyJsStrictEq((Js(1.0)/var.get('x')),(Js(1.0)/var.get('y')))) if PyJsStrictEq(var.get('x'),var.get('y')) else ((var.get('x')!=var.get('x')) and (var.get('y')!=var.get('y'))))
        PyJs_InlineNonPyName_299_._set_name('is')
        var.get('module').put('exports', (var.get('Object').get('is') or PyJs_InlineNonPyName_299_))
    PyJs_anonymous_298_._set_name('anonymous')
    @Js
    def PyJs_anonymous_300_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', '$export', 'exports', 'module', 'forOf', 'ctx'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('forOf', var.get('require')(Js('./_for-of')))
        @Js
        def PyJs_anonymous_301_(COLLECTION, this, arguments, var=var):
            var = Scope({'COLLECTION':COLLECTION, 'this':this, 'arguments':arguments}, var)
            var.registers(['COLLECTION'])
            @Js
            def PyJs_InlineNonPyName_302_(source, this, arguments, var=var):
                var = Scope({'source':source, 'this':this, 'arguments':arguments, 'from':PyJs_InlineNonPyName_302_}, var)
                var.registers(['mapFn', 'cb', 'n', 'A', 'source', 'mapping'])
                var.put('mapFn', var.get('arguments').get('1'))
                pass
                var.get('aFunction')(var.get(u"this"))
                var.put('mapping', PyJsStrictNeq(var.get('mapFn'),var.get('undefined')))
                if var.get('mapping'):
                    var.get('aFunction')(var.get('mapFn'))
                if (var.get('source')==var.get('undefined')):
                    return var.get(u"this").create()
                var.put('A', Js([]))
                if var.get('mapping'):
                    var.put('n', Js(0.0))
                    var.put('cb', var.get('ctx')(var.get('mapFn'), var.get('arguments').get('2'), Js(2.0)))
                    @Js
                    def PyJs_anonymous_303_(nextItem, this, arguments, var=var):
                        var = Scope({'nextItem':nextItem, 'this':this, 'arguments':arguments}, var)
                        var.registers(['nextItem'])
                        var.get('A').callprop('push', var.get('cb')(var.get('nextItem'), (var.put('n',Js(var.get('n').to_number())+Js(1))-Js(1))))
                    PyJs_anonymous_303_._set_name('anonymous')
                    var.get('forOf')(var.get('source'), Js(False), PyJs_anonymous_303_)
                else:
                    var.get('forOf')(var.get('source'), Js(False), var.get('A').get('push'), var.get('A'))
                return var.get(u"this").create(var.get('A'))
            PyJs_InlineNonPyName_302_._set_name('from')
            var.get('$export')(var.get('$export').get('S'), var.get('COLLECTION'), Js({'from':PyJs_InlineNonPyName_302_}))
        PyJs_anonymous_301_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_301_)
    PyJs_anonymous_300_._set_name('anonymous')
    @Js
    def PyJs_anonymous_304_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', '$export', 'exports'])
        Js('use strict')
        var.put('$export', var.get('require')(Js('./_export')))
        @Js
        def PyJs_anonymous_305_(COLLECTION, this, arguments, var=var):
            var = Scope({'COLLECTION':COLLECTION, 'this':this, 'arguments':arguments}, var)
            var.registers(['COLLECTION'])
            @Js
            def PyJs_of_306_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments, 'of':PyJs_of_306_}, var)
                var.registers(['length', 'A'])
                var.put('length', var.get('arguments').get('length'))
                var.put('A', var.get('Array').create(var.get('length')))
                while (var.put('length',Js(var.get('length').to_number())-Js(1))+Js(1)):
                    var.get('A').put(var.get('length'), var.get('arguments').get(var.get('length')))
                return var.get(u"this").create(var.get('A'))
            PyJs_of_306_._set_name('of')
            var.get('$export')(var.get('$export').get('S'), var.get('COLLECTION'), Js({'of':PyJs_of_306_}))
        PyJs_anonymous_305_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_305_)
    PyJs_anonymous_304_._set_name('anonymous')
    @Js
    def PyJs_anonymous_307_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'module', 'check', 'isObject', 'anObject'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        var.put('anObject', var.get('require')(Js('./_an-object')))
        @Js
        def PyJs_check_308_(O, proto, this, arguments, var=var):
            var = Scope({'O':O, 'proto':proto, 'this':this, 'arguments':arguments, 'check':PyJs_check_308_}, var)
            var.registers(['O', 'proto'])
            var.get('anObject')(var.get('O'))
            if (var.get('isObject')(var.get('proto')).neg() and PyJsStrictNeq(var.get('proto'),var.get(u"null"))):
                PyJsTempException = JsToPyException(var.get('TypeError')((var.get('proto')+Js(": can't set as prototype!"))))
                raise PyJsTempException
        PyJs_check_308_._set_name('check')
        var.put('check', PyJs_check_308_)
        @Js
        def PyJs_anonymous_309_(test, buggy, set, this, arguments, var=var):
            var = Scope({'test':test, 'buggy':buggy, 'set':set, 'this':this, 'arguments':arguments}, var)
            var.registers(['set', 'test', 'buggy'])
            try:
                var.put('set', var.get('require')(Js('./_ctx'))(var.get('Function').get('call'), var.get('require')(Js('./_object-gopd')).callprop('f', var.get('Object').get('prototype'), Js('__proto__')).get('set'), Js(2.0)))
                var.get('set')(var.get('test'), Js([]))
                var.put('buggy', var.get('test').instanceof(var.get('Array')).neg())
            except PyJsException as PyJsTempException:
                PyJsHolder_65_54108196 = var.own.get('e')
                var.force_own_put('e', PyExceptionToJs(PyJsTempException))
                try:
                    var.put('buggy', Js(True))
                finally:
                    if PyJsHolder_65_54108196 is not None:
                        var.own['e'] = PyJsHolder_65_54108196
                    else:
                        del var.own['e']
                    del PyJsHolder_65_54108196
            @Js
            def PyJs_setPrototypeOf_310_(O, proto, this, arguments, var=var):
                var = Scope({'O':O, 'proto':proto, 'this':this, 'arguments':arguments, 'setPrototypeOf':PyJs_setPrototypeOf_310_}, var)
                var.registers(['O', 'proto'])
                var.get('check')(var.get('O'), var.get('proto'))
                if var.get('buggy'):
                    var.get('O').put('__proto__', var.get('proto'))
                else:
                    var.get('set')(var.get('O'), var.get('proto'))
                return var.get('O')
            PyJs_setPrototypeOf_310_._set_name('setPrototypeOf')
            return PyJs_setPrototypeOf_310_
        PyJs_anonymous_309_._set_name('anonymous')
        var.get('module').put('exports', Js({'set':(var.get('Object').get('setPrototypeOf') or (PyJs_anonymous_309_(Js({}), Js(False)) if Js({}).contains(Js('__proto__')) else var.get('undefined'))),'check':var.get('check')}))
    PyJs_anonymous_307_._set_name('anonymous')
    @Js
    def PyJs_anonymous_311_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'SPECIES', 'DESCRIPTORS', 'exports', 'module', 'global', 'dP'])
        Js('use strict')
        var.put('global', var.get('require')(Js('./_global')))
        var.put('dP', var.get('require')(Js('./_object-dp')))
        var.put('DESCRIPTORS', var.get('require')(Js('./_descriptors')))
        var.put('SPECIES', var.get('require')(Js('./_wks'))(Js('species')))
        @Js
        def PyJs_anonymous_312_(KEY, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'this':this, 'arguments':arguments}, var)
            var.registers(['C', 'KEY'])
            var.put('C', var.get('global').get(var.get('KEY')))
            if ((var.get('DESCRIPTORS') and var.get('C')) and var.get('C').get(var.get('SPECIES')).neg()):
                @Js
                def PyJs_get_313_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments, 'get':PyJs_get_313_}, var)
                    var.registers([])
                    return var.get(u"this")
                PyJs_get_313_._set_name('get')
                var.get('dP').callprop('f', var.get('C'), var.get('SPECIES'), Js({'configurable':Js(True),'get':PyJs_get_313_}))
        PyJs_anonymous_312_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_312_)
    PyJs_anonymous_311_._set_name('anonymous')
    @Js
    def PyJs_anonymous_314_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'def', 'TAG', 'exports', 'module', 'has'])
        var.put('def', var.get('require')(Js('./_object-dp')).get('f'))
        var.put('has', var.get('require')(Js('./_has')))
        var.put('TAG', var.get('require')(Js('./_wks'))(Js('toStringTag')))
        @Js
        def PyJs_anonymous_315_(it, tag, stat, this, arguments, var=var):
            var = Scope({'it':it, 'tag':tag, 'stat':stat, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'tag', 'stat'])
            if (var.get('it') and var.get('has')(var.put('it', (var.get('it') if var.get('stat') else var.get('it').get('prototype'))), var.get('TAG')).neg()):
                var.get('def')(var.get('it'), var.get('TAG'), Js({'configurable':Js(True),'value':var.get('tag')}))
        PyJs_anonymous_315_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_315_)
    PyJs_anonymous_314_._set_name('anonymous')
    @Js
    def PyJs_anonymous_316_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'exports', 'shared', 'uid', 'module'])
        var.put('shared', var.get('require')(Js('./_shared'))(Js('keys')))
        var.put('uid', var.get('require')(Js('./_uid')))
        @Js
        def PyJs_anonymous_317_(key, this, arguments, var=var):
            var = Scope({'key':key, 'this':this, 'arguments':arguments}, var)
            var.registers(['key'])
            return (var.get('shared').get(var.get('key')) or var.get('shared').put(var.get('key'), var.get('uid')(var.get('key'))))
        PyJs_anonymous_317_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_317_)
    PyJs_anonymous_316_._set_name('anonymous')
    @Js
    def PyJs_anonymous_318_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['core', 'require', 'SHARED', 'exports', 'store', 'module', 'global'])
        var.put('core', var.get('require')(Js('./_core')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('SHARED', Js('__core-js_shared__'))
        var.put('store', (var.get('global').get(var.get('SHARED')) or var.get('global').put(var.get('SHARED'), Js({}))))
        @Js
        def PyJs_anonymous_319_(key, value, this, arguments, var=var):
            var = Scope({'key':key, 'value':value, 'this':this, 'arguments':arguments}, var)
            var.registers(['value', 'key'])
            return (var.get('store').get(var.get('key')) or var.get('store').put(var.get('key'), (var.get('value') if PyJsStrictNeq(var.get('value'),var.get('undefined')) else Js({}))))
        PyJs_anonymous_319_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_319_)(Js('versions'), Js([])).callprop('push', Js({'version':var.get('core').get('version'),'mode':(Js('pure') if var.get('require')(Js('./_library')) else Js('global')),'copyright':Js('© 2020 Denis Pushkarev (zloirock.ru)')}))
    PyJs_anonymous_318_._set_name('anonymous')
    @Js
    def PyJs_anonymous_320_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['aFunction', 'require', 'SPECIES', 'exports', 'module', 'anObject'])
        var.put('anObject', var.get('require')(Js('./_an-object')))
        var.put('aFunction', var.get('require')(Js('./_a-function')))
        var.put('SPECIES', var.get('require')(Js('./_wks'))(Js('species')))
        @Js
        def PyJs_anonymous_321_(O, D, this, arguments, var=var):
            var = Scope({'O':O, 'D':D, 'this':this, 'arguments':arguments}, var)
            var.registers(['O', 'C', 'D', 'S'])
            var.put('C', var.get('anObject')(var.get('O')).get('constructor'))
            pass
            return (var.get('D') if (PyJsStrictEq(var.get('C'),var.get('undefined')) or (var.put('S', var.get('anObject')(var.get('C')).get(var.get('SPECIES')))==var.get('undefined'))) else var.get('aFunction')(var.get('S')))
        PyJs_anonymous_321_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_321_)
    PyJs_anonymous_320_._set_name('anonymous')
    @Js
    def PyJs_anonymous_322_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['fails', 'module', 'require', 'exports'])
        Js('use strict')
        var.put('fails', var.get('require')(Js('./_fails')))
        @Js
        def PyJs_anonymous_323_(method, arg, this, arguments, var=var):
            var = Scope({'method':method, 'arg':arg, 'this':this, 'arguments':arguments}, var)
            var.registers(['arg', 'method'])
            @Js
            def PyJs_anonymous_324_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                @Js
                def PyJs_anonymous_325_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    pass
                PyJs_anonymous_325_._set_name('anonymous')
                (var.get('method').callprop('call', var.get(u"null"), PyJs_anonymous_325_, Js(1.0)) if var.get('arg') else var.get('method').callprop('call', var.get(u"null")))
            PyJs_anonymous_324_._set_name('anonymous')
            return (var.get('method').neg().neg() and var.get('fails')(PyJs_anonymous_324_))
        PyJs_anonymous_323_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_323_)
    PyJs_anonymous_322_._set_name('anonymous')
    @Js
    def PyJs_anonymous_326_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'defined', 'exports', 'module', 'toInteger'])
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_327_(TO_STRING, this, arguments, var=var):
            var = Scope({'TO_STRING':TO_STRING, 'this':this, 'arguments':arguments}, var)
            var.registers(['TO_STRING'])
            @Js
            def PyJs_anonymous_328_(that, pos, this, arguments, var=var):
                var = Scope({'that':that, 'pos':pos, 'this':this, 'arguments':arguments}, var)
                var.registers(['pos', 'i', 'that', 'a', 'b', 's', 'l'])
                var.put('s', var.get('String')(var.get('defined')(var.get('that'))))
                var.put('i', var.get('toInteger')(var.get('pos')))
                var.put('l', var.get('s').get('length'))
                pass
                if ((var.get('i')<Js(0.0)) or (var.get('i')>=var.get('l'))):
                    return (Js('') if var.get('TO_STRING') else var.get('undefined'))
                var.put('a', var.get('s').callprop('charCodeAt', var.get('i')))
                def PyJs_LONG_329_(var=var):
                    return ((var.get('s').callprop('charAt', var.get('i')) if var.get('TO_STRING') else var.get('a')) if (((((var.get('a')<Js(55296)) or (var.get('a')>Js(56319))) or PyJsStrictEq((var.get('i')+Js(1.0)),var.get('l'))) or (var.put('b', var.get('s').callprop('charCodeAt', (var.get('i')+Js(1.0))))<Js(56320))) or (var.get('b')>Js(57343))) else (var.get('s').callprop('slice', var.get('i'), (var.get('i')+Js(2.0))) if var.get('TO_STRING') else ((((var.get('a')-Js(55296))<<Js(10.0))+(var.get('b')-Js(56320)))+Js(65536))))
                return PyJs_LONG_329_()
            PyJs_anonymous_328_._set_name('anonymous')
            return PyJs_anonymous_328_
        PyJs_anonymous_327_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_327_)
    PyJs_anonymous_326_._set_name('anonymous')
    @Js
    def PyJs_anonymous_330_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'defined', 'isRegExp', 'exports', 'module'])
        var.put('isRegExp', var.get('require')(Js('./_is-regexp')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_331_(that, searchString, NAME, this, arguments, var=var):
            var = Scope({'that':that, 'searchString':searchString, 'NAME':NAME, 'this':this, 'arguments':arguments}, var)
            var.registers(['NAME', 'searchString', 'that'])
            if var.get('isRegExp')(var.get('searchString')):
                PyJsTempException = JsToPyException(var.get('TypeError')(((Js('String#')+var.get('NAME'))+Js(" doesn't accept regex!"))))
                raise PyJsTempException
            return var.get('String')(var.get('defined')(var.get('that')))
        PyJs_anonymous_331_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_331_)
    PyJs_anonymous_330_._set_name('anonymous')
    @Js
    def PyJs_anonymous_332_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'defined', 'createHTML', '$export', 'exports', 'module', 'quot', 'fails'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('defined', var.get('require')(Js('./_defined')))
        var.put('quot', JsRegExp('/"/g'))
        @Js
        def PyJs_createHTML_333_(string, tag, attribute, value, this, arguments, var=var):
            var = Scope({'string':string, 'tag':tag, 'attribute':attribute, 'value':value, 'this':this, 'arguments':arguments, 'createHTML':PyJs_createHTML_333_}, var)
            var.registers(['string', 'p1', 'attribute', 'value', 'tag', 'S'])
            var.put('S', var.get('String')(var.get('defined')(var.get('string'))))
            var.put('p1', (Js('<')+var.get('tag')))
            if PyJsStrictNeq(var.get('attribute'),Js('')):
                var.put('p1', ((((Js(' ')+var.get('attribute'))+Js('="'))+var.get('String')(var.get('value')).callprop('replace', var.get('quot'), Js('&quot;')))+Js('"')), '+')
            return (((((var.get('p1')+Js('>'))+var.get('S'))+Js('</'))+var.get('tag'))+Js('>'))
        PyJs_createHTML_333_._set_name('createHTML')
        var.put('createHTML', PyJs_createHTML_333_)
        @Js
        def PyJs_anonymous_334_(NAME, exec, this, arguments, var=var):
            var = Scope({'NAME':NAME, 'exec':exec, 'this':this, 'arguments':arguments}, var)
            var.registers(['NAME', 'O', 'exec'])
            var.put('O', Js({}))
            var.get('O').put(var.get('NAME'), var.get('exec')(var.get('createHTML')))
            @Js
            def PyJs_anonymous_335_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers(['test'])
                var.put('test', Js('').callprop(var.get('NAME'), Js('"')))
                return (PyJsStrictNeq(var.get('test'),var.get('test').callprop('toLowerCase')) or (var.get('test').callprop('split', Js('"')).get('length')>Js(3.0)))
            PyJs_anonymous_335_._set_name('anonymous')
            var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('fails')(PyJs_anonymous_335_))), Js('String'), var.get('O'))
        PyJs_anonymous_334_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_334_)
    PyJs_anonymous_332_._set_name('anonymous')
    @Js
    def PyJs_anonymous_336_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'defined', 'toLength', 'exports', 'module', 'repeat'])
        var.put('toLength', var.get('require')(Js('./_to-length')))
        var.put('repeat', var.get('require')(Js('./_string-repeat')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_337_(that, maxLength, fillString, left, this, arguments, var=var):
            var = Scope({'that':that, 'maxLength':maxLength, 'fillString':fillString, 'left':left, 'this':this, 'arguments':arguments}, var)
            var.registers(['intMaxLength', 'fillString', 'fillStr', 'left', 'that', 'stringLength', 'maxLength', 'fillLen', 'stringFiller', 'S'])
            var.put('S', var.get('String')(var.get('defined')(var.get('that'))))
            var.put('stringLength', var.get('S').get('length'))
            var.put('fillStr', (Js(' ') if PyJsStrictEq(var.get('fillString'),var.get('undefined')) else var.get('String')(var.get('fillString'))))
            var.put('intMaxLength', var.get('toLength')(var.get('maxLength')))
            if ((var.get('intMaxLength')<=var.get('stringLength')) or (var.get('fillStr')==Js(''))):
                return var.get('S')
            var.put('fillLen', (var.get('intMaxLength')-var.get('stringLength')))
            var.put('stringFiller', var.get('repeat').callprop('call', var.get('fillStr'), var.get('Math').callprop('ceil', (var.get('fillLen')/var.get('fillStr').get('length')))))
            if (var.get('stringFiller').get('length')>var.get('fillLen')):
                var.put('stringFiller', var.get('stringFiller').callprop('slice', Js(0.0), var.get('fillLen')))
            return ((var.get('stringFiller')+var.get('S')) if var.get('left') else (var.get('S')+var.get('stringFiller')))
        PyJs_anonymous_337_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_337_)
    PyJs_anonymous_336_._set_name('anonymous')
    @Js
    def PyJs_anonymous_338_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'defined', 'exports', 'module', 'toInteger'])
        Js('use strict')
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_repeat_339_(count, this, arguments, var=var):
            var = Scope({'count':count, 'this':this, 'arguments':arguments, 'repeat':PyJs_repeat_339_}, var)
            var.registers(['str', 'count', 'n', 'res'])
            var.put('str', var.get('String')(var.get('defined')(var.get(u"this"))))
            var.put('res', Js(''))
            var.put('n', var.get('toInteger')(var.get('count')))
            if ((var.get('n')<Js(0.0)) or (var.get('n')==var.get('Infinity'))):
                PyJsTempException = JsToPyException(var.get('RangeError')(Js("Count can't be negative")))
                raise PyJsTempException
            #for JS loop
            
            while (var.get('n')>Js(0.0)):
                try:
                    if (var.get('n')&Js(1.0)):
                        var.put('res', var.get('str'), '+')
                finally:
                        (var.put('n', Js(1.0), '>>>') and var.put('str', var.get('str'), '+'))
            return var.get('res')
        PyJs_repeat_339_._set_name('repeat')
        var.get('module').put('exports', PyJs_repeat_339_)
    PyJs_anonymous_338_._set_name('anonymous')
    @Js
    def PyJs_anonymous_340_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['rtrim', 'non', 'defined', 'require', 'spaces', 'ltrim', 'exporter', '$export', 'exports', 'module', 'fails', 'space', 'trim'])
        var.put('$export', var.get('require')(Js('./_export')))
        var.put('defined', var.get('require')(Js('./_defined')))
        var.put('fails', var.get('require')(Js('./_fails')))
        var.put('spaces', var.get('require')(Js('./_string-ws')))
        var.put('space', ((Js('[')+var.get('spaces'))+Js(']')))
        var.put('non', Js('\u200b\x85'))
        var.put('ltrim', var.get('RegExp')((((Js('^')+var.get('space'))+var.get('space'))+Js('*'))))
        var.put('rtrim', var.get('RegExp')(((var.get('space')+var.get('space'))+Js('*$'))))
        @Js
        def PyJs_exporter_341_(KEY, exec, ALIAS, this, arguments, var=var):
            var = Scope({'KEY':KEY, 'exec':exec, 'ALIAS':ALIAS, 'this':this, 'arguments':arguments, 'exporter':PyJs_exporter_341_}, var)
            var.registers(['KEY', 'ALIAS', 'fn', 'FORCE', 'exec', 'exp'])
            var.put('exp', Js({}))
            @Js
            def PyJs_anonymous_342_(this, arguments, var=var):
                var = Scope({'this':this, 'arguments':arguments}, var)
                var.registers([])
                return (var.get('spaces').callprop(var.get('KEY')).neg().neg() or (var.get('non').callprop(var.get('KEY'))!=var.get('non')))
            PyJs_anonymous_342_._set_name('anonymous')
            var.put('FORCE', var.get('fails')(PyJs_anonymous_342_))
            var.put('fn', var.get('exp').put(var.get('KEY'), (var.get('exec')(var.get('trim')) if var.get('FORCE') else var.get('spaces').get(var.get('KEY')))))
            if var.get('ALIAS'):
                var.get('exp').put(var.get('ALIAS'), var.get('fn'))
            var.get('$export')((var.get('$export').get('P')+(var.get('$export').get('F')*var.get('FORCE'))), Js('String'), var.get('exp'))
        PyJs_exporter_341_._set_name('exporter')
        var.put('exporter', PyJs_exporter_341_)
        @Js
        def PyJs_anonymous_343_(string, TYPE, this, arguments, var=var):
            var = Scope({'string':string, 'TYPE':TYPE, 'this':this, 'arguments':arguments}, var)
            var.registers(['TYPE', 'string'])
            var.put('string', var.get('String')(var.get('defined')(var.get('string'))))
            if (var.get('TYPE')&Js(1.0)):
                var.put('string', var.get('string').callprop('replace', var.get('ltrim'), Js('')))
            if (var.get('TYPE')&Js(2.0)):
                var.put('string', var.get('string').callprop('replace', var.get('rtrim'), Js('')))
            return var.get('string')
        PyJs_anonymous_343_._set_name('anonymous')
        var.put('trim', var.get('exporter').put('trim', PyJs_anonymous_343_))
        var.get('module').put('exports', var.get('exporter'))
    PyJs_anonymous_340_._set_name('anonymous')
    @Js
    def PyJs_anonymous_344_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'module', 'exports'])
        var.get('module').put('exports', (Js('\t\n\x0b\x0c\r \xa0\u1680\u180e\u2000\u2001\u2002\u2003')+Js('\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029\ufeff')))
    PyJs_anonymous_344_._set_name('anonymous')
    @Js
    def PyJs_anonymous_345_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['clearTask', 'Dispatch', 'defer', 'port', 'process', 'invoke', 'require', 'ONREADYSTATECHANGE', 'setTask', 'cel', 'counter', 'module', 'run', 'channel', 'global', 'html', 'MessageChannel', 'exports', 'queue', 'listener', 'ctx'])
        var.put('ctx', var.get('require')(Js('./_ctx')))
        var.put('invoke', var.get('require')(Js('./_invoke')))
        var.put('html', var.get('require')(Js('./_html')))
        var.put('cel', var.get('require')(Js('./_dom-create')))
        var.put('global', var.get('require')(Js('./_global')))
        var.put('process', var.get('global').get('process'))
        var.put('setTask', var.get('global').get('setImmediate'))
        var.put('clearTask', var.get('global').get('clearImmediate'))
        var.put('MessageChannel', var.get('global').get('MessageChannel'))
        var.put('Dispatch', var.get('global').get('Dispatch'))
        var.put('counter', Js(0.0))
        var.put('queue', Js({}))
        var.put('ONREADYSTATECHANGE', Js('onreadystatechange'))
        pass
        @Js
        def PyJs_run_346_(this, arguments, var=var):
            var = Scope({'this':this, 'arguments':arguments, 'run':PyJs_run_346_}, var)
            var.registers(['fn', 'id'])
            var.put('id', (+var.get(u"this")))
            if var.get('queue').callprop('hasOwnProperty', var.get('id')):
                var.put('fn', var.get('queue').get(var.get('id')))
                var.get('queue').delete(var.get('id'))
                var.get('fn')()
        PyJs_run_346_._set_name('run')
        var.put('run', PyJs_run_346_)
        @Js
        def PyJs_listener_347_(event, this, arguments, var=var):
            var = Scope({'event':event, 'this':this, 'arguments':arguments, 'listener':PyJs_listener_347_}, var)
            var.registers(['event'])
            var.get('run').callprop('call', var.get('event').get('data'))
        PyJs_listener_347_._set_name('listener')
        var.put('listener', PyJs_listener_347_)
        if (var.get('setTask').neg() or var.get('clearTask').neg()):
            @Js
            def PyJs_setImmediate_348_(fn, this, arguments, var=var):
                var = Scope({'fn':fn, 'this':this, 'arguments':arguments, 'setImmediate':PyJs_setImmediate_348_}, var)
                var.registers(['i', 'fn', 'args'])
                var.put('args', Js([]))
                var.put('i', Js(1.0))
                while (var.get('arguments').get('length')>var.get('i')):
                    var.get('args').callprop('push', var.get('arguments').get((var.put('i',Js(var.get('i').to_number())+Js(1))-Js(1))))
                @Js
                def PyJs_anonymous_349_(this, arguments, var=var):
                    var = Scope({'this':this, 'arguments':arguments}, var)
                    var.registers([])
                    var.get('invoke')((var.get('fn') if (var.get('fn',throw=False).typeof()==Js('function')) else var.get('Function')(var.get('fn'))), var.get('args'))
                PyJs_anonymous_349_._set_name('anonymous')
                var.get('queue').put(var.put('counter',Js(var.get('counter').to_number())+Js(1)), PyJs_anonymous_349_)
                var.get('defer')(var.get('counter'))
                return var.get('counter')
            PyJs_setImmediate_348_._set_name('setImmediate')
            var.put('setTask', PyJs_setImmediate_348_)
            @Js
            def PyJs_clearImmediate_350_(id, this, arguments, var=var):
                var = Scope({'id':id, 'this':this, 'arguments':arguments, 'clearImmediate':PyJs_clearImmediate_350_}, var)
                var.registers(['id'])
                var.get('queue').delete(var.get('id'))
            PyJs_clearImmediate_350_._set_name('clearImmediate')
            var.put('clearTask', PyJs_clearImmediate_350_)
            if (var.get('require')(Js('./_cof'))(var.get('process'))==Js('process')):
                @Js
                def PyJs_defer_351_(id, this, arguments, var=var):
                    var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_351_}, var)
                    var.registers(['id'])
                    var.get('process').callprop('nextTick', var.get('ctx')(var.get('run'), var.get('id'), Js(1.0)))
                PyJs_defer_351_._set_name('defer')
                var.put('defer', PyJs_defer_351_)
            else:
                if (var.get('Dispatch') and var.get('Dispatch').get('now')):
                    @Js
                    def PyJs_defer_352_(id, this, arguments, var=var):
                        var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_352_}, var)
                        var.registers(['id'])
                        var.get('Dispatch').callprop('now', var.get('ctx')(var.get('run'), var.get('id'), Js(1.0)))
                    PyJs_defer_352_._set_name('defer')
                    var.put('defer', PyJs_defer_352_)
                else:
                    if var.get('MessageChannel'):
                        var.put('channel', var.get('MessageChannel').create())
                        var.put('port', var.get('channel').get('port2'))
                        var.get('channel').get('port1').put('onmessage', var.get('listener'))
                        var.put('defer', var.get('ctx')(var.get('port').get('postMessage'), var.get('port'), Js(1.0)))
                    else:
                        if ((var.get('global').get('addEventListener') and (var.get('postMessage',throw=False).typeof()==Js('function'))) and var.get('global').get('importScripts').neg()):
                            @Js
                            def PyJs_defer_353_(id, this, arguments, var=var):
                                var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_353_}, var)
                                var.registers(['id'])
                                var.get('global').callprop('postMessage', (var.get('id')+Js('')), Js('*'))
                            PyJs_defer_353_._set_name('defer')
                            var.put('defer', PyJs_defer_353_)
                            var.get('global').callprop('addEventListener', Js('message'), var.get('listener'), Js(False))
                        else:
                            if var.get('cel')(Js('script')).contains(var.get('ONREADYSTATECHANGE')):
                                @Js
                                def PyJs_defer_354_(id, this, arguments, var=var):
                                    var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_354_}, var)
                                    var.registers(['id'])
                                    @Js
                                    def PyJs_anonymous_355_(this, arguments, var=var):
                                        var = Scope({'this':this, 'arguments':arguments}, var)
                                        var.registers([])
                                        var.get('html').callprop('removeChild', var.get(u"this"))
                                        var.get('run').callprop('call', var.get('id'))
                                    PyJs_anonymous_355_._set_name('anonymous')
                                    var.get('html').callprop('appendChild', var.get('cel')(Js('script'))).put(var.get('ONREADYSTATECHANGE'), PyJs_anonymous_355_)
                                PyJs_defer_354_._set_name('defer')
                                var.put('defer', PyJs_defer_354_)
                            else:
                                @Js
                                def PyJs_defer_356_(id, this, arguments, var=var):
                                    var = Scope({'id':id, 'this':this, 'arguments':arguments, 'defer':PyJs_defer_356_}, var)
                                    var.registers(['id'])
                                    var.get('setTimeout')(var.get('ctx')(var.get('run'), var.get('id'), Js(1.0)), Js(0.0))
                                PyJs_defer_356_._set_name('defer')
                                var.put('defer', PyJs_defer_356_)
        var.get('module').put('exports', Js({'set':var.get('setTask'),'clear':var.get('clearTask')}))
    PyJs_anonymous_345_._set_name('anonymous')
    @Js
    def PyJs_anonymous_357_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'max', 'min', 'exports', 'module', 'toInteger'])
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('max', var.get('Math').get('max'))
        var.put('min', var.get('Math').get('min'))
        @Js
        def PyJs_anonymous_358_(index, length, this, arguments, var=var):
            var = Scope({'index':index, 'length':length, 'this':this, 'arguments':arguments}, var)
            var.registers(['index', 'length'])
            var.put('index', var.get('toInteger')(var.get('index')))
            return (var.get('max')((var.get('index')+var.get('length')), Js(0.0)) if (var.get('index')<Js(0.0)) else var.get('min')(var.get('index'), var.get('length')))
        PyJs_anonymous_358_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_358_)
    PyJs_anonymous_357_._set_name('anonymous')
    @Js
    def PyJs_anonymous_359_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'toLength', 'exports', 'module', 'toInteger'])
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('toLength', var.get('require')(Js('./_to-length')))
        @Js
        def PyJs_anonymous_360_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['length', 'it', 'number'])
            if PyJsStrictEq(var.get('it'),var.get('undefined')):
                return Js(0.0)
            var.put('number', var.get('toInteger')(var.get('it')))
            var.put('length', var.get('toLength')(var.get('number')))
            if PyJsStrictNeq(var.get('number'),var.get('length')):
                PyJsTempException = JsToPyException(var.get('RangeError')(Js('Wrong length!')))
                raise PyJsTempException
            return var.get('length')
        PyJs_anonymous_360_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_360_)
    PyJs_anonymous_359_._set_name('anonymous')
    @Js
    def PyJs_anonymous_361_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'floor', 'exports', 'ceil', 'module'])
        var.put('ceil', var.get('Math').get('ceil'))
        var.put('floor', var.get('Math').get('floor'))
        @Js
        def PyJs_anonymous_362_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (Js(0.0) if var.get('isNaN')(var.put('it', (+var.get('it')))) else (var.get('floor') if (var.get('it')>Js(0.0)) else var.get('ceil'))(var.get('it')))
        PyJs_anonymous_362_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_362_)
    PyJs_anonymous_361_._set_name('anonymous')
    @Js
    def PyJs_anonymous_363_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'defined', 'exports', 'module', 'IObject'])
        var.put('IObject', var.get('require')(Js('./_iobject')))
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_364_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('IObject')(var.get('defined')(var.get('it')))
        PyJs_anonymous_364_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_364_)
    PyJs_anonymous_363_._set_name('anonymous')
    @Js
    def PyJs_anonymous_365_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'min', 'exports', 'module', 'toInteger'])
        var.put('toInteger', var.get('require')(Js('./_to-integer')))
        var.put('min', var.get('Math').get('min'))
        @Js
        def PyJs_anonymous_366_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return (var.get('min')(var.get('toInteger')(var.get('it')), Js(9007199254740991)) if (var.get('it')>Js(0.0)) else Js(0.0))
        PyJs_anonymous_366_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_366_)
    PyJs_anonymous_365_._set_name('anonymous')
    @Js
    def PyJs_anonymous_367_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'defined', 'module', 'exports'])
        var.put('defined', var.get('require')(Js('./_defined')))
        @Js
        def PyJs_anonymous_368_(it, this, arguments, var=var):
            var = Scope({'it':it, 'this':this, 'arguments':arguments}, var)
            var.registers(['it'])
            return var.get('Object')(var.get('defined')(var.get('it')))
        PyJs_anonymous_368_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_368_)
    PyJs_anonymous_367_._set_name('anonymous')
    @Js
    def PyJs_anonymous_369_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['require', 'isObject', 'module', 'exports'])
        var.put('isObject', var.get('require')(Js('./_is-object')))
        @Js
        def PyJs_anonymous_370_(it, S, this, arguments, var=var):
            var = Scope({'it':it, 'S':S, 'this':this, 'arguments':arguments}, var)
            var.registers(['it', 'fn', 'val', 'S'])
            if var.get('isObject')(var.get('it')).neg():
                return var.get('it')
            pass
            if ((var.get('S') and (var.put('fn', var.get('it').get('toString')).typeof()==Js('function'))) and var.get('isObject')(var.put('val', var.get('fn').callprop('call', var.get('it')))).neg()):
                return var.get('val')
            if ((var.put('fn', var.get('it').get('valueOf')).typeof()==Js('function')) and var.get('isObject')(var.put('val', var.get('fn').callprop('call', var.get('it')))).neg()):
                return var.get('val')
            if ((var.get('S').neg() and (var.put('fn', var.get('it').get('toString')).typeof()==Js('function'))) and var.get('isObject')(var.put('val', var.get('fn').callprop('call', var.get('it')))).neg()):
                return var.get('val')
            PyJsTempException = JsToPyException(var.get('TypeError')(Js("Can't convert object to primitive value")))
            raise PyJsTempException
        PyJs_anonymous_370_._set_name('anonymous')
        var.get('module').put('exports', PyJs_anonymous_370_)
    PyJs_anonymous_369_._set_name('anonymous')
    @Js
    def PyJs_anonymous_371_(require, module, exports, this, arguments, var=var):
        var = Scope({'require':require, 'module':module, 'exports':exports, 'this':this, 'arguments':arguments}, var)
        var.registers(['dP', 'toInteger', 'arrayFindIndex', 'arrayReduce', 'TYPED_ARRAY', 'gOPN', 'createArrayIncludes', 'VIEW', 'arrayForEach', 'arrayToLocaleString', '$map', 'toPrimitive', 'arraySome', 'toObject', 'arrayEvery', 'ArrayIterators', '$from', 'arrayFilter', 'gOPD', '$setDesc', 'TYPED_CONSTRUCTOR', 'WRONG_LENGTH', 'arrayJoin', 'isObject', '$GOPD', 'addGetter', 'getIterFn', 'arraySlice', 'ITERATOR', 'toIndex', 'wks', 'ArrayProto', 'propertyDesc', 'speciesConstructor', 'DEF_CONSTRUCTOR', 'arrayToString', 'require', 'arrayFind', 'TO_LOCALE_BUG', 'createArrayMethod', 'module', 'global', 'arrayIncludes', 'PROTOTYPE', 'anInstance', 'toAbsoluteIndex', 'arrayCopyWithin', 'exports', 'Iterators', 'ctx', '$getDesc', '$buffer', '$toLocaleString', 'toLength', 'RangeError', 'uid', 'FORCED_SET', 'classof', 'allocate', '$of', '$slice', 'fails', 'arraySort', 'ALL_CONSTRUCTORS', 'arrayIndexOf', '$ArrayBuffer', 'TypeError', 'ARRAY_BUFFER', 'LITTLE_ENDIAN', '$iterators', 'has', '$iterDetect', 'hide', 'proto', 'arrayReduceRight', 'TAG', '$set', '$TypedArrayPrototype$', 'setSpecies', 'toOffset', 'arrayKeys', 'arrayValues', 'fromList', 'isTAIndex', 'LIBRARY', 'speciesFromList', 'validate', 'isArrayIter', 'arrayEntries', '$typed', 'SHARED_BUFFER', 'BYTES_PER_ELEMENT', '$DataView', 'getPrototypeOf', 'create', 'arrayLastIndexOf', 'Uint8Array', '$DP', 'redefineAll', 'arrayFill', '$export'])
        Js('use strict')
        if var.get('require')(Js('./_descriptors')):
            var.put('LIBRARY', var.get('require')(Js('./_library')))
            var.put('global', var.get('require')(Js('./_global')))
            var.put('fails', var.get('require')(Js('./_fails')))
            var.put('$export', var.get('require')(Js('./_export')))
            var.put('$typed', var.get('require')(Js('./_typed')))
            var.put('$buffer', var.get('require')(Js('./_typed-buffer')))
            var.put('ctx', var.get('require')(Js('./_c