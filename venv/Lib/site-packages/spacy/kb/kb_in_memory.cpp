/* Generated by Cython 3.1.1 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "C:\\Users\\runneradmin\\AppData\\Local\\Temp\\pip-build-env-1xodcuc8\\overlay\\Lib\\site-packages\\numpy\\_core\\include\\numpy\\arrayobject.h",
            "C:\\Users\\runneradmin\\AppData\\Local\\Temp\\pip-build-env-1xodcuc8\\overlay\\Lib\\site-packages\\numpy\\_core\\include\\numpy\\arrayscalars.h",
            "C:\\Users\\runneradmin\\AppData\\Local\\Temp\\pip-build-env-1xodcuc8\\overlay\\Lib\\site-packages\\numpy\\_core\\include\\numpy\\ndarrayobject.h",
            "C:\\Users\\runneradmin\\AppData\\Local\\Temp\\pip-build-env-1xodcuc8\\overlay\\Lib\\site-packages\\numpy\\_core\\include\\numpy\\ndarraytypes.h",
            "C:\\Users\\runneradmin\\AppData\\Local\\Temp\\pip-build-env-1xodcuc8\\overlay\\Lib\\site-packages\\numpy\\_core\\include\\numpy\\ufuncobject.h",
            "C:\\Users\\runneradmin\\AppData\\Local\\pypa\\cibuildwheel\\Cache\\nuget-cpython\\python.3.13.0\\tools\\Include\\Python.h"
        ],
        "extra_compile_args": [
            "-std=c++11"
        ],
        "include_dirs": [
            "C:\\Users\\runneradmin\\AppData\\Local\\Temp\\pip-build-env-1xodcuc8\\overlay\\Lib\\site-packages\\numpy\\_core\\include",
            "C:\\Users\\runneradmin\\AppData\\Local\\pypa\\cibuildwheel\\Cache\\nuget-cpython\\python.3.13.0\\tools\\Include"
        ],
        "language": "c++",
        "name": "spacy.kb.kb_in_memory",
        "sources": [
            "spacy/kb/kb_in_memory.pyx"
        ]
    },
    "module_name": "spacy.kb.kb_in_memory"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
/* InitLimitedAPI */
#if defined(Py_LIMITED_API) && !defined(CYTHON_LIMITED_API)
  #define CYTHON_LIMITED_API 1
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x03080000
    #error Cython requires Python 3.8+.
#else
#define __PYX_ABI_VERSION "3_1_1"
#define CYTHON_HEX_VERSION 0x030101F0
#define CYTHON_FUTURE_DIVISION 0
/* CModulePreamble */
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_ASSUME_SAFE_SIZE
  #define CYTHON_ASSUME_SAFE_SIZE 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_AM_SEND
  #define CYTHON_USE_AM_SEND 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 1
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 1
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #ifndef CYTHON_ASSUME_SAFE_SIZE
    #define CYTHON_ASSUME_SAFE_SIZE 1
  #endif
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PYPY_VERSION_NUM >= 0x07030C00)
  #endif
  #undef CYTHON_USE_AM_SEND
  #define CYTHON_USE_AM_SEND 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_NUM >= 0x07031100)
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_ASSUME_SAFE_SIZE
  #define CYTHON_ASSUME_SAFE_SIZE 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #ifndef CYTHON_USE_AM_SEND
    #define CYTHON_USE_AM_SEND (__PYX_LIMITED_VERSION_HEX >= 0x030A0000)
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #ifdef Py_GIL_DISABLED
    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 1
  #else
    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #endif
  #if PY_VERSION_HEX < 0x030A0000
    #undef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #elif !defined(CYTHON_USE_TYPE_SLOTS)
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLIST_INTERNALS)
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #elif !defined(CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS)
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_ASSUME_SAFE_SIZE
    #define CYTHON_ASSUME_SAFE_SIZE 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL 0
  #elif !defined(CYTHON_FAST_GIL)
    #define CYTHON_FAST_GIL (PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_SYS_MONITORING
    #define CYTHON_USE_SYS_MONITORING (PY_VERSION_HEX >= 0x030d00B1)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #ifndef CYTHON_USE_AM_SEND
    #define CYTHON_USE_AM_SEND 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5 && !CYTHON_USE_MODULE_STATE)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS (!CYTHON_COMPILING_IN_CPYTHON_FREETHREADING)
  #endif
#endif
#ifndef CYTHON_FAST_PYCCALL
#define CYTHON_FAST_PYCCALL  CYTHON_FAST_PYCALL
#endif
#ifndef CYTHON_VECTORCALL
#if CYTHON_COMPILING_IN_LIMITED_API
#define CYTHON_VECTORCALL  (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)
#else
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifndef Py_UNREACHABLE
  #define Py_UNREACHABLE()  assert(0); abort()
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

/* CppInitCode */
#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

/* PythonCompatibility */
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#define __Pyx_BUILTIN_MODULE_NAME "builtins"
#define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    #ifndef CO_OPTIMIZED
    static int CO_OPTIMIZED;
    #endif
    #ifndef CO_NEWLOCALS
    static int CO_NEWLOCALS;
    #endif
    #ifndef CO_VARARGS
    static int CO_VARARGS;
    #endif
    #ifndef CO_VARKEYWORDS
    static int CO_VARKEYWORDS;
    #endif
    #ifndef CO_ASYNC_GENERATOR
    static int CO_ASYNC_GENERATOR;
    #endif
    #ifndef CO_GENERATOR
    static int CO_GENERATOR;
    #endif
    #ifndef CO_COROUTINE
    static int CO_COROUTINE;
    #endif
#else
    #ifndef CO_COROUTINE
      #define CO_COROUTINE 0x80
    #endif
    #ifndef CO_ASYNC_GENERATOR
      #define CO_ASYNC_GENERATOR 0x200
    #endif
#endif
static int __Pyx_init_co_variables(void);
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#ifndef METH_FASTCALL
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_VERSION_HEX >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void (*cfunc)(void)) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x03090000
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#elif CYTHON_COMPILING_IN_GRAAL
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) _PyFrame_SetLineNumber((frame), (lineno))
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#endif
#if CYTHON_USE_MODULE_STATE
static CYTHON_INLINE void *__Pyx__PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#define __Pyx_PyModule_GetState(o) (__pyx_mstatetype *)__Pyx__PyModule_GetState(o)
#else
#define __Pyx_PyModule_GetState(op) ((void)op,__pyx_mstate_global)
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE((PyObject *) obj), name, func_ctype)
#define __Pyx_PyObject_TryGetSlot(obj, name, func_ctype) __Pyx_PyType_TryGetSlot(Py_TYPE(obj), name, func_ctype)
#define __Pyx_PyObject_GetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_GetSubSlot(Py_TYPE(obj), sub, name, func_ctype)
#define __Pyx_PyObject_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSubSlot(Py_TYPE(obj), sub, name, func_ctype)
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype) __Pyx_PyType_GetSlot(type, name, func_ctype)
  #define __Pyx_PyType_GetSubSlot(type, sub, name, func_ctype) (((type)->sub) ? ((type)->sub->name) : NULL)
  #define __Pyx_PyType_TryGetSubSlot(type, sub, name, func_ctype) __Pyx_PyType_GetSubSlot(type, sub, name, func_ctype)
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype)\
    ((__PYX_LIMITED_VERSION_HEX >= 0x030A0000 ||\
     (PyType_GetFlags(type) & Py_TPFLAGS_HEAPTYPE) || __Pyx_get_runtime_version() >= 0x030A0000) ?\
     __Pyx_PyType_GetSlot(type, name, func_ctype) : NULL)
  #define __Pyx_PyType_GetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_GetSlot(obj, name, func_ctype)
  #define __Pyx_PyType_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSlot(obj, name, func_ctype)
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
#define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif !CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
#endif
#define __Pyx_PyObject_GetIterNextFunc(iterator)  __Pyx_PyObject_GetSlot(iterator, tp_iternext, iternextfunc)
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#else
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains)
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS || !CYTHON_ASSUME_SAFE_MACROS
  #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    #define __Pyx_PyList_GetItemRef(o, i) PyList_GetItemRef(o, i)
  #else
    #define __Pyx_PyList_GetItemRef(o, i) PySequence_GetItem(o, i)
  #endif
#else
  #define __Pyx_PyList_GetItemRef(o, i) __Pyx_NewRef(PyList_GET_ITEM(o, i))
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
#define __Pyx_PyDict_GetItemRef(dict, key, result) PyDict_GetItemRef(dict, key, result)
#elif CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
static CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {
  *result = PyObject_GetItem(dict, key);
  if (*result == NULL) {
    if (PyErr_ExceptionMatches(PyExc_KeyError)) {
      PyErr_Clear();
      return 0;
    }
    return -1;
  }
  return 1;
}
#else
static CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {
  *result = PyDict_GetItemWithError(dict, key);
  if (*result == NULL) {
    return PyErr_Occurred() ? -1 : 0;
  }
  Py_INCREF(*result);
  return 1;
}
#endif
#if defined(CYTHON_DEBUG_VISIT_CONST) && CYTHON_DEBUG_VISIT_CONST
  #define __Pyx_VISIT_CONST(obj)  Py_VISIT(obj)
#else
  #define __Pyx_VISIT_CONST(obj)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GET_ITEM(o, i)
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GET_ITEM(o, i)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GetItem(o, i)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GetItem(o, i)
#endif
#if CYTHON_ASSUME_SAFE_SIZE
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GET_LENGTH(o)
#else
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GetLength(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_InternFromString)
  #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
#endif
#define __Pyx_PyLong_FromHash_t PyLong_FromSsize_t
#define __Pyx_PyLong_AsHash_t   __Pyx_PyIndex_AsSsize_t
#if __PYX_LIMITED_VERSION_HEX >= 0x030A0000
    #define __Pyx_PySendResult PySendResult
#else
    typedef enum {
        PYGEN_RETURN = 0,
        PYGEN_ERROR = -1,
        PYGEN_NEXT = 1,
    } __Pyx_PySendResult;
#endif
#if CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX < 0x030A00A3
  typedef __Pyx_PySendResult (*__Pyx_pyiter_sendfunc)(PyObject *iter, PyObject *value, PyObject **result);
#else
  #define __Pyx_pyiter_sendfunc sendfunc
#endif
#if !CYTHON_USE_AM_SEND
#define __PYX_HAS_PY_AM_SEND 0
#elif __PYX_LIMITED_VERSION_HEX >= 0x030A0000
#define __PYX_HAS_PY_AM_SEND 1
#else
#define __PYX_HAS_PY_AM_SEND 2  // our own backported implementation
#endif
#if __PYX_HAS_PY_AM_SEND < 2
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
        __Pyx_pyiter_sendfunc am_send;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_SlotTpAsAsync(s) ((PyAsyncMethods*)(s))
#endif
#if CYTHON_USE_AM_SEND && PY_VERSION_HEX < 0x030A00F0
    #define __Pyx_TPFLAGS_HAVE_AM_SEND (1UL << 21)
#else
    #define __Pyx_TPFLAGS_HAVE_AM_SEND (0)
#endif
#if PY_VERSION_HEX >= 0x03090000
#define __Pyx_PyInterpreterState_Get() PyInterpreterState_Get()
#else
#define __Pyx_PyInterpreterState_Get() PyThreadState_Get()->interp
#endif
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030A0000
#ifdef __cplusplus
extern "C"
#endif
PyAPI_FUNC(void *) PyMem_Calloc(size_t nelem, size_t elsize);
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_init_co_variable(PyObject *inspect, const char* name, int *write_to) {
    int value;
    PyObject *py_value = PyObject_GetAttrString(inspect, name);
    if (!py_value) return 0;
    value = (int) PyLong_AsLong(py_value);
    Py_DECREF(py_value);
    *write_to = value;
    return value != -1 || !PyErr_Occurred();
}
static int __Pyx_init_co_variables(void) {
    PyObject *inspect;
    int result;
    inspect = PyImport_ImportModule("inspect");
    result =
#if !defined(CO_OPTIMIZED)
        __Pyx_init_co_variable(inspect, "CO_OPTIMIZED", &CO_OPTIMIZED) &&
#endif
#if !defined(CO_NEWLOCALS)
        __Pyx_init_co_variable(inspect, "CO_NEWLOCALS", &CO_NEWLOCALS) &&
#endif
#if !defined(CO_VARARGS)
        __Pyx_init_co_variable(inspect, "CO_VARARGS", &CO_VARARGS) &&
#endif
#if !defined(CO_VARKEYWORDS)
        __Pyx_init_co_variable(inspect, "CO_VARKEYWORDS", &CO_VARKEYWORDS) &&
#endif
#if !defined(CO_ASYNC_GENERATOR)
        __Pyx_init_co_variable(inspect, "CO_ASYNC_GENERATOR", &CO_ASYNC_GENERATOR) &&
#endif
#if !defined(CO_GENERATOR)
        __Pyx_init_co_variable(inspect, "CO_GENERATOR", &CO_GENERATOR) &&
#endif
#if !defined(CO_COROUTINE)
        __Pyx_init_co_variable(inspect, "CO_COROUTINE", &CO_COROUTINE) &&
#endif
        1;
    Py_DECREF(inspect);
    return result ? 0 : -1;
}
#else
static int __Pyx_init_co_variables(void) {
    return 0;  // It's a limited API-only feature
}
#endif

/* MathInitCode */
#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #ifndef _USE_MATH_DEFINES
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#ifndef CYTHON_CLINE_IN_TRACEBACK_RUNTIME
#define CYTHON_CLINE_IN_TRACEBACK_RUNTIME 0
#endif
#ifndef CYTHON_CLINE_IN_TRACEBACK
#define CYTHON_CLINE_IN_TRACEBACK CYTHON_CLINE_IN_TRACEBACK_RUNTIME
#endif
#if CYTHON_CLINE_IN_TRACEBACK
#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; __pyx_clineno = __LINE__; (void) __pyx_clineno; }
#else
#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; (void) __pyx_clineno; }
#endif
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__spacy__kb__kb_in_memory
#define __PYX_HAVE_API__spacy__kb__kb_in_memory
/* Early includes */
#include <stdint.h>
#include <string.h>
#include <stdio.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <unordered_map>
#include <unordered_set>

    /* Using NumPy API declarations from "numpy/__init__.cython-30.pxd" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#include <set>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyByteArray_AsString(s) PyByteArray_AS_STRING(s)
#else
    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AsString(s))
    #define __Pyx_PyByteArray_AsString(s) PyByteArray_AsString(s)
#endif
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
static CYTHON_INLINE PyObject *__Pyx_NewRef(PyObject *obj) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_NewRef)
    return Py_NewRef(obj);
#else
    Py_INCREF(obj);
    return obj;
#endif
}
static CYTHON_INLINE PyObject *__Pyx_XNewRef(PyObject *obj) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_XNewRef)
    return Py_XNewRef(obj);
#else
    Py_XINCREF(obj);
    return obj;
#endif
}
static CYTHON_INLINE PyObject *__Pyx_Owned_Py_None(int b);
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Long(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyLong_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __Pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AS_DOUBLE(x)
#else
#define __Pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AsDouble(x)
#endif
#define __Pyx_PyFloat_AsFloat(x) ((float) __Pyx_PyFloat_AsDouble(x))
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#elif __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeASCII(c_str, size, NULL)
#else
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
/* PretendToInitialize */
#ifdef __cplusplus
#include <type_traits>
template <typename T>
static void __Pyx_pretend_to_initialize(T* ptr) {
#if __cplusplus > 201103L
    if ((std::is_trivially_default_constructible<T>::value))
#endif
        *ptr = T();
    (void)ptr;
}
#else
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }
#endif


#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * const __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif (defined(_Complex_I) && !defined(_MSC_VER)) || ((defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) && !defined(__STDC_NO_COMPLEX__) && !defined(_MSC_VER))
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

/* #### Code section: filename_table ### */

static const char* const __pyx_f[] = {
  "spacy/kb/kb_in_memory.pyx",
  "<stringsource>",
  "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd",
  "spacy/kb/kb_in_memory.pxd",
  "cymem/cymem.pxd",
  "preshed/maps.pxd",
  "cpython/type.pxd",
  "spacy/strings.pxd",
  "spacy/morphology.pxd",
  "spacy/vocab.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __PYX_CYTHON_ATOMICS_ENABLED() CYTHON_ATOMICS
#define __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING() CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#define __pyx_atomic_int_type int
#define __pyx_nonatomic_int_type int
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__))
    #include <stdatomic.h>
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)))
    #include <atomic>
#endif
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__) &&\
                       ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type atomic_int
    #define __pyx_atomic_ptr_type atomic_uintptr_t
    #define __pyx_nonatomic_ptr_type uintptr_t
    #define __pyx_atomic_incr_relaxed(value) atomic_fetch_add_explicit(value, 1, memory_order_relaxed)
    #define __pyx_atomic_incr_acq_rel(value) atomic_fetch_add_explicit(value, 1, memory_order_acq_rel)
    #define __pyx_atomic_decr_acq_rel(value) atomic_fetch_sub_explicit(value, 1, memory_order_acq_rel)
    #define __pyx_atomic_sub(value, arg) atomic_fetch_sub(value, arg)
    #define __pyx_atomic_int_cmp_exchange(value, expected, desired) atomic_compare_exchange_strong(value, expected, desired)
    #define __pyx_atomic_load(value) atomic_load(value)
    #define __pyx_atomic_store(value, new_value) atomic_store(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) atomic_load_explicit(value, memory_order_relaxed)
    #define __pyx_atomic_pointer_load_acquire(value) atomic_load_explicit(value, memory_order_acquire)
    #define __pyx_atomic_pointer_exchange(value, new_value) atomic_exchange(value, (__pyx_nonatomic_ptr_type)new_value)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C atomics"
    #endif
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)) &&\
                    ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type std::atomic_int
    #define __pyx_atomic_ptr_type std::atomic_uintptr_t
    #define __pyx_nonatomic_ptr_type uintptr_t
    #define __pyx_atomic_incr_relaxed(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_relaxed)
    #define __pyx_atomic_incr_acq_rel(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_acq_rel)
    #define __pyx_atomic_decr_acq_rel(value) std::atomic_fetch_sub_explicit(value, 1, std::memory_order_acq_rel)
    #define __pyx_atomic_sub(value, arg) std::atomic_fetch_sub(value, arg)
    #define __pyx_atomic_int_cmp_exchange(value, expected, desired) std::atomic_compare_exchange_strong(value, expected, desired)
    #define __pyx_atomic_load(value) std::atomic_load(value)
    #define __pyx_atomic_store(value, new_value) std::atomic_store(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) std::atomic_load_explicit(value, std::memory_order_relaxed)
    #define __pyx_atomic_pointer_load_acquire(value) std::atomic_load_explicit(value, std::memory_order_acquire)
    #define __pyx_atomic_pointer_exchange(value, new_value) std::atomic_exchange(value, (__pyx_nonatomic_ptr_type)new_value)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C++ atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C++ atomics"
    #endif
#elif CYTHON_ATOMICS && (__GNUC__ >= 5 || (__GNUC__ == 4 &&\
                    (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ >= 2))))
    #define __pyx_atomic_ptr_type void*
    #define __pyx_atomic_incr_relaxed(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_incr_acq_rel(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_acq_rel(value) __sync_fetch_and_sub(value, 1)
    #define __pyx_atomic_sub(value, arg) __sync_fetch_and_sub(value, arg)
    static CYTHON_INLINE int __pyx_atomic_int_cmp_exchange(__pyx_atomic_int_type* value, __pyx_nonatomic_int_type* expected, __pyx_nonatomic_int_type desired) {
        __pyx_nonatomic_int_type old = __sync_val_compare_and_swap(value, *expected, desired);
        int result = old == *expected;
        *expected = old;
        return result;
    }
    #define __pyx_atomic_load(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_store(value, new_value) __sync_lock_test_and_set(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_pointer_load_acquire(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_pointer_exchange(value, new_value) __sync_lock_test_and_set(value, (__pyx_atomic_ptr_type)new_value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER)
    #include <intrin.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type long
    #define __pyx_atomic_ptr_type void*
    #undef __pyx_nonatomic_int_type
    #define __pyx_nonatomic_int_type long
    #pragma intrinsic (_InterlockedExchangeAdd, _InterlockedExchange, _InterlockedCompareExchange, _InterlockedCompareExchangePointer, _InterlockedExchangePointer)
    #define __pyx_atomic_incr_relaxed(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_incr_acq_rel(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_decr_acq_rel(value) _InterlockedExchangeAdd(value, -1)
    #define __pyx_atomic_sub(value, arg) _InterlockedExchangeAdd(value, -arg)
    static CYTHON_INLINE int __pyx_atomic_int_cmp_exchange(__pyx_atomic_int_type* value, __pyx_nonatomic_int_type* expected, __pyx_nonatomic_int_type desired) {
        __pyx_nonatomic_int_type old = _InterlockedCompareExchange(value, desired, *expected);
        int result = old == *expected;
        *expected = old;
        return result;
    }
    #define __pyx_atomic_load(value) _InterlockedExchangeAdd(value, 0)
    #define __pyx_atomic_store(value, new_value) _InterlockedExchange(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) *(void * volatile *)value
    #define __pyx_atomic_pointer_load_acquire(value) _InterlockedCompareExchangePointer(value, 0, 0)
    #define __pyx_atomic_pointer_exchange(value, new_value) _InterlockedExchangePointer(value, (__pyx_atomic_ptr_type)new_value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_relaxed(__pyx_get_slice_count_pointer(memview))
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_acq_rel(__pyx_get_slice_count_pointer(memview))
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* CriticalSections.proto */
#if !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#define __Pyx_PyCriticalSection void*
#define __Pyx_PyCriticalSection2 void*
#define __Pyx_PyCriticalSection_Begin1(cs, arg) (void)cs
#define __Pyx_PyCriticalSection_Begin2(cs, arg1, arg2) (void)cs
#define __Pyx_PyCriticalSection_End1(cs)
#define __Pyx_PyCriticalSection_End2(cs)
#else
#define __Pyx_PyCriticalSection PyCriticalSection
#define __Pyx_PyCriticalSection2 PyCriticalSection2
#define __Pyx_PyCriticalSection_Begin1 PyCriticalSection_Begin
#define __Pyx_PyCriticalSection_Begin2 PyCriticalSection2_Begin
#define __Pyx_PyCriticalSection_End1 PyCriticalSection_End
#define __Pyx_PyCriticalSection_End2 PyCriticalSection2_End
#endif
#if PY_VERSION_HEX < 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_BEGIN_CRITICAL_SECTION(o) {
#define __Pyx_END_CRITICAL_SECTION() }
#else
#define __Pyx_BEGIN_CRITICAL_SECTION Py_BEGIN_CRITICAL_SECTION
#define __Pyx_END_CRITICAL_SECTION Py_END_CRITICAL_SECTION
#endif

/* #### Code section: numeric_typedefs ### */

/* "preshed/maps.pxd":5
 * 
 * 
 * ctypedef uint64_t key_t             # <<<<<<<<<<<<<<
 * 
 * 
*/
typedef uint64_t __pyx_t_7preshed_4maps_key_t;

/* "typedefs.pxd":3
 * from libc.stdint cimport int32_t, uint8_t, uint16_t, uint32_t, uint64_t, uintptr_t
 * 
 * ctypedef float weight_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t hash_t
 * ctypedef uint64_t class_t
*/
typedef float __pyx_t_5spacy_8typedefs_weight_t;

/* "typedefs.pxd":4
 * 
 * ctypedef float weight_t
 * ctypedef uint64_t hash_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t class_t
 * ctypedef uint64_t attr_t
*/
typedef uint64_t __pyx_t_5spacy_8typedefs_hash_t;

/* "typedefs.pxd":5
 * ctypedef float weight_t
 * ctypedef uint64_t hash_t
 * ctypedef uint64_t class_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t attr_t
 * ctypedef uint64_t flags_t
*/
typedef uint64_t __pyx_t_5spacy_8typedefs_class_t;

/* "typedefs.pxd":6
 * ctypedef uint64_t hash_t
 * ctypedef uint64_t class_t
 * ctypedef uint64_t attr_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t flags_t
 * ctypedef uint16_t len_t
*/
typedef uint64_t __pyx_t_5spacy_8typedefs_attr_t;

/* "typedefs.pxd":7
 * ctypedef uint64_t class_t
 * ctypedef uint64_t attr_t
 * ctypedef uint64_t flags_t             # <<<<<<<<<<<<<<
 * ctypedef uint16_t len_t
 * ctypedef uint16_t tag_t
*/
typedef uint64_t __pyx_t_5spacy_8typedefs_flags_t;

/* "typedefs.pxd":8
 * ctypedef uint64_t attr_t
 * ctypedef uint64_t flags_t
 * ctypedef uint16_t len_t             # <<<<<<<<<<<<<<
 * ctypedef uint16_t tag_t
*/
typedef uint16_t __pyx_t_5spacy_8typedefs_len_t;

/* "typedefs.pxd":9
 * ctypedef uint64_t flags_t
 * ctypedef uint16_t len_t
 * ctypedef uint16_t tag_t             # <<<<<<<<<<<<<<
*/
typedef uint16_t __pyx_t_5spacy_8typedefs_tag_t;

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":787
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
*/
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":788
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
*/
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":789
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
*/
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":790
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
*/
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":794
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
*/
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":795
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
*/
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":796
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
*/
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":797
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
*/
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":801
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
*/
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":802
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
*/
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":809
 * ctypedef double complex complex128_t
 * 
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
*/
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":810
 * 
 * ctypedef npy_longlong   longlong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
*/
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":812
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
*/
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":813
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
*/
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":815
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
*/
typedef npy_double __pyx_t_5numpy_float_t;

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":816
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
*/
typedef npy_double __pyx_t_5numpy_double_t;

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":817
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef float complex       cfloat_t
*/
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* #### Code section: complex_type_declarations ### */
/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< long double > __pyx_t_long_double_complex;
  #else
    typedef long double _Complex __pyx_t_long_double_complex;
  #endif
#else
    typedef struct { long double real, imag; } __pyx_t_long_double_complex;
#endif
static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double, long double);

/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_5cymem_5cymem_PyMalloc;
struct __pyx_obj_5cymem_5cymem_PyFree;
struct __pyx_obj_5cymem_5cymem_Pool;
struct __pyx_obj_5cymem_5cymem_Address;
struct __pyx_obj_7preshed_4maps_PreshMap;
struct __pyx_obj_7preshed_4maps_PreshMapArray;
struct __pyx_obj_5spacy_7strings_StringStore;
struct __pyx_obj_5spacy_10morphology_Morphology;
struct __pyx_obj_5spacy_5vocab_Vocab;
struct __pyx_obj_5spacy_2kb_2kb_KnowledgeBase;
struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB;
struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer;
struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader;
struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes;
struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct_1_from_bytes;
struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct_2_to_disk;
struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct_3_from_disk;

/* "cymem/cymem.pxd":1
 * ctypedef void* (*malloc_t)(size_t n)             # <<<<<<<<<<<<<<
 * ctypedef void (*free_t)(void *p)
 * 
*/
typedef void *(*__pyx_t_5cymem_5cymem_malloc_t)(size_t);

/* "cymem/cymem.pxd":2
 * ctypedef void* (*malloc_t)(size_t n)
 * ctypedef void (*free_t)(void *p)             # <<<<<<<<<<<<<<
 * 
 * cdef class PyMalloc:
*/
typedef void (*__pyx_t_5cymem_5cymem_free_t)(void *);
struct __pyx_t_7preshed_4maps_Cell;
struct __pyx_t_7preshed_4maps_Result;
struct __pyx_t_7preshed_4maps_MapStruct;

/* "preshed/maps.pxd":8
 * 
 * 
 * cdef struct Cell:             # <<<<<<<<<<<<<<
 *     key_t key
 *     void* value
*/
struct __pyx_t_7preshed_4maps_Cell {
  __pyx_t_7preshed_4maps_key_t key;
  void *value;
};

/* "preshed/maps.pxd":13
 * 
 * 
 * cdef struct Result:             # <<<<<<<<<<<<<<
 *     int found
 *     void* value
*/
struct __pyx_t_7preshed_4maps_Result {
  int found;
  void *value;
};

/* "preshed/maps.pxd":18
 * 
 * 
 * cdef struct MapStruct:             # <<<<<<<<<<<<<<
 *     Cell* cells
 *     void* value_for_empty_key
*/
struct __pyx_t_7preshed_4maps_MapStruct {
  struct __pyx_t_7preshed_4maps_Cell *cells;
  void *value_for_empty_key;
  void *value_for_del_key;
  __pyx_t_7preshed_4maps_key_t length;
  __pyx_t_7preshed_4maps_key_t filled;
  int is_empty_key_set;
  int is_del_key_set;
};

/* "symbols.pxd":1
 * cdef enum symbol_t:             # <<<<<<<<<<<<<<
 *     NIL
 *     IS_ALPHA
*/
enum __pyx_t_5spacy_7symbols_symbol_t {
  __pyx_e_5spacy_7symbols_NIL,
  __pyx_e_5spacy_7symbols_IS_ALPHA,
  __pyx_e_5spacy_7symbols_IS_ASCII,
  __pyx_e_5spacy_7symbols_IS_DIGIT,
  __pyx_e_5spacy_7symbols_IS_LOWER,
  __pyx_e_5spacy_7symbols_IS_PUNCT,
  __pyx_e_5spacy_7symbols_IS_SPACE,
  __pyx_e_5spacy_7symbols_IS_TITLE,
  __pyx_e_5spacy_7symbols_IS_UPPER,
  __pyx_e_5spacy_7symbols_LIKE_URL,
  __pyx_e_5spacy_7symbols_LIKE_NUM,
  __pyx_e_5spacy_7symbols_LIKE_EMAIL,
  __pyx_e_5spacy_7symbols_IS_STOP,
  __pyx_e_5spacy_7symbols_IS_OOV_DEPRECATED,
  __pyx_e_5spacy_7symbols_IS_BRACKET,
  __pyx_e_5spacy_7symbols_IS_QUOTE,
  __pyx_e_5spacy_7symbols_IS_LEFT_PUNCT,
  __pyx_e_5spacy_7symbols_IS_RIGHT_PUNCT,
  __pyx_e_5spacy_7symbols_IS_CURRENCY,
  __pyx_e_5spacy_7symbols_FLAG19 = 19,
  __pyx_e_5spacy_7symbols_FLAG20,
  __pyx_e_5spacy_7symbols_FLAG21,
  __pyx_e_5spacy_7symbols_FLAG22,
  __pyx_e_5spacy_7symbols_FLAG23,
  __pyx_e_5spacy_7symbols_FLAG24,
  __pyx_e_5spacy_7symbols_FLAG25,
  __pyx_e_5spacy_7symbols_FLAG26,
  __pyx_e_5spacy_7symbols_FLAG27,
  __pyx_e_5spacy_7symbols_FLAG28,
  __pyx_e_5spacy_7symbols_FLAG29,
  __pyx_e_5spacy_7symbols_FLAG30,
  __pyx_e_5spacy_7symbols_FLAG31,
  __pyx_e_5spacy_7symbols_FLAG32,
  __pyx_e_5spacy_7symbols_FLAG33,
  __pyx_e_5spacy_7symbols_FLAG34,
  __pyx_e_5spacy_7symbols_FLAG35,
  __pyx_e_5spacy_7symbols_FLAG36,
  __pyx_e_5spacy_7symbols_FLAG37,
  __pyx_e_5spacy_7symbols_FLAG38,
  __pyx_e_5spacy_7symbols_FLAG39,
  __pyx_e_5spacy_7symbols_FLAG40,
  __pyx_e_5spacy_7symbols_FLAG41,
  __pyx_e_5spacy_7symbols_FLAG42,
  __pyx_e_5spacy_7symbols_FLAG43,
  __pyx_e_5spacy_7symbols_FLAG44,
  __pyx_e_5spacy_7symbols_FLAG45,
  __pyx_e_5spacy_7symbols_FLAG46,
  __pyx_e_5spacy_7symbols_FLAG47,
  __pyx_e_5spacy_7symbols_FLAG48,
  __pyx_e_5spacy_7symbols_FLAG49,
  __pyx_e_5spacy_7symbols_FLAG50,
  __pyx_e_5spacy_7symbols_FLAG51,
  __pyx_e_5spacy_7symbols_FLAG52,
  __pyx_e_5spacy_7symbols_FLAG53,
  __pyx_e_5spacy_7symbols_FLAG54,
  __pyx_e_5spacy_7symbols_FLAG55,
  __pyx_e_5spacy_7symbols_FLAG56,
  __pyx_e_5spacy_7symbols_FLAG57,
  __pyx_e_5spacy_7symbols_FLAG58,
  __pyx_e_5spacy_7symbols_FLAG59,
  __pyx_e_5spacy_7symbols_FLAG60,
  __pyx_e_5spacy_7symbols_FLAG61,
  __pyx_e_5spacy_7symbols_FLAG62,
  __pyx_e_5spacy_7symbols_FLAG63,
  __pyx_e_5spacy_7symbols_ID,
  __pyx_e_5spacy_7symbols_ORTH,
  __pyx_e_5spacy_7symbols_LOWER,
  __pyx_e_5spacy_7symbols_NORM,
  __pyx_e_5spacy_7symbols_SHAPE,
  __pyx_e_5spacy_7symbols_PREFIX,
  __pyx_e_5spacy_7symbols_SUFFIX,
  __pyx_e_5spacy_7symbols_LENGTH,
  __pyx_e_5spacy_7symbols_CLUSTER,
  __pyx_e_5spacy_7symbols_LEMMA,
  __pyx_e_5spacy_7symbols_POS,
  __pyx_e_5spacy_7symbols_TAG,
  __pyx_e_5spacy_7symbols_DEP,
  __pyx_e_5spacy_7symbols_ENT_IOB,
  __pyx_e_5spacy_7symbols_ENT_TYPE,
  __pyx_e_5spacy_7symbols_HEAD,
  __pyx_e_5spacy_7symbols_SENT_START,
  __pyx_e_5spacy_7symbols_SPACY,
  __pyx_e_5spacy_7symbols_PROB,
  __pyx_e_5spacy_7symbols_LANG,
  __pyx_e_5spacy_7symbols_ADJ,
  __pyx_e_5spacy_7symbols_ADP,
  __pyx_e_5spacy_7symbols_ADV,
  __pyx_e_5spacy_7symbols_AUX,
  __pyx_e_5spacy_7symbols_CONJ,
  __pyx_e_5spacy_7symbols_CCONJ,
  __pyx_e_5spacy_7symbols_DET,
  __pyx_e_5spacy_7symbols_INTJ,
  __pyx_e_5spacy_7symbols_NOUN,
  __pyx_e_5spacy_7symbols_NUM,
  __pyx_e_5spacy_7symbols_PART,
  __pyx_e_5spacy_7symbols_PRON,
  __pyx_e_5spacy_7symbols_PROPN,
  __pyx_e_5spacy_7symbols_PUNCT,
  __pyx_e_5spacy_7symbols_SCONJ,
  __pyx_e_5spacy_7symbols_SYM,
  __pyx_e_5spacy_7symbols_VERB,
  __pyx_e_5spacy_7symbols_X,
  __pyx_e_5spacy_7symbols_EOL,
  __pyx_e_5spacy_7symbols_SPACE,
  __pyx_e_5spacy_7symbols_DEPRECATED001,
  __pyx_e_5spacy_7symbols_DEPRECATED002,
  __pyx_e_5spacy_7symbols_DEPRECATED003,
  __pyx_e_5spacy_7symbols_DEPRECATED004,
  __pyx_e_5spacy_7symbols_DEPRECATED005,
  __pyx_e_5spacy_7symbols_DEPRECATED006,
  __pyx_e_5spacy_7symbols_DEPRECATED007,
  __pyx_e_5spacy_7symbols_DEPRECATED008,
  __pyx_e_5spacy_7symbols_DEPRECATED009,
  __pyx_e_5spacy_7symbols_DEPRECATED010,
  __pyx_e_5spacy_7symbols_DEPRECATED011,
  __pyx_e_5spacy_7symbols_DEPRECATED012,
  __pyx_e_5spacy_7symbols_DEPRECATED013,
  __pyx_e_5spacy_7symbols_DEPRECATED014,
  __pyx_e_5spacy_7symbols_DEPRECATED015,
  __pyx_e_5spacy_7symbols_DEPRECATED016,
  __pyx_e_5spacy_7symbols_DEPRECATED017,
  __pyx_e_5spacy_7symbols_DEPRECATED018,
  __pyx_e_5spacy_7symbols_DEPRECATED019,
  __pyx_e_5spacy_7symbols_DEPRECATED020,
  __pyx_e_5spacy_7symbols_DEPRECATED021,
  __pyx_e_5spacy_7symbols_DEPRECATED022,
  __pyx_e_5spacy_7symbols_DEPRECATED023,
  __pyx_e_5spacy_7symbols_DEPRECATED024,
  __pyx_e_5spacy_7symbols_DEPRECATED025,
  __pyx_e_5spacy_7symbols_DEPRECATED026,
  __pyx_e_5spacy_7symbols_DEPRECATED027,
  __pyx_e_5spacy_7symbols_DEPRECATED028,
  __pyx_e_5spacy_7symbols_DEPRECATED029,
  __pyx_e_5spacy_7symbols_DEPRECATED030,
  __pyx_e_5spacy_7symbols_DEPRECATED031,
  __pyx_e_5spacy_7symbols_DEPRECATED032,
  __pyx_e_5spacy_7symbols_DEPRECATED033,
  __pyx_e_5spacy_7symbols_DEPRECATED034,
  __pyx_e_5spacy_7symbols_DEPRECATED035,
  __pyx_e_5spacy_7symbols_DEPRECATED036,
  __pyx_e_5spacy_7symbols_DEPRECATED037,
  __pyx_e_5spacy_7symbols_DEPRECATED038,
  __pyx_e_5spacy_7symbols_DEPRECATED039,
  __pyx_e_5spacy_7symbols_DEPRECATED040,
  __pyx_e_5spacy_7symbols_DEPRECATED041,
  __pyx_e_5spacy_7symbols_DEPRECATED042,
  __pyx_e_5spacy_7symbols_DEPRECATED043,
  __pyx_e_5spacy_7symbols_DEPRECATED044,
  __pyx_e_5spacy_7symbols_DEPRECATED045,
  __pyx_e_5spacy_7symbols_DEPRECATED046,
  __pyx_e_5spacy_7symbols_DEPRECATED047,
  __pyx_e_5spacy_7symbols_DEPRECATED048,
  __pyx_e_5spacy_7symbols_DEPRECATED049,
  __pyx_e_5spacy_7symbols_DEPRECATED050,
  __pyx_e_5spacy_7symbols_DEPRECATED051,
  __pyx_e_5spacy_7symbols_DEPRECATED052,
  __pyx_e_5spacy_7symbols_DEPRECATED053,
  __pyx_e_5spacy_7symbols_DEPRECATED054,
  __pyx_e_5spacy_7symbols_DEPRECATED055,
  __pyx_e_5spacy_7symbols_DEPRECATED056,
  __pyx_e_5spacy_7symbols_DEPRECATED057,
  __pyx_e_5spacy_7symbols_DEPRECATED058,
  __pyx_e_5spacy_7symbols_DEPRECATED059,
  __pyx_e_5spacy_7symbols_DEPRECATED060,
  __pyx_e_5spacy_7symbols_DEPRECATED061,
  __pyx_e_5spacy_7symbols_DEPRECATED062,
  __pyx_e_5spacy_7symbols_DEPRECATED063,
  __pyx_e_5spacy_7symbols_DEPRECATED064,
  __pyx_e_5spacy_7symbols_DEPRECATED065,
  __pyx_e_5spacy_7symbols_DEPRECATED066,
  __pyx_e_5spacy_7symbols_DEPRECATED067,
  __pyx_e_5spacy_7symbols_DEPRECATED068,
  __pyx_e_5spacy_7symbols_DEPRECATED069,
  __pyx_e_5spacy_7symbols_DEPRECATED070,
  __pyx_e_5spacy_7symbols_DEPRECATED071,
  __pyx_e_5spacy_7symbols_DEPRECATED072,
  __pyx_e_5spacy_7symbols_DEPRECATED073,
  __pyx_e_5spacy_7symbols_DEPRECATED074,
  __pyx_e_5spacy_7symbols_DEPRECATED075,
  __pyx_e_5spacy_7symbols_DEPRECATED076,
  __pyx_e_5spacy_7symbols_DEPRECATED077,
  __pyx_e_5spacy_7symbols_DEPRECATED078,
  __pyx_e_5spacy_7symbols_DEPRECATED079,
  __pyx_e_5spacy_7symbols_DEPRECATED080,
  __pyx_e_5spacy_7symbols_DEPRECATED081,
  __pyx_e_5spacy_7symbols_DEPRECATED082,
  __pyx_e_5spacy_7symbols_DEPRECATED083,
  __pyx_e_5spacy_7symbols_DEPRECATED084,
  __pyx_e_5spacy_7symbols_DEPRECATED085,
  __pyx_e_5spacy_7symbols_DEPRECATED086,
  __pyx_e_5spacy_7symbols_DEPRECATED087,
  __pyx_e_5spacy_7symbols_DEPRECATED088,
  __pyx_e_5spacy_7symbols_DEPRECATED089,
  __pyx_e_5spacy_7symbols_DEPRECATED090,
  __pyx_e_5spacy_7symbols_DEPRECATED091,
  __pyx_e_5spacy_7symbols_DEPRECATED092,
  __pyx_e_5spacy_7symbols_DEPRECATED093,
  __pyx_e_5spacy_7symbols_DEPRECATED094,
  __pyx_e_5spacy_7symbols_DEPRECATED095,
  __pyx_e_5spacy_7symbols_DEPRECATED096,
  __pyx_e_5spacy_7symbols_DEPRECATED097,
  __pyx_e_5spacy_7symbols_DEPRECATED098,
  __pyx_e_5spacy_7symbols_DEPRECATED099,
  __pyx_e_5spacy_7symbols_DEPRECATED100,
  __pyx_e_5spacy_7symbols_DEPRECATED101,
  __pyx_e_5spacy_7symbols_DEPRECATED102,
  __pyx_e_5spacy_7symbols_DEPRECATED103,
  __pyx_e_5spacy_7symbols_DEPRECATED104,
  __pyx_e_5spacy_7symbols_DEPRECATED105,
  __pyx_e_5spacy_7symbols_DEPRECATED106,
  __pyx_e_5spacy_7symbols_DEPRECATED107,
  __pyx_e_5spacy_7symbols_DEPRECATED108,
  __pyx_e_5spacy_7symbols_DEPRECATED109,
  __pyx_e_5spacy_7symbols_DEPRECATED110,
  __pyx_e_5spacy_7symbols_DEPRECATED111,
  __pyx_e_5spacy_7symbols_DEPRECATED112,
  __pyx_e_5spacy_7symbols_DEPRECATED113,
  __pyx_e_5spacy_7symbols_DEPRECATED114,
  __pyx_e_5spacy_7symbols_DEPRECATED115,
  __pyx_e_5spacy_7symbols_DEPRECATED116,
  __pyx_e_5spacy_7symbols_DEPRECATED117,
  __pyx_e_5spacy_7symbols_DEPRECATED118,
  __pyx_e_5spacy_7symbols_DEPRECATED119,
  __pyx_e_5spacy_7symbols_DEPRECATED120,
  __pyx_e_5spacy_7symbols_DEPRECATED121,
  __pyx_e_5spacy_7symbols_DEPRECATED122,
  __pyx_e_5spacy_7symbols_DEPRECATED123,
  __pyx_e_5spacy_7symbols_DEPRECATED124,
  __pyx_e_5spacy_7symbols_DEPRECATED125,
  __pyx_e_5spacy_7symbols_DEPRECATED126,
  __pyx_e_5spacy_7symbols_DEPRECATED127,
  __pyx_e_5spacy_7symbols_DEPRECATED128,
  __pyx_e_5spacy_7symbols_DEPRECATED129,
  __pyx_e_5spacy_7symbols_DEPRECATED130,
  __pyx_e_5spacy_7symbols_DEPRECATED131,
  __pyx_e_5spacy_7symbols_DEPRECATED132,
  __pyx_e_5spacy_7symbols_DEPRECATED133,
  __pyx_e_5spacy_7symbols_DEPRECATED134,
  __pyx_e_5spacy_7symbols_DEPRECATED135,
  __pyx_e_5spacy_7symbols_DEPRECATED136,
  __pyx_e_5spacy_7symbols_DEPRECATED137,
  __pyx_e_5spacy_7symbols_DEPRECATED138,
  __pyx_e_5spacy_7symbols_DEPRECATED139,
  __pyx_e_5spacy_7symbols_DEPRECATED140,
  __pyx_e_5spacy_7symbols_DEPRECATED141,
  __pyx_e_5spacy_7symbols_DEPRECATED142,
  __pyx_e_5spacy_7symbols_DEPRECATED143,
  __pyx_e_5spacy_7symbols_DEPRECATED144,
  __pyx_e_5spacy_7symbols_DEPRECATED145,
  __pyx_e_5spacy_7symbols_DEPRECATED146,
  __pyx_e_5spacy_7symbols_DEPRECATED147,
  __pyx_e_5spacy_7symbols_DEPRECATED148,
  __pyx_e_5spacy_7symbols_DEPRECATED149,
  __pyx_e_5spacy_7symbols_DEPRECATED150,
  __pyx_e_5spacy_7symbols_DEPRECATED151,
  __pyx_e_5spacy_7symbols_DEPRECATED152,
  __pyx_e_5spacy_7symbols_DEPRECATED153,
  __pyx_e_5spacy_7symbols_DEPRECATED154,
  __pyx_e_5spacy_7symbols_DEPRECATED155,
  __pyx_e_5spacy_7symbols_DEPRECATED156,
  __pyx_e_5spacy_7symbols_DEPRECATED157,
  __pyx_e_5spacy_7symbols_DEPRECATED158,
  __pyx_e_5spacy_7symbols_DEPRECATED159,
  __pyx_e_5spacy_7symbols_DEPRECATED160,
  __pyx_e_5spacy_7symbols_DEPRECATED161,
  __pyx_e_5spacy_7symbols_DEPRECATED162,
  __pyx_e_5spacy_7symbols_DEPRECATED163,
  __pyx_e_5spacy_7symbols_DEPRECATED164,
  __pyx_e_5spacy_7symbols_DEPRECATED165,
  __pyx_e_5spacy_7symbols_DEPRECATED166,
  __pyx_e_5spacy_7symbols_DEPRECATED167,
  __pyx_e_5spacy_7symbols_DEPRECATED168,
  __pyx_e_5spacy_7symbols_DEPRECATED169,
  __pyx_e_5spacy_7symbols_DEPRECATED170,
  __pyx_e_5spacy_7symbols_DEPRECATED171,
  __pyx_e_5spacy_7symbols_DEPRECATED172,
  __pyx_e_5spacy_7symbols_DEPRECATED173,
  __pyx_e_5spacy_7symbols_DEPRECATED174,
  __pyx_e_5spacy_7symbols_DEPRECATED175,
  __pyx_e_5spacy_7symbols_DEPRECATED176,
  __pyx_e_5spacy_7symbols_DEPRECATED177,
  __pyx_e_5spacy_7symbols_DEPRECATED178,
  __pyx_e_5spacy_7symbols_DEPRECATED179,
  __pyx_e_5spacy_7symbols_DEPRECATED180,
  __pyx_e_5spacy_7symbols_DEPRECATED181,
  __pyx_e_5spacy_7symbols_DEPRECATED182,
  __pyx_e_5spacy_7symbols_DEPRECATED183,
  __pyx_e_5spacy_7symbols_DEPRECATED184,
  __pyx_e_5spacy_7symbols_DEPRECATED185,
  __pyx_e_5spacy_7symbols_DEPRECATED186,
  __pyx_e_5spacy_7symbols_DEPRECATED187,
  __pyx_e_5spacy_7symbols_DEPRECATED188,
  __pyx_e_5spacy_7symbols_DEPRECATED189,
  __pyx_e_5spacy_7symbols_DEPRECATED190,
  __pyx_e_5spacy_7symbols_DEPRECATED191,
  __pyx_e_5spacy_7symbols_DEPRECATED192,
  __pyx_e_5spacy_7symbols_DEPRECATED193,
  __pyx_e_5spacy_7symbols_DEPRECATED194,
  __pyx_e_5spacy_7symbols_DEPRECATED195,
  __pyx_e_5spacy_7symbols_DEPRECATED196,
  __pyx_e_5spacy_7symbols_DEPRECATED197,
  __pyx_e_5spacy_7symbols_DEPRECATED198,
  __pyx_e_5spacy_7symbols_DEPRECATED199,
  __pyx_e_5spacy_7symbols_DEPRECATED200,
  __pyx_e_5spacy_7symbols_DEPRECATED201,
  __pyx_e_5spacy_7symbols_DEPRECATED202,
  __pyx_e_5spacy_7symbols_DEPRECATED203,
  __pyx_e_5spacy_7symbols_DEPRECATED204,
  __pyx_e_5spacy_7symbols_DEPRECATED205,
  __pyx_e_5spacy_7symbols_DEPRECATED206,
  __pyx_e_5spacy_7symbols_DEPRECATED207,
  __pyx_e_5spacy_7symbols_DEPRECATED208,
  __pyx_e_5spacy_7symbols_DEPRECATED209,
  __pyx_e_5spacy_7symbols_DEPRECATED210,
  __pyx_e_5spacy_7symbols_DEPRECATED211,
  __pyx_e_5spacy_7symbols_DEPRECATED212,
  __pyx_e_5spacy_7symbols_DEPRECATED213,
  __pyx_e_5spacy_7symbols_DEPRECATED214,
  __pyx_e_5spacy_7symbols_DEPRECATED215,
  __pyx_e_5spacy_7symbols_DEPRECATED216,
  __pyx_e_5spacy_7symbols_DEPRECATED217,
  __pyx_e_5spacy_7symbols_DEPRECATED218,
  __pyx_e_5spacy_7symbols_DEPRECATED219,
  __pyx_e_5spacy_7symbols_DEPRECATED220,
  __pyx_e_5spacy_7symbols_DEPRECATED221,
  __pyx_e_5spacy_7symbols_DEPRECATED222,
  __pyx_e_5spacy_7symbols_DEPRECATED223,
  __pyx_e_5spacy_7symbols_DEPRECATED224,
  __pyx_e_5spacy_7symbols_DEPRECATED225,
  __pyx_e_5spacy_7symbols_DEPRECATED226,
  __pyx_e_5spacy_7symbols_DEPRECATED227,
  __pyx_e_5spacy_7symbols_DEPRECATED228,
  __pyx_e_5spacy_7symbols_DEPRECATED229,
  __pyx_e_5spacy_7symbols_DEPRECATED230,
  __pyx_e_5spacy_7symbols_DEPRECATED231,
  __pyx_e_5spacy_7symbols_DEPRECATED232,
  __pyx_e_5spacy_7symbols_DEPRECATED233,
  __pyx_e_5spacy_7symbols_DEPRECATED234,
  __pyx_e_5spacy_7symbols_DEPRECATED235,
  __pyx_e_5spacy_7symbols_DEPRECATED236,
  __pyx_e_5spacy_7symbols_DEPRECATED237,
  __pyx_e_5spacy_7symbols_DEPRECATED238,
  __pyx_e_5spacy_7symbols_DEPRECATED239,
  __pyx_e_5spacy_7symbols_DEPRECATED240,
  __pyx_e_5spacy_7symbols_DEPRECATED241,
  __pyx_e_5spacy_7symbols_DEPRECATED242,
  __pyx_e_5spacy_7symbols_DEPRECATED243,
  __pyx_e_5spacy_7symbols_DEPRECATED244,
  __pyx_e_5spacy_7symbols_DEPRECATED245,
  __pyx_e_5spacy_7symbols_DEPRECATED246,
  __pyx_e_5spacy_7symbols_DEPRECATED247,
  __pyx_e_5spacy_7symbols_DEPRECATED248,
  __pyx_e_5spacy_7symbols_DEPRECATED249,
  __pyx_e_5spacy_7symbols_DEPRECATED250,
  __pyx_e_5spacy_7symbols_DEPRECATED251,
  __pyx_e_5spacy_7symbols_DEPRECATED252,
  __pyx_e_5spacy_7symbols_DEPRECATED253,
  __pyx_e_5spacy_7symbols_DEPRECATED254,
  __pyx_e_5spacy_7symbols_DEPRECATED255,
  __pyx_e_5spacy_7symbols_DEPRECATED256,
  __pyx_e_5spacy_7symbols_DEPRECATED257,
  __pyx_e_5spacy_7symbols_DEPRECATED258,
  __pyx_e_5spacy_7symbols_DEPRECATED259,
  __pyx_e_5spacy_7symbols_DEPRECATED260,
  __pyx_e_5spacy_7symbols_DEPRECATED261,
  __pyx_e_5spacy_7symbols_DEPRECATED262,
  __pyx_e_5spacy_7symbols_DEPRECATED263,
  __pyx_e_5spacy_7symbols_DEPRECATED264,
  __pyx_e_5spacy_7symbols_DEPRECATED265,
  __pyx_e_5spacy_7symbols_DEPRECATED266,
  __pyx_e_5spacy_7symbols_DEPRECATED267,
  __pyx_e_5spacy_7symbols_DEPRECATED268,
  __pyx_e_5spacy_7symbols_DEPRECATED269,
  __pyx_e_5spacy_7symbols_DEPRECATED270,
  __pyx_e_5spacy_7symbols_DEPRECATED271,
  __pyx_e_5spacy_7symbols_DEPRECATED272,
  __pyx_e_5spacy_7symbols_DEPRECATED273,
  __pyx_e_5spacy_7symbols_DEPRECATED274,
  __pyx_e_5spacy_7symbols_DEPRECATED275,
  __pyx_e_5spacy_7symbols_DEPRECATED276,
  __pyx_e_5spacy_7symbols_PERSON,
  __pyx_e_5spacy_7symbols_NORP,
  __pyx_e_5spacy_7symbols_FACILITY,
  __pyx_e_5spacy_7symbols_ORG,
  __pyx_e_5spacy_7symbols_GPE,
  __pyx_e_5spacy_7symbols_LOC,
  __pyx_e_5spacy_7symbols_PRODUCT,
  __pyx_e_5spacy_7symbols_EVENT,
  __pyx_e_5spacy_7symbols_WORK_OF_ART,
  __pyx_e_5spacy_7symbols_LANGUAGE,
  __pyx_e_5spacy_7symbols_LAW,
  __pyx_e_5spacy_7symbols_DATE,
  __pyx_e_5spacy_7symbols_TIME,
  __pyx_e_5spacy_7symbols_PERCENT,
  __pyx_e_5spacy_7symbols_MONEY,
  __pyx_e_5spacy_7symbols_QUANTITY,
  __pyx_e_5spacy_7symbols_ORDINAL,
  __pyx_e_5spacy_7symbols_CARDINAL,
  __pyx_e_5spacy_7symbols_acomp,
  __pyx_e_5spacy_7symbols_advcl,
  __pyx_e_5spacy_7symbols_advmod,
  __pyx_e_5spacy_7symbols_agent,
  __pyx_e_5spacy_7symbols_amod,
  __pyx_e_5spacy_7symbols_appos,
  __pyx_e_5spacy_7symbols_attr,
  __pyx_e_5spacy_7symbols_aux,
  __pyx_e_5spacy_7symbols_auxpass,
  __pyx_e_5spacy_7symbols_cc,
  __pyx_e_5spacy_7symbols_ccomp,
  __pyx_e_5spacy_7symbols_complm,
  __pyx_e_5spacy_7symbols_conj,
  __pyx_e_5spacy_7symbols_cop,
  __pyx_e_5spacy_7symbols_csubj,
  __pyx_e_5spacy_7symbols_csubjpass,
  __pyx_e_5spacy_7symbols_dep,
  __pyx_e_5spacy_7symbols_det,
  __pyx_e_5spacy_7symbols_dobj,
  __pyx_e_5spacy_7symbols_expl,
  __pyx_e_5spacy_7symbols_hmod,
  __pyx_e_5spacy_7symbols_hyph,
  __pyx_e_5spacy_7symbols_infmod,
  __pyx_e_5spacy_7symbols_intj,
  __pyx_e_5spacy_7symbols_iobj,
  __pyx_e_5spacy_7symbols_mark,
  __pyx_e_5spacy_7symbols_meta,
  __pyx_e_5spacy_7symbols_neg,
  __pyx_e_5spacy_7symbols_nmod,
  __pyx_e_5spacy_7symbols_nn,
  __pyx_e_5spacy_7symbols_npadvmod,
  __pyx_e_5spacy_7symbols_nsubj,
  __pyx_e_5spacy_7symbols_nsubjpass,
  __pyx_e_5spacy_7symbols_num,
  __pyx_e_5spacy_7symbols_number,
  __pyx_e_5spacy_7symbols_oprd,
  __pyx_e_5spacy_7symbols_obj,
  __pyx_e_5spacy_7symbols_obl,
  __pyx_e_5spacy_7symbols_parataxis,
  __pyx_e_5spacy_7symbols_partmod,
  __pyx_e_5spacy_7symbols_pcomp,
  __pyx_e_5spacy_7symbols_pobj,
  __pyx_e_5spacy_7symbols_poss,
  __pyx_e_5spacy_7symbols_possessive,
  __pyx_e_5spacy_7symbols_preconj,
  __pyx_e_5spacy_7symbols_prep,
  __pyx_e_5spacy_7symbols_prt,
  __pyx_e_5spacy_7symbols_punct,
  __pyx_e_5spacy_7symbols_quantmod,
  __pyx_e_5spacy_7symbols_relcl,
  __pyx_e_5spacy_7symbols_rcmod,
  __pyx_e_5spacy_7symbols_root,
  __pyx_e_5spacy_7symbols_xcomp,
  __pyx_e_5spacy_7symbols_acl,
  __pyx_e_5spacy_7symbols_ENT_KB_ID,
  __pyx_e_5spacy_7symbols_MORPH,
  __pyx_e_5spacy_7symbols_ENT_ID,
  __pyx_e_5spacy_7symbols_IDX,
  __pyx_e_5spacy_7symbols__
};

/* "parts_of_speech.pxd":4
 * 
 * 
 * cpdef enum univ_pos_t:             # <<<<<<<<<<<<<<
 *     NO_TAG = 0
 *     ADJ = symbols.ADJ
*/
enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t {

  /* "parts_of_speech.pxd":6
 * cpdef enum univ_pos_t:
 *     NO_TAG = 0
 *     ADJ = symbols.ADJ             # <<<<<<<<<<<<<<
 *     ADP
 *     ADV
*/
  __pyx_e_5spacy_15parts_of_speech_NO_TAG = 0,
  __pyx_e_5spacy_15parts_of_speech_ADJ = __pyx_e_5spacy_7symbols_ADJ,
  __pyx_e_5spacy_15parts_of_speech_ADP,
  __pyx_e_5spacy_15parts_of_speech_ADV,
  __pyx_e_5spacy_15parts_of_speech_AUX,
  __pyx_e_5spacy_15parts_of_speech_CONJ,
  __pyx_e_5spacy_15parts_of_speech_CCONJ,
  __pyx_e_5spacy_15parts_of_speech_DET,
  __pyx_e_5spacy_15parts_of_speech_INTJ,
  __pyx_e_5spacy_15parts_of_speech_NOUN,
  __pyx_e_5spacy_15parts_of_speech_NUM,
  __pyx_e_5spacy_15parts_of_speech_PART,
  __pyx_e_5spacy_15parts_of_speech_PRON,
  __pyx_e_5spacy_15parts_of_speech_PROPN,
  __pyx_e_5spacy_15parts_of_speech_PUNCT,
  __pyx_e_5spacy_15parts_of_speech_SCONJ,
  __pyx_e_5spacy_15parts_of_speech_SYM,
  __pyx_e_5spacy_15parts_of_speech_VERB,
  __pyx_e_5spacy_15parts_of_speech_X,
  __pyx_e_5spacy_15parts_of_speech_EOL,
  __pyx_e_5spacy_15parts_of_speech_SPACE
};
struct __pyx_t_5spacy_7structs_LexemeC;
struct __pyx_t_5spacy_7structs_SpanC;
struct __pyx_t_5spacy_7structs_TokenC;
struct __pyx_t_5spacy_7structs_MorphAnalysisC;
struct __pyx_t_5spacy_7structs_KBEntryC;
struct __pyx_t_5spacy_7structs_AliasC;
struct __pyx_t_5spacy_7structs_EdgeC;
struct __pyx_t_5spacy_7structs_GraphC;

/* "structs.pxd":10
 * 
 * 
 * cdef struct LexemeC:             # <<<<<<<<<<<<<<
 *     flags_t flags
 * 
*/
struct __pyx_t_5spacy_7structs_LexemeC {
  __pyx_t_5spacy_8typedefs_flags_t flags;
  __pyx_t_5spacy_8typedefs_attr_t lang;
  __pyx_t_5spacy_8typedefs_attr_t id;
  __pyx_t_5spacy_8typedefs_attr_t length;
  __pyx_t_5spacy_8typedefs_attr_t orth;
  __pyx_t_5spacy_8typedefs_attr_t lower;
  __pyx_t_5spacy_8typedefs_attr_t norm;
  __pyx_t_5spacy_8typedefs_attr_t shape;
  __pyx_t_5spacy_8typedefs_attr_t prefix;
  __pyx_t_5spacy_8typedefs_attr_t suffix;
};

/* "structs.pxd":26
 * 
 * 
 * cdef struct SpanC:             # <<<<<<<<<<<<<<
 *     hash_t id
 *     int start
*/
struct __pyx_t_5spacy_7structs_SpanC {
  __pyx_t_5spacy_8typedefs_hash_t id;
  int start;
  int end;
  int start_char;
  int end_char;
  __pyx_t_5spacy_8typedefs_attr_t label;
  __pyx_t_5spacy_8typedefs_attr_t kb_id;
};

/* "structs.pxd":36
 * 
 * 
 * cdef struct TokenC:             # <<<<<<<<<<<<<<
 *     const LexemeC* lex
 *     uint64_t morph
*/
struct __pyx_t_5spacy_7structs_TokenC {
  struct __pyx_t_5spacy_7structs_LexemeC const *lex;
  uint64_t morph;
  enum __pyx_t_5spacy_15parts_of_speech_univ_pos_t pos;
  int spacy;
  __pyx_t_5spacy_8typedefs_attr_t tag;
  int idx;
  __pyx_t_5spacy_8typedefs_attr_t lemma;
  __pyx_t_5spacy_8typedefs_attr_t norm;
  int head;
  __pyx_t_5spacy_8typedefs_attr_t dep;
  uint32_t l_kids;
  uint32_t r_kids;
  uint32_t l_edge;
  uint32_t r_edge;
  int sent_start;
  int ent_iob;
  __pyx_t_5spacy_8typedefs_attr_t ent_type;
  __pyx_t_5spacy_8typedefs_attr_t ent_kb_id;
  __pyx_t_5spacy_8typedefs_hash_t ent_id;
};

/* "structs.pxd":60
 * 
 * 
 * cdef struct MorphAnalysisC:             # <<<<<<<<<<<<<<
 *     hash_t key
 *     int length
*/
struct __pyx_t_5spacy_7structs_MorphAnalysisC {
  __pyx_t_5spacy_8typedefs_hash_t key;
  int length;
  __pyx_t_5spacy_8typedefs_attr_t *fields;
  __pyx_t_5spacy_8typedefs_attr_t *features;
};

/* "structs.pxd":69
 * 
 * # Internal struct, for storage and disambiguation of entities.
 * cdef struct KBEntryC:             # <<<<<<<<<<<<<<
 * 
 *     # The hash of this entry's unique ID/name in the kB
*/
struct __pyx_t_5spacy_7structs_KBEntryC {
  __pyx_t_5spacy_8typedefs_hash_t entity_hash;
  int32_t vector_index;
  int32_t feats_row;
  float freq;
};

/* "structs.pxd":88
 * # Each alias struct stores a list of Entry pointers with their prior probabilities
 * # for this specific mention/alias.
 * cdef struct AliasC:             # <<<<<<<<<<<<<<
 * 
 *     # All entry candidates for this alias
*/
struct __pyx_t_5spacy_7structs_AliasC {
  std::vector<int64_t>  entry_indices;
  std::vector<float>  probs;
};

/* "structs.pxd":97
 * 
 * 
 * cdef struct EdgeC:             # <<<<<<<<<<<<<<
 *     hash_t label
 *     int32_t head
*/
struct __pyx_t_5spacy_7structs_EdgeC {
  __pyx_t_5spacy_8typedefs_hash_t label;
  int32_t head;
  int32_t tail;
};

/* "structs.pxd":103
 * 
 * 
 * cdef struct GraphC:             # <<<<<<<<<<<<<<
 *     vector[vector[int32_t]] nodes
 *     vector[EdgeC] edges
*/
struct __pyx_t_5spacy_7structs_GraphC {
  std::vector<std::vector<int32_t> >  nodes;
  std::vector<struct __pyx_t_5spacy_7structs_EdgeC>  edges;
  std::vector<float>  weights;
  std::vector<int>  n_heads;
  std::vector<int>  n_tails;
  std::vector<int>  first_head;
  std::vector<int>  first_tail;
  std::unordered_set<int>  *roots;
  std::unordered_map<__pyx_t_5spacy_8typedefs_hash_t,int>  *node_map;
  std::unordered_map<__pyx_t_5spacy_8typedefs_hash_t,int>  *edge_map;
};
union __pyx_t_5spacy_7strings_Utf8Str;
typedef union __pyx_t_5spacy_7strings_Utf8Str __pyx_t_5spacy_7strings_Utf8Str;

/* "strings.pxd":17
 * 
 * 
 * ctypedef union Utf8Str:             # <<<<<<<<<<<<<<
 *     unsigned char[8] s
 *     unsigned char* p
*/
union __pyx_t_5spacy_7strings_Utf8Str {
  unsigned char s[8];
  unsigned char *p;
};
union __pyx_t_5spacy_5vocab_LexemesOrTokens;
struct __pyx_t_5spacy_5vocab__Cached;

/* "vocab.pxd":15
 * 
 * 
 * cdef union LexemesOrTokens:             # <<<<<<<<<<<<<<
 *     const LexemeC* const* lexemes
 *     const TokenC* tokens
*/
union __pyx_t_5spacy_5vocab_LexemesOrTokens {
  struct __pyx_t_5spacy_7structs_LexemeC const *const *lexemes;
  struct __pyx_t_5spacy_7structs_TokenC const *tokens;
};

/* "vocab.pxd":20
 * 
 * 
 * cdef struct _Cached:             # <<<<<<<<<<<<<<
 *     LexemesOrTokens data
 *     bint is_lex
*/
struct __pyx_t_5spacy_5vocab__Cached {
  union __pyx_t_5spacy_5vocab_LexemesOrTokens data;
  int is_lex;
  int length;
};

/* "spacy/kb/kb_in_memory.pxd":11
 * from .kb cimport KnowledgeBase
 * 
 * ctypedef vector[KBEntryC] entry_vec             # <<<<<<<<<<<<<<
 * ctypedef vector[AliasC] alias_vec
 * ctypedef vector[float] float_vec
*/
typedef std::vector<struct __pyx_t_5spacy_7structs_KBEntryC>  __pyx_t_5spacy_2kb_12kb_in_memory_entry_vec;

/* "spacy/kb/kb_in_memory.pxd":12
 * 
 * ctypedef vector[KBEntryC] entry_vec
 * ctypedef vector[AliasC] alias_vec             # <<<<<<<<<<<<<<
 * ctypedef vector[float] float_vec
 * ctypedef vector[float_vec] float_matrix
*/
typedef std::vector<struct __pyx_t_5spacy_7structs_AliasC>  __pyx_t_5spacy_2kb_12kb_in_memory_alias_vec;

/* "spacy/kb/kb_in_memory.pxd":13
 * ctypedef vector[KBEntryC] entry_vec
 * ctypedef vector[AliasC] alias_vec
 * ctypedef vector[float] float_vec             # <<<<<<<<<<<<<<
 * ctypedef vector[float_vec] float_matrix
 * 
*/
typedef std::vector<float>  __pyx_t_5spacy_2kb_12kb_in_memory_float_vec;

/* "spacy/kb/kb_in_memory.pxd":14
 * ctypedef vector[AliasC] alias_vec
 * ctypedef vector[float] float_vec
 * ctypedef vector[float_vec] float_matrix             # <<<<<<<<<<<<<<
 * 
 * 
*/
typedef std::vector<__pyx_t_5spacy_2kb_12kb_in_memory_float_vec>  __pyx_t_5spacy_2kb_12kb_in_memory_float_matrix;

/* "cymem/cymem.pxd":4
 * ctypedef void (*free_t)(void *p)
 * 
 * cdef class PyMalloc:             # <<<<<<<<<<<<<<
 *     cdef malloc_t malloc
 *     cdef void _set(self, malloc_t malloc)
*/
struct __pyx_obj_5cymem_5cymem_PyMalloc {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_PyMalloc *__pyx_vtab;
  __pyx_t_5cymem_5cymem_malloc_t malloc;
};


/* "cymem/cymem.pxd":10
 * cdef PyMalloc WrapMalloc(malloc_t malloc)
 * 
 * cdef class PyFree:             # <<<<<<<<<<<<<<
 *     cdef free_t free
 *     cdef void _set(self, free_t free)
*/
struct __pyx_obj_5cymem_5cymem_PyFree {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_PyFree *__pyx_vtab;
  __pyx_t_5cymem_5cymem_free_t free;
};


/* "cymem/cymem.pxd":16
 * cdef PyFree WrapFree(free_t free)
 * 
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
*/
struct __pyx_obj_5cymem_5cymem_Pool {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtab;
  size_t size;
  PyObject *addresses;
  PyObject *refs;
  struct __pyx_obj_5cymem_5cymem_PyMalloc *pymalloc;
  struct __pyx_obj_5cymem_5cymem_PyFree *pyfree;
};


/* "cymem/cymem.pxd":28
 * 
 * 
 * cdef class Address:             # <<<<<<<<<<<<<<
 *     cdef void* ptr
 *     cdef readonly PyMalloc pymalloc
*/
struct __pyx_obj_5cymem_5cymem_Address {
  PyObject_HEAD
  void *ptr;
  struct __pyx_obj_5cymem_5cymem_PyMalloc *pymalloc;
  struct __pyx_obj_5cymem_5cymem_PyFree *pyfree;
};


/* "preshed/maps.pxd":45
 * 
 * 
 * cdef class PreshMap:             # <<<<<<<<<<<<<<
 *     cdef MapStruct* c_map
 *     cdef Pool mem
*/
struct __pyx_obj_7preshed_4maps_PreshMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_7preshed_4maps_PreshMap *__pyx_vtab;
  struct __pyx_t_7preshed_4maps_MapStruct *c_map;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
};


/* "preshed/maps.pxd":53
 * 
 * 
 * cdef class PreshMapArray:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef MapStruct* maps
*/
struct __pyx_obj_7preshed_4maps_PreshMapArray {
  PyObject_HEAD
  struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_t_7preshed_4maps_MapStruct *maps;
  size_t length;
};


/* "strings.pxd":22
 * 
 * 
 * cdef class StringStore:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 * 
*/
struct __pyx_obj_5spacy_7strings_StringStore {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_7strings_StringStore *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  std::vector<__pyx_t_5spacy_8typedefs_hash_t>  keys;
  struct __pyx_obj_7preshed_4maps_PreshMap *_map;
  std::vector<__pyx_t_5spacy_8typedefs_hash_t>  _transient_keys;
  struct __pyx_obj_5cymem_5cymem_Pool *_non_temp_mem;
};


/* "morphology.pxd":11
 * 
 * 
 * cdef class Morphology:             # <<<<<<<<<<<<<<
 *     cdef readonly Pool mem
 *     cdef readonly StringStore strings
*/
struct __pyx_obj_5spacy_10morphology_Morphology {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_10morphology_Morphology *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_obj_5spacy_7strings_StringStore *strings;
  struct __pyx_obj_7preshed_4maps_PreshMap *tags;
};


/* "vocab.pxd":26
 * 
 * 
 * cdef class Vocab:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef readonly StringStore strings
*/
struct __pyx_obj_5spacy_5vocab_Vocab {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_5vocab_Vocab *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_obj_5spacy_7strings_StringStore *strings;
  struct __pyx_obj_5spacy_10morphology_Morphology *morphology;
  PyObject *_vectors;
  PyObject *_lookups;
  PyObject *writing_system;
  PyObject *get_noun_chunks;
  int length;
  PyObject *_unused_object;
  PyObject *lex_attr_getters;
  PyObject *cfg;
  struct __pyx_obj_7preshed_4maps_PreshMap *_by_orth;
  struct __pyx_obj_5cymem_5cymem_Pool *_non_temp_mem;
  std::vector<__pyx_t_5spacy_8typedefs_attr_t>  _transient_orths;
};


/* "kb.pxd":9
 * 
 * 
 * cdef class KnowledgeBase:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef readonly Vocab vocab
*/
struct __pyx_obj_5spacy_2kb_2kb_KnowledgeBase {
  PyObject_HEAD
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_obj_5spacy_5vocab_Vocab *vocab;
  int64_t entity_vector_length;
};


/* "spacy/kb/kb_in_memory.pxd":17
 * 
 * 
 * cdef class InMemoryLookupKB(KnowledgeBase):             # <<<<<<<<<<<<<<
 *     # This maps 64bit keys (hash of unique entity string)
 *     # to 64bit values (position of the _KBEntryC struct in the _entries vector).
*/
struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB {
  struct __pyx_obj_5spacy_2kb_2kb_KnowledgeBase __pyx_base;
  struct __pyx_vtabstruct_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_vtab;
  struct __pyx_obj_7preshed_4maps_PreshMap *_entry_index;
  __pyx_t_5spacy_2kb_12kb_in_memory_entry_vec _entries;
  struct __pyx_obj_7preshed_4maps_PreshMap *_alias_index;
  __pyx_t_5spacy_2kb_12kb_in_memory_alias_vec _aliases_table;
  __pyx_t_5spacy_2kb_12kb_in_memory_float_matrix _vectors_table;
  PyObject *_features_table;
};


/* "spacy/kb/kb_in_memory.pxd":142
 * 
 * 
 * cdef class Writer:             # <<<<<<<<<<<<<<
 *     cdef FILE* _fp
 * 
*/
struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_2kb_12kb_in_memory_Writer *__pyx_vtab;
  FILE *_fp;
};


/* "spacy/kb/kb_in_memory.pxd":161
 *     cdef int _write(self, void* value, size_t size) except -1
 * 
 * cdef class Reader:             # <<<<<<<<<<<<<<
 *     cdef FILE* _fp
 * 
*/
struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_2kb_12kb_in_memory_Reader *__pyx_vtab;
  FILE *_fp;
};


/* "spacy/kb/kb_in_memory.pyx":319
 *         return 0.0
 * 
 *     def to_bytes(self, **kwargs):             # <<<<<<<<<<<<<<
 *         """Serialize the current state to a binary string.
 *         """
*/
struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes {
  PyObject_HEAD
  struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self;
};


/* "spacy/kb/kb_in_memory.pyx":371
 *         return util.to_bytes(serializers, [])
 * 
 *     def from_bytes(self, bytes_data, *, exclude=tuple()):             # <<<<<<<<<<<<<<
 *         """Load state from a binary string.
 *         """
*/
struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct_1_from_bytes {
  PyObject_HEAD
  struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self;
};


/* "spacy/kb/kb_in_memory.pyx":424
 *         return self
 * 
 *     def to_disk(self, path, exclude: Iterable[str] = SimpleFrozenList()):             # <<<<<<<<<<<<<<
 *         path = ensure_path(path)
 *         if not path.exists():
*/
struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct_2_to_disk {
  PyObject_HEAD
  struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self;
};


/* "spacy/kb/kb_in_memory.pyx":435
 *         util.to_disk(path, serialize, exclude)
 * 
 *     def from_disk(self, path, exclude: Iterable[str] = SimpleFrozenList()):             # <<<<<<<<<<<<<<
 *         path = ensure_path(path)
 *         if not path.exists():
*/
struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct_3_from_disk {
  PyObject_HEAD
  struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self;
};



/* "cymem/cymem.pxd":4
 * ctypedef void (*free_t)(void *p)
 * 
 * cdef class PyMalloc:             # <<<<<<<<<<<<<<
 *     cdef malloc_t malloc
 *     cdef void _set(self, malloc_t malloc)
*/

struct __pyx_vtabstruct_5cymem_5cymem_PyMalloc {
  void (*_set)(struct __pyx_obj_5cymem_5cymem_PyMalloc *, __pyx_t_5cymem_5cymem_malloc_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_PyMalloc *__pyx_vtabptr_5cymem_5cymem_PyMalloc;


/* "cymem/cymem.pxd":10
 * cdef PyMalloc WrapMalloc(malloc_t malloc)
 * 
 * cdef class PyFree:             # <<<<<<<<<<<<<<
 *     cdef free_t free
 *     cdef void _set(self, free_t free)
*/

struct __pyx_vtabstruct_5cymem_5cymem_PyFree {
  void (*_set)(struct __pyx_obj_5cymem_5cymem_PyFree *, __pyx_t_5cymem_5cymem_free_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_PyFree *__pyx_vtabptr_5cymem_5cymem_PyFree;


/* "cymem/cymem.pxd":16
 * cdef PyFree WrapFree(free_t free)
 * 
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
*/

struct __pyx_vtabstruct_5cymem_5cymem_Pool {
  void *(*alloc)(struct __pyx_obj_5cymem_5cymem_Pool *, size_t, size_t);
  void (*free)(struct __pyx_obj_5cymem_5cymem_Pool *, void *);
  void *(*realloc)(struct __pyx_obj_5cymem_5cymem_Pool *, void *, size_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtabptr_5cymem_5cymem_Pool;


/* "preshed/maps.pxd":45
 * 
 * 
 * cdef class PreshMap:             # <<<<<<<<<<<<<<
 *     cdef MapStruct* c_map
 *     cdef Pool mem
*/

struct __pyx_vtabstruct_7preshed_4maps_PreshMap {
  void *(*get)(struct __pyx_obj_7preshed_4maps_PreshMap *, __pyx_t_7preshed_4maps_key_t);
  void (*set)(struct __pyx_obj_7preshed_4maps_PreshMap *, __pyx_t_7preshed_4maps_key_t, void *);
};
static struct __pyx_vtabstruct_7preshed_4maps_PreshMap *__pyx_vtabptr_7preshed_4maps_PreshMap;


/* "preshed/maps.pxd":53
 * 
 * 
 * cdef class PreshMapArray:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef MapStruct* maps
*/

struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray {
  void *(*get)(struct __pyx_obj_7preshed_4maps_PreshMapArray *, size_t, __pyx_t_7preshed_4maps_key_t);
  void (*set)(struct __pyx_obj_7preshed_4maps_PreshMapArray *, size_t, __pyx_t_7preshed_4maps_key_t, void *);
};
static struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray *__pyx_vtabptr_7preshed_4maps_PreshMapArray;


/* "strings.pxd":22
 * 
 * 
 * cdef class StringStore:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 * 
*/

struct __pyx_vtabstruct_5spacy_7strings_StringStore {
  __pyx_t_5spacy_7strings_Utf8Str const *(*intern_unicode)(struct __pyx_obj_5spacy_7strings_StringStore *, PyObject *, int);
  __pyx_t_5spacy_7strings_Utf8Str const *(*_intern_utf8)(struct __pyx_obj_5spacy_7strings_StringStore *, char *, int, __pyx_t_5spacy_8typedefs_hash_t *, int);
};
static struct __pyx_vtabstruct_5spacy_7strings_StringStore *__pyx_vtabptr_5spacy_7strings_StringStore;


/* "morphology.pxd":11
 * 
 * 
 * cdef class Morphology:             # <<<<<<<<<<<<<<
 *     cdef readonly Pool mem
 *     cdef readonly StringStore strings
*/

struct __pyx_vtabstruct_5spacy_10morphology_Morphology {
  struct __pyx_t_5spacy_7structs_MorphAnalysisC (*create_morph_tag)(struct __pyx_obj_5spacy_10morphology_Morphology *, PyObject *);
  int (*insert)(struct __pyx_obj_5spacy_10morphology_Morphology *, struct __pyx_t_5spacy_7structs_MorphAnalysisC);
};
static struct __pyx_vtabstruct_5spacy_10morphology_Morphology *__pyx_vtabptr_5spacy_10morphology_Morphology;


/* "vocab.pxd":26
 * 
 * 
 * cdef class Vocab:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef readonly StringStore strings
*/

struct __pyx_vtabstruct_5spacy_5vocab_Vocab {
  struct __pyx_t_5spacy_7structs_LexemeC const *(*get)(struct __pyx_obj_5spacy_5vocab_Vocab *, struct __pyx_obj_5cymem_5cymem_Pool *, PyObject *);
  struct __pyx_t_5spacy_7structs_LexemeC const *(*get_by_orth)(struct __pyx_obj_5spacy_5vocab_Vocab *, struct __pyx_obj_5cymem_5cymem_Pool *, __pyx_t_5spacy_8typedefs_attr_t);
  struct __pyx_t_5spacy_7structs_TokenC const *(*make_fused_token)(struct __pyx_obj_5spacy_5vocab_Vocab *, PyObject *);
  struct __pyx_t_5spacy_7structs_LexemeC const *(*_new_lexeme)(struct __pyx_obj_5spacy_5vocab_Vocab *, struct __pyx_obj_5cymem_5cymem_Pool *, PyObject *);
  int (*_add_lex_to_vocab)(struct __pyx_obj_5spacy_5vocab_Vocab *, __pyx_t_5spacy_8typedefs_hash_t, struct __pyx_t_5spacy_7structs_LexemeC const *, int);
};
static struct __pyx_vtabstruct_5spacy_5vocab_Vocab *__pyx_vtabptr_5spacy_5vocab_Vocab;


/* "spacy/kb/kb_in_memory.pyx":29
 * 
 * 
 * cdef class InMemoryLookupKB(KnowledgeBase):             # <<<<<<<<<<<<<<
 *     """An `InMemoryLookupKB` instance stores unique identifiers for entities
 *     and their textual aliases, to support entity linking of named entities to
*/

struct __pyx_vtabstruct_5spacy_2kb_12kb_in_memory_InMemoryLookupKB {
  int64_t (*c_add_vector)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *, std::vector<float> );
  int64_t (*c_add_entity)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *, __pyx_t_5spacy_8typedefs_hash_t, float, int32_t, int);
  int64_t (*c_add_aliases)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *, __pyx_t_5spacy_8typedefs_hash_t, std::vector<int64_t> , std::vector<float> );
  void (*_create_empty_vectors)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *, __pyx_t_5spacy_8typedefs_hash_t);
  PyObject *(*set_entities)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_vtabptr_5spacy_2kb_12kb_in_memory_InMemoryLookupKB;
static CYTHON_INLINE int64_t __pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_c_add_vector(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *, std::vector<float> );
static CYTHON_INLINE int64_t __pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_c_add_entity(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *, __pyx_t_5spacy_8typedefs_hash_t, float, int32_t, int);
static CYTHON_INLINE int64_t __pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_c_add_aliases(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *, __pyx_t_5spacy_8typedefs_hash_t, std::vector<int64_t> , std::vector<float> );
static CYTHON_INLINE void __pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB__create_empty_vectors(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *, __pyx_t_5spacy_8typedefs_hash_t);


/* "spacy/kb/kb_in_memory.pyx":580
 * 
 * 
 * cdef class Writer:             # <<<<<<<<<<<<<<
 *     def __init__(self, path):
 *         assert isinstance(path, Path)
*/

struct __pyx_vtabstruct_5spacy_2kb_12kb_in_memory_Writer {
  int (*write_header)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer *, int64_t, int64_t);
  int (*write_vector_element)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer *, float);
  int (*write_entry)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer *, __pyx_t_5spacy_8typedefs_hash_t, float, int32_t);
  int (*write_alias_length)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer *, int64_t);
  int (*write_alias_header)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer *, __pyx_t_5spacy_8typedefs_hash_t, int64_t);
  int (*write_alias)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer *, int64_t, float);
  int (*_write)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer *, void *, size_t);
};
static struct __pyx_vtabstruct_5spacy_2kb_12kb_in_memory_Writer *__pyx_vtabptr_5spacy_2kb_12kb_in_memory_Writer;


/* "spacy/kb/kb_in_memory.pyx":630
 * 
 * 
 * cdef class Reader:             # <<<<<<<<<<<<<<
 *     def __init__(self, path):
 *         content = bytes(path)
*/

struct __pyx_vtabstruct_5spacy_2kb_12kb_in_memory_Reader {
  int (*read_header)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader *, int64_t *, int64_t *);
  int (*read_vector_element)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader *, float *);
  int (*read_entry)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader *, __pyx_t_5spacy_8typedefs_hash_t *, float *, int32_t *);
  int (*read_alias_length)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader *, int64_t *);
  int (*read_alias_header)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader *, __pyx_t_5spacy_8typedefs_hash_t *, int64_t *);
  int (*read_alias)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader *, int64_t *, float *);
  int (*_read)(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader *, void *, size_t);
};
static struct __pyx_vtabstruct_5spacy_2kb_12kb_in_memory_Reader *__pyx_vtabptr_5spacy_2kb_12kb_in_memory_Reader;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* DictGetItem.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject *const *args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject * const*args, size_t nargs, PyObject *kwargs);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
#endif
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_PySequence_ITEM(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_NewRef(__Pyx_PyTuple_GET_ITEM(args, i))
#else
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_XNewRef(PyTuple_GetItem(args, i))
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_ArgRef_FASTCALL(args, i) __Pyx_NewRef(args[i])
    #define __Pyx_NumKwargs_FASTCALL(kwds) __Pyx_PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
#else
    #define __Pyx_ArgRef_FASTCALL __Pyx_ArgRef_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#if CYTHON_METH_FASTCALL || (CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(args + start, stop - start)
#else
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static CYTHON_INLINE int __Pyx_ParseKeywords(
    PyObject *kwds, PyObject *const *kwvalues, PyObject ** const argnames[],
    PyObject *kwds2, PyObject *values[],
    Py_ssize_t num_pos_args, Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs
);

/* CallCFunction.proto */
#define __Pyx_CallCFunction(cfunc, self, args)\
    ((PyCFunction)(void(*)(void))(cfunc)->func)(self, args)
#define __Pyx_CallCFunctionWithKeywords(cfunc, self, args, kwargs)\
    ((PyCFunctionWithKeywords)(void(*)(void))(cfunc)->func)(self, args, kwargs)
#define __Pyx_CallCFunctionFast(cfunc, self, args, nargs)\
    ((__Pyx_PyCFunctionFast)(void(*)(void))(PyCFunction)(cfunc)->func)(self, args, nargs)
#define __Pyx_CallCFunctionFastWithKeywords(cfunc, self, args, nargs, kwnames)\
    ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))(PyCFunction)(cfunc)->func)(self, args, nargs, kwnames)

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS
    __pyx_atomic_int_type initialized;
#endif
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
static CYTHON_INLINE int __Pyx_CachedCFunction_GetAndSetInitializing(__Pyx_CachedCFunction *cfunc) {
#if !CYTHON_ATOMICS
    return 1;
#else
    __pyx_nonatomic_int_type expected = 0;
    if (__pyx_atomic_int_cmp_exchange(&cfunc->initialized, &expected, 1)) {
        return 0;
    }
    return expected;
#endif
}
static CYTHON_INLINE void __Pyx_CachedCFunction_SetFinishedInitializing(__Pyx_CachedCFunction *cfunc) {
#if CYTHON_ATOMICS
    __pyx_atomic_store(&cfunc->initialized, 2);
#endif
}
#else
#define __Pyx_CachedCFunction_GetAndSetInitializing(cfunc) 2
#define __Pyx_CachedCFunction_SetFinishedInitializing(cfunc)
#endif

/* CallUnboundCMethod2.proto */
CYTHON_UNUSED
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectFastCallMethod.proto */
#if CYTHON_VECTORCALL && PY_VERSION_HEX >= 0x03090000
#define __Pyx_PyObject_FastCallMethod(name, args, nargsf) PyObject_VectorcallMethod(name, args, nargsf, NULL)
#else
static PyObject *__Pyx_PyObject_FastCallMethod(PyObject *name, PyObject *const *args, size_t nargsf);
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* RejectKeywords.proto */
static void __Pyx_RejectKeywords(const char* function_name, PyObject *kwds);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_mstate_global->__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectVectorCallKwBuilder.proto */
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);
#if CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03090000
#define __Pyx_Object_Vectorcall_CallFromBuilder PyObject_Vectorcall
#else
#define __Pyx_Object_Vectorcall_CallFromBuilder _PyObject_Vectorcall
#endif
#define __Pyx_MakeVectorcallBuilderKwds(n) PyTuple_New(n)
static int __Pyx_VectorcallBuilder_AddArg(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);
static int __Pyx_VectorcallBuilder_AddArgStr(const char *key, PyObject *value, PyObject *builder, PyObject **args, int n);
#else
#define __Pyx_Object_Vectorcall_CallFromBuilder __Pyx_PyObject_FastCallDict
#define __Pyx_MakeVectorcallBuilderKwds(n) __Pyx_PyDict_NewPresized(n)
#define __Pyx_VectorcallBuilder_AddArg(key, value, builder, args, n) PyDict_SetItem(builder, key, value)
#define __Pyx_VectorcallBuilder_AddArgStr(key, value, builder, args, n) PyDict_SetItemString(builder, key, value)
#endif

/* PyObjectVectorCallMethodKwBuilder.proto */
#if CYTHON_VECTORCALL && PY_VERSION_HEX >= 0x03090000
#define __Pyx_Object_VectorcallMethod_CallFromBuilder PyObject_VectorcallMethod
#else
static PyObject *__Pyx_Object_VectorcallMethod_CallFromBuilder(PyObject *name, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* pybytes_as_double.proto */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj);
static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length);
static CYTHON_INLINE double __Pyx_PyBytes_AsDouble(PyObject *obj) {
    char* as_c_string;
    Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE
    as_c_string = PyBytes_AS_STRING(obj);
    size = PyBytes_GET_SIZE(obj);
#else
    if (PyBytes_AsStringAndSize(obj, &as_c_string, &size) < 0) {
        return (double)-1;
    }
#endif
    return __Pyx__PyBytes_AsDouble(obj, as_c_string, size);
}
static CYTHON_INLINE double __Pyx_PyByteArray_AsDouble(PyObject *obj) {
    char* as_c_string;
    Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE
    as_c_string = PyByteArray_AS_STRING(obj);
    size = PyByteArray_GET_SIZE(obj);
#else
    as_c_string = PyByteArray_AsString(obj);
    if (as_c_string == NULL) {
        return (double)-1;
    }
    size = PyByteArray_Size(obj);
#endif
    return __Pyx__PyBytes_AsDouble(obj, as_c_string, size);
}

/* pyunicode_as_double.proto */
#if !CYTHON_COMPILING_IN_PYPY && CYTHON_ASSUME_SAFE_MACROS
static const char* __Pyx__PyUnicode_AsDouble_Copy(const void* data, const int kind, char* buffer, Py_ssize_t start, Py_ssize_t end) {
    int last_was_punctuation;
    Py_ssize_t i;
    last_was_punctuation = 1;
    for (i=start; i <= end; i++) {
        Py_UCS4 chr = PyUnicode_READ(kind, data, i);
        int is_punctuation = (chr == '_') | (chr == '.');
        *buffer = (char)chr;
        buffer += (chr != '_');
        if (unlikely(chr > 127)) goto parse_failure;
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyUnicode_AsDouble_inf_nan(const void* data, int kind, Py_ssize_t start, Py_ssize_t length) {
    int matches = 1;
    Py_UCS4 chr;
    Py_UCS4 sign = PyUnicode_READ(kind, data, start);
    int is_signed = (sign == '-') | (sign == '+');
    start += is_signed;
    length -= is_signed;
    switch (PyUnicode_READ(kind, data, start)) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'a') | (chr == 'A');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'n') | (chr == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'f') | (chr == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+3);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+4);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+5);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+6);
            matches &= (chr == 't') | (chr == 'T');
            chr = PyUnicode_READ(kind, data, start+7);
            matches &= (chr == 'y') | (chr == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static double __Pyx_PyUnicode_AsDouble_WithSpaces(PyObject *obj) {
    double value;
    const char *last;
    char *end;
    Py_ssize_t start, length = PyUnicode_GET_LENGTH(obj);
    const int kind = PyUnicode_KIND(obj);
    const void* data = PyUnicode_DATA(obj);
    start = 0;
    while (Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, start)))
        start++;
    while (start < length - 1 && Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, length - 1)))
        length--;
    length -= start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyUnicode_AsDouble_inf_nan(data, kind, start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    if (length < 40) {
        char number[40];
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((length + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}
#endif
static CYTHON_INLINE double __Pyx_PyUnicode_AsDouble(PyObject *obj) {
#if !CYTHON_COMPILING_IN_PYPY && CYTHON_ASSUME_SAFE_MACROS
    if (unlikely(__Pyx_PyUnicode_READY(obj) == -1))
        return (double)-1;
    if (likely(PyUnicode_IS_ASCII(obj))) {
        const char *s;
        Py_ssize_t length;
        s = PyUnicode_AsUTF8AndSize(obj, &length);
        return __Pyx__PyBytes_AsDouble(obj, s, length);
    }
    return __Pyx_PyUnicode_AsDouble_WithSpaces(obj);
#else
    return __Pyx_SlowPyString_AsDouble(obj);
#endif
}

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyLong_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?  __Pyx_PyFloat_AS_DOUBLE(obj) :\
 likely(PyLong_CheckExact(obj)) ?\
 PyLong_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* PyLongBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static CYTHON_INLINE PyObject* __Pyx_PyLong_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyLong_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyLongCompare.proto */
static CYTHON_INLINE int __Pyx_PyLong_BoolNeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(const char* function_name, PyObject *kw);

/* RaiseClosureNameError.proto */
static void __Pyx_RaiseClosureNameError(const char *varname);

/* FixUpExtensionType.proto */
static CYTHON_INLINE int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* dict_setdefault.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value, int is_safe_type);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);

/* CallTypeTraverse.proto */
#if !CYTHON_USE_TYPE_SPECS || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x03090000)
#define __Pyx_call_type_traverse(o, always_call, visit, arg) 0
#else
static int __Pyx_call_type_traverse(PyObject *o, int always_call, visitproc visit, void *arg);
#endif

/* PyMethodNew.proto */
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ);

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL ||\
        (CYTHON_COMPILING_IN_LIMITED_API && CYTHON_METH_FASTCALL)
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    PyObject *defaults;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_mstate_global->__pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_mstate_global->__pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_mstate_global->__pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void));
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE PyObject *__Pyx_CyFunction_InitDefaults(PyObject *func,
                                                         PyTypeObject *defaults_type);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* AssertionsEnabled.proto */
#if CYTHON_COMPILING_IN_LIMITED_API  ||  (CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030C0000)
  static int __pyx_assertions_enabled_flag;
  #define __pyx_assertions_enabled() (__pyx_assertions_enabled_flag)
  static int __Pyx_init_assertions_enabled(void) {
    PyObject *builtins, *debug, *debug_str;
    int flag;
    builtins = PyEval_GetBuiltins();
    if (!builtins) goto bad;
    debug_str = PyUnicode_FromStringAndSize("__debug__", 9);
    if (!debug_str) goto bad;
    debug = PyObject_GetItem(builtins, debug_str);
    Py_DECREF(debug_str);
    if (!debug) goto bad;
    flag = PyObject_IsTrue(debug);
    Py_DECREF(debug);
    if (flag == -1) goto bad;
    __pyx_assertions_enabled_flag = flag;
    return 0;
  bad:
    __pyx_assertions_enabled_flag = 1;
    return -1;
  }
#else
  #define __Pyx_init_assertions_enabled()  (0)
  #define __pyx_assertions_enabled()  (!Py_OptimizeFlag)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* CallUnboundCMethod1.proto */
CYTHON_UNUSED
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* HasAttr.proto */
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
#define __Pyx_HasAttr(o, n)  PyObject_HasAttrWithError(o, n)
#else
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);
#endif

/* DefaultPlacementNew.proto */
#include <new>
template<typename T>
void __Pyx_default_placement_construct(T* x) {
    new (static_cast<void*>(x)) T();
}

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_1_1
#define __PYX_HAVE_RT_ImportType_proto_3_1_1
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_1_1(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_1_1(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_1_1 {
   __Pyx_ImportType_CheckSize_Error_3_1_1 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_1_1 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_1_1 = 2
};
static PyTypeObject *__Pyx_ImportType_3_1_1(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_1_1 check_size);
#endif

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
static int __Pyx_MergeVtables(PyTypeObject *type);

/* LimitedApiGetTypeDict.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_GetTypeDict(PyTypeObject *tp);
#endif

/* DelItemOnTypeDict.proto */
static int __Pyx__DelItemOnTypeDict(PyTypeObject *tp, PyObject *k);
#define __Pyx_DelItemOnTypeDict(tp, k) __Pyx__DelItemOnTypeDict((PyTypeObject*)tp, k)

/* SetItemOnTypeDict.proto */
static int __Pyx__SetItemOnTypeDict(PyTypeObject *tp, PyObject *k, PyObject *v);
#define __Pyx_SetItemOnTypeDict(tp, k, v) __Pyx__SetItemOnTypeDict((PyTypeObject*)tp, k, v)

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* ListPack.proto */
static PyObject *__Pyx_PyList_Pack(Py_ssize_t n, ...);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);

/* ImportDottedModuleRelFirst.proto */
static PyObject *__Pyx_ImportDottedModuleRelFirst(PyObject *name, PyObject *parts_tuple);

/* CLineInTraceback.proto */
#if CYTHON_CLINE_IN_TRACEBACK && CYTHON_CLINE_IN_TRACEBACK_RUNTIME
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#else
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#endif

/* CodeObjectCache.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject __Pyx_CachedCodeObjectType;
#else
typedef PyCodeObject __Pyx_CachedCodeObjectType;
#endif
typedef struct {
    __Pyx_CachedCodeObjectType* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_int_type accessor_count;
  #endif
};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static __Pyx_CachedCodeObjectType *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, __Pyx_CachedCodeObjectType* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

struct __pyx_t_5spacy_7structs_AliasC;
static PyObject* __pyx_convert__to_py_struct____pyx_t_5spacy_7structs_AliasC(struct __pyx_t_5spacy_7structs_AliasC s);
/* LengthHint.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_PyObject_LengthHint(o, defaultval)  (defaultval)
#else
#define __Pyx_PyObject_LengthHint(o, defaultval)  PyObject_LengthHint(o, defaultval)
#endif

struct __pyx_t_5spacy_7structs_KBEntryC;
static PyObject* __pyx_convert__to_py_struct____pyx_t_5spacy_7structs_KBEntryC(struct __pyx_t_5spacy_7structs_KBEntryC s);
/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_long__double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_long__double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_long__double(a, b) ((a)-(b))
    #define __Pyx_c_prod_long__double(a, b) ((a)*(b))
    #define __Pyx_c_quot_long__double(a, b) ((a)/(b))
    #define __Pyx_c_neg_long__double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_long__double(z) ((z)==(long double)0)
    #define __Pyx_c_conj_long__double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_long__double(z)     (::std::abs(z))
        #define __Pyx_c_pow_long__double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_long__double(z) ((z)==0)
    #define __Pyx_c_conj_long__double(z)    (conjl(z))
    #if 1
        #define __Pyx_c_abs_long__double(z)     (cabsl(z))
        #define __Pyx_c_pow_long__double(a, b)  (cpowl(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_sum_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_diff_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_prod_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_neg_long__double(__pyx_t_long_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_long__double(__pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_conj_long__double(__pyx_t_long_double_complex);
    #if 1
        static CYTHON_INLINE long double __Pyx_c_abs_long__double(__pyx_t_long_double_complex);
        static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_pow_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_int64_t(int64_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyLong_As_int64_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_uint64_t(uint64_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_int32_t(int32_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyLong_As_uint64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int32_t __Pyx_PyLong_As_int32_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyLong_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyLong_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyLong_As_int(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
#define __Pyx_PyType_GetFullyQualifiedName PyType_GetFullyQualifiedName
#else
static __Pyx_TypeName __Pyx_PyType_GetFullyQualifiedName(PyTypeObject* tp);
#endif
#else  // !LIMITED_API
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetFullyQualifiedName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2) {
    return PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2);
}
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#ifdef PyExceptionInstance_Check
  #define __Pyx_PyBaseException_Check(obj) PyExceptionInstance_Check(obj)
#else
  #define __Pyx_PyBaseException_Check(obj) __Pyx_TypeCheck(obj, PyExc_BaseException)
#endif

/* GetRuntimeVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr_3_1_1(PyObject *module, const char *name, void **p, const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction_3_1_1(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* MultiPhaseInitModuleState.proto */
#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE
static PyObject *__Pyx_State_FindModule(void*);
static int __Pyx_State_AddModule(PyObject* module, void*);
static int __Pyx_State_RemoveModule(void*);
#elif CYTHON_USE_MODULE_STATE
#define __Pyx_State_FindModule PyState_FindModule
#define __Pyx_State_AddModule PyState_AddModule
#define __Pyx_State_RemoveModule PyState_RemoveModule
#endif

/* #### Code section: module_declarations ### */
/* CythonABIVersion.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
    #if CYTHON_METH_FASTCALL
        #define __PYX_FASTCALL_ABI_SUFFIX  "_fastcall"
    #else
        #define __PYX_FASTCALL_ABI_SUFFIX
    #endif
    #define __PYX_LIMITED_ABI_SUFFIX "limited" __PYX_FASTCALL_ABI_SUFFIX __PYX_AM_SEND_ABI_SUFFIX
#else
    #define __PYX_LIMITED_ABI_SUFFIX
#endif
#if __PYX_HAS_PY_AM_SEND == 1
    #define __PYX_AM_SEND_ABI_SUFFIX
#elif __PYX_HAS_PY_AM_SEND == 2
    #define __PYX_AM_SEND_ABI_SUFFIX "amsendbackport"
#else
    #define __PYX_AM_SEND_ABI_SUFFIX "noamsend"
#endif
#ifndef __PYX_MONITORING_ABI_SUFFIX
    #define __PYX_MONITORING_ABI_SUFFIX
#endif
#if CYTHON_USE_TP_FINALIZE
    #define __PYX_TP_FINALIZE_ABI_SUFFIX
#else
    #define __PYX_TP_FINALIZE_ABI_SUFFIX "nofinalize"
#endif
#if CYTHON_USE_FREELISTS || !defined(__Pyx_AsyncGen_USED)
    #define __PYX_FREELISTS_ABI_SUFFIX
#else
    #define __PYX_FREELISTS_ABI_SUFFIX "nofreelists"
#endif
#define CYTHON_ABI  __PYX_ABI_VERSION __PYX_LIMITED_ABI_SUFFIX __PYX_MONITORING_ABI_SUFFIX __PYX_TP_FINALIZE_ABI_SUFFIX __PYX_FREELISTS_ABI_SUFFIX __PYX_AM_SEND_ABI_SUFFIX
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."

static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_8itemsize_itemsize(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_9alignment_alignment(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_6fields_fields(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_5names_names(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_ArrayDescr *__pyx_f_5numpy_5dtype_8subarray_subarray(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_uint64 __pyx_f_5numpy_5dtype_5flags_flags(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_7numiter_numiter(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_4size_size(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_5index_index(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_2nd_nd(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_9broadcast_10dimensions_dimensions(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE void **__pyx_f_5numpy_9broadcast_5iters_iters(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int64_t __pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_c_add_vector(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, std::vector<float>  __pyx_v_entity_vector); /* proto*/
static CYTHON_INLINE int64_t __pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_c_add_entity(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, __pyx_t_5spacy_8typedefs_hash_t __pyx_v_entity_hash, float __pyx_v_freq, int32_t __pyx_v_vector_index, int __pyx_v_feats_row); /* proto*/
static CYTHON_INLINE int64_t __pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_c_add_aliases(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, CYTHON_UNUSED __pyx_t_5spacy_8typedefs_hash_t __pyx_v_alias_hash, std::vector<int64_t>  __pyx_v_entry_indices, std::vector<float>  __pyx_v_probs); /* proto*/
static CYTHON_INLINE void __pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB__create_empty_vectors(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, __pyx_t_5spacy_8typedefs_hash_t __pyx_v_dummy_hash); /* proto*/
static PyObject *__pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_set_entities(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_entity_list, PyObject *__pyx_v_freq_list, PyObject *__pyx_v_vector_list, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_5spacy_2kb_12kb_in_memory_6Writer_write_header(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer *__pyx_v_self, int64_t __pyx_v_nr_entries, int64_t __pyx_v_entity_vector_length); /* proto*/
static int __pyx_f_5spacy_2kb_12kb_in_memory_6Writer_write_vector_element(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer *__pyx_v_self, float __pyx_v_element); /* proto*/
static int __pyx_f_5spacy_2kb_12kb_in_memory_6Writer_write_entry(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer *__pyx_v_self, __pyx_t_5spacy_8typedefs_hash_t __pyx_v_entry_hash, float __pyx_v_entry_freq, int32_t __pyx_v_vector_index); /* proto*/
static int __pyx_f_5spacy_2kb_12kb_in_memory_6Writer_write_alias_length(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer *__pyx_v_self, int64_t __pyx_v_alias_length); /* proto*/
static int __pyx_f_5spacy_2kb_12kb_in_memory_6Writer_write_alias_header(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer *__pyx_v_self, __pyx_t_5spacy_8typedefs_hash_t __pyx_v_alias_hash, int64_t __pyx_v_candidate_length); /* proto*/
static int __pyx_f_5spacy_2kb_12kb_in_memory_6Writer_write_alias(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer *__pyx_v_self, int64_t __pyx_v_entry_index, float __pyx_v_prob); /* proto*/
static int __pyx_f_5spacy_2kb_12kb_in_memory_6Writer__write(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer *__pyx_v_self, void *__pyx_v_value, size_t __pyx_v_size); /* proto*/
static int __pyx_f_5spacy_2kb_12kb_in_memory_6Reader_read_header(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader *__pyx_v_self, int64_t *__pyx_v_nr_entries, int64_t *__pyx_v_entity_vector_length); /* proto*/
static int __pyx_f_5spacy_2kb_12kb_in_memory_6Reader_read_vector_element(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader *__pyx_v_self, float *__pyx_v_element); /* proto*/
static int __pyx_f_5spacy_2kb_12kb_in_memory_6Reader_read_entry(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader *__pyx_v_self, __pyx_t_5spacy_8typedefs_hash_t *__pyx_v_entity_hash, float *__pyx_v_freq, int32_t *__pyx_v_vector_index); /* proto*/
static int __pyx_f_5spacy_2kb_12kb_in_memory_6Reader_read_alias_length(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader *__pyx_v_self, int64_t *__pyx_v_alias_length); /* proto*/
static int __pyx_f_5spacy_2kb_12kb_in_memory_6Reader_read_alias_header(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader *__pyx_v_self, __pyx_t_5spacy_8typedefs_hash_t *__pyx_v_alias_hash, int64_t *__pyx_v_candidate_length); /* proto*/
static int __pyx_f_5spacy_2kb_12kb_in_memory_6Reader_read_alias(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader *__pyx_v_self, int64_t *__pyx_v_entry_index, float *__pyx_v_prob); /* proto*/
static int __pyx_f_5spacy_2kb_12kb_in_memory_6Reader__read(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader *__pyx_v_self, void *__pyx_v_value, size_t __pyx_v_size); /* proto*/

/* Module declarations from "libc.stdint" */

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "cymem.cymem" */

/* Module declarations from "preshed.maps" */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.unordered_map" */

/* Module declarations from "libcpp.unordered_set" */

/* Module declarations from "spacy" */

/* Module declarations from "spacy.symbols" */

/* Module declarations from "spacy.parts_of_speech" */

/* Module declarations from "spacy.typedefs" */

/* Module declarations from "spacy.structs" */

/* Module declarations from "murmurhash.mrmr" */
static uint64_t (*__pyx_f_10murmurhash_4mrmr_hash64)(void *, int, uint64_t); /*proto*/

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "cpython" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "numpy" */

/* Module declarations from "numpy" */

/* Module declarations from "libcpp.set" */

/* Module declarations from "spacy.strings" */

/* Module declarations from "spacy.morphology" */

/* Module declarations from "spacy.vocab" */
static struct __pyx_t_5spacy_7structs_LexemeC *__pyx_vp_5spacy_5vocab_EMPTY_LEXEME = 0;
#define __pyx_v_5spacy_5vocab_EMPTY_LEXEME (*__pyx_vp_5spacy_5vocab_EMPTY_LEXEME)

/* Module declarations from "spacy.kb.kb" */

/* Module declarations from "cpython.exc" */

/* Module declarations from "spacy.kb.kb_in_memory" */
static PyObject *__pyx_f_5spacy_2kb_12kb_in_memory___pyx_unpickle_InMemoryLookupKB__set_state(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *, PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int64_t(std::vector<int64_t>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_float(std::vector<float>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_AliasC(std::vector<struct __pyx_t_5spacy_7structs_AliasC>  const &); /*proto*/
static struct __pyx_t_5spacy_7structs_AliasC __pyx_convert__from_py_struct____pyx_t_5spacy_7structs_AliasC(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_KBEntryC(std::vector<struct __pyx_t_5spacy_7structs_KBEntryC>  const &); /*proto*/
static struct __pyx_t_5spacy_7structs_KBEntryC __pyx_convert__from_py_struct____pyx_t_5spacy_7structs_KBEntryC(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec(std::vector<__pyx_t_5spacy_2kb_12kb_in_memory_float_vec>  const &); /*proto*/
static std::vector<int64_t>  __pyx_convert_vector_from_py_int64_t(PyObject *); /*proto*/
static std::vector<float>  __pyx_convert_vector_from_py_float(PyObject *); /*proto*/
static std::vector<struct __pyx_t_5spacy_7structs_AliasC>  __pyx_convert_vector_from_py_struct____pyx_t_5spacy_7structs_AliasC(PyObject *); /*proto*/
static std::vector<struct __pyx_t_5spacy_7structs_KBEntryC>  __pyx_convert_vector_from_py_struct____pyx_t_5spacy_7structs_KBEntryC(PyObject *); /*proto*/
static std::vector<__pyx_t_5spacy_2kb_12kb_in_memory_float_vec>  __pyx_convert_vector_from_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec(PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "spacy.kb.kb_in_memory"
extern int __pyx_module_is_main_spacy__kb__kb_in_memory;
int __pyx_module_is_main_spacy__kb__kb_in_memory = 0;

/* Implementation of "spacy.kb.kb_in_memory" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_ImportError;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = "";
static const char __pyx_k_1[] = "\210\001\330\014\020\320\020\"\240%\240{\260!\2601";
static const char __pyx_k_Q[] = "\200\001\330\004\n\210+\220Q";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_Jd[] = "\240J\250d\260&\270\010\300\010\310\001\310\021";
static const char __pyx_k__5[] = ".";
static const char __pyx_k__6[] = "?";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_kb[] = "kb";
static const char __pyx_k_Any[] = "Any";
static const char __pyx_k_Qaq[] = "\250:\260Q\260a\260q";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_avQ[] = "\200\001\330\004.\250a\250v\260Q";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_loc[] = "loc";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_oQa[] = "\240\n\250$\250o\270Q\270a";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_z_1[] = "\250z\270\021\270!\2701";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_D_aq[] = "\240*\250D\260\016\270a\270q";
static const char __pyx_k_Dict[] = "Dict";
static const char __pyx_k_E132[] = "E132";
static const char __pyx_k_E133[] = "E133";
static const char __pyx_k_E134[] = "E134";
static const char __pyx_k_E140[] = "E140";
static const char __pyx_k_E141[] = "E141";
static const char __pyx_k_E145[] = "E145";
static const char __pyx_k_E146[] = "E146";
static const char __pyx_k_E176[] = "E176";
static const char __pyx_k_E890[] = "E890";
static const char __pyx_k_E891[] = "E891";
static const char __pyx_k_E928[] = "E928";
static const char __pyx_k_E929[] = "E929";
static const char __pyx_k_Path[] = "Path";
static const char __pyx_k_Span[] = "Span";
static const char __pyx_k_W017[] = "W017";
static const char __pyx_k_W018[] = "W018";
static const char __pyx_k_W024[] = "W024";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_freq[] = "freq";
static const char __pyx_k_func[] = "__func__";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_iq_t[] = "\320\004&\240i\250q\330\010\017\210t\320\023(\250\001\250\027\260\001";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_prob[] = "prob";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_utf8[] = "utf8";
static const char __pyx_k_util[] = "util";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_A_l_r[] = "\200A\330\010\014\320\014\036\230l\250!\250<\260r\270\021";
static const char __pyx_k_alias[] = "alias";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_entry[] = "entry";
static const char __pyx_k_found[] = "found";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_mkdir[] = "mkdir";
static const char __pyx_k_param[] = "param";
static const char __pyx_k_probs[] = "probs";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_srsly[] = "srsly";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_vocab[] = "vocab";
static const char __pyx_k_A_s_4q[] = "\200A\330\010\017\210s\220!\2204\220q";
static const char __pyx_k_Errors[] = "Errors";
static const char __pyx_k_Reader[] = "Reader";
static const char __pyx_k_Writer[] = "Writer";
static const char __pyx_k_dict_2[] = "_dict";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_entity[] = "entity";
static const char __pyx_k_errors[] = "errors";
static const char __pyx_k_exists[] = "exists";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_he_at1[] = "\230h\240e\250;\260a\260t\2701";
static const char __pyx_k_header[] = "header";
static const char __pyx_k_is_dir[] = "is_dir";
static const char __pyx_k_j_F_AQ[] = "\240j\260\004\260F\270(\300*\310A\310Q";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_lambda[] = "<lambda>";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reader[] = "reader";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_return[] = "return";
static const char __pyx_k_sorted[] = "sorted";
static const char __pyx_k_status[] = "status";
static const char __pyx_k_tokens[] = "tokens";
static const char __pyx_k_tuples[] = "tuples";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_writer[] = "writer";
static const char __pyx_k_A_s_6_A[] = "\200A\330\010\017\210s\220!\2206\230\023\230A";
static const char __pyx_k_IOError[] = "IOError";
static const char __pyx_k_aliases[] = "aliases";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_element[] = "element";
static const char __pyx_k_entries[] = "entries";
static const char __pyx_k_exclude[] = "exclude";
static const char __pyx_k_headers[] = "headers";
static const char __pyx_k_indices[] = "indices";
static const char __pyx_k_mention[] = "mention";
static const char __pyx_k_new_sum[] = "new_sum";
static const char __pyx_k_parents[] = "parents";
static const char __pyx_k_pathlib[] = "pathlib";
static const char __pyx_k_setters[] = "setters";
static const char __pyx_k_to_disk[] = "to_disk";
static const char __pyx_k_A_V1D_wc[] = "\200A\330\010\035\230V\2401\240D\250\001\330\010\017\210w\220c\230\021";
static const char __pyx_k_A_V84q_T[] = "\200A\330\010!\240\024\240V\2508\2604\260q\270\001\330\010\017\210{\230#\230T\240\021";
static const char __pyx_k_A_fHD_3d[] = "\200A\330\010\"\240$\240f\250H\260D\270\001\270\021\330\010\017\210|\2303\230d\240!";
static const char __pyx_k_Callable[] = "Callable";
static const char __pyx_k_Iterable[] = "Iterable";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_Warnings[] = "Warnings";
static const char __pyx_k_add_note[] = "add_note";
static const char __pyx_k_all_data[] = "all_data";
static const char __pyx_k_contents[] = "contents";
static const char __pyx_k_entities[] = "entities";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_is_empty[] = "is_empty";
static const char __pyx_k_prob_sum[] = "prob_sum";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_required[] = "required";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_to_bytes[] = "to_bytes";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_Candidate[] = "Candidate";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_add_alias[] = "add_alias";
static const char __pyx_k_candidate[] = "candidate";
static const char __pyx_k_feats_row[] = "feats_row";
static const char __pyx_k_file_path[] = "file_path";
static const char __pyx_k_freq_list[] = "freq_list";
static const char __pyx_k_from_disk[] = "from_disk";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_new_index[] = "new_index";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_serialize[] = "serialize";
static const char __pyx_k_A_HA_1_L_b[] = "\200A\330\010\014\320\014\034\230H\240A\240\\\260\022\2601\330\010\014\210L\230\t\240\021\240,\250b\260\001";
static const char __pyx_k_A_HA_iq_2Q[] = "\200A\330\010\014\320\014\034\230H\240A\240[\260\002\260!\330\010\014\320\014\036\230i\240q\250\013\2602\260Q";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_a_Q_A_5_1A[] = "\210\001\330\014\r\330\020\024\320\024&\240a\330\020\024\320\024%\240Q\330\020\024\220A\340\014\023\2205\230\013\2401\240A";
static const char __pyx_k_add_entity[] = "add_entity";
static const char __pyx_k_alias_hash[] = "alias_hash";
static const char __pyx_k_bytes_data[] = "bytes_data";
static const char __pyx_k_entry_hash[] = "entry_hash";
static const char __pyx_k_from_bytes[] = "from_bytes";
static const char __pyx_k_get_vector[] = "get_vector";
static const char __pyx_k_is_present[] = "is_present";
static const char __pyx_k_json_dumps[] = "json_dumps";
static const char __pyx_k_json_loads[] = "json_loads";
static const char __pyx_k_nr_aliases[] = "nr_aliases";
static const char __pyx_k_prior_prob[] = "prior_prob";
static const char __pyx_k_probs_dump[] = "probs_dump";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_A_q_F_3d_t1[] = "\200A\330\010\017\210q\220\004\220F\230(\240!\2403\240d\250%\250t\2601";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_alias_entry[] = "alias_entry";
static const char __pyx_k_alias_index[] = "alias_index";
static const char __pyx_k_current_sum[] = "current_sum";
static const char __pyx_k_deserialize[] = "deserialize";
static const char __pyx_k_ensure_path[] = "ensure_path";
static const char __pyx_k_entity_freq[] = "entity_freq";
static const char __pyx_k_entity_hash[] = "entity_hash";
static const char __pyx_k_entity_list[] = "entity_list";
static const char __pyx_k_entry_index[] = "entry index";
static const char __pyx_k_nr_entities[] = "nr_entities";
static const char __pyx_k_probs_lists[] = "probs_lists";
static const char __pyx_k_serializers[] = "serializers";
static const char __pyx_k_vector_list[] = "vector_list";
static const char __pyx_k_Iterable_str[] = "Iterable[str]";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_Writer_close[] = "Writer.close";
static const char __pyx_k_alias_hash_2[] = "alias hash";
static const char __pyx_k_alias_length[] = "alias length";
static const char __pyx_k_append_alias[] = "append_alias";
static const char __pyx_k_headers_dump[] = "headers_dump";
static const char __pyx_k_indices_dump[] = "indices_dump";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_set_entities[] = "set_entities";
static const char __pyx_k_strings_json[] = "strings.json";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_use_setstate[] = "use_setstate";
static const char __pyx_k_vector_index[] = "vector_index";
static const char __pyx_k_A_a_a_q_q_t9A[] = "\200A\360\006\000\t\n\360\020\000\t\n\360\032\000\t\n\360(\000\t\n\330\014\026\220a\330\014\036\230a\330\014\027\220q\330\014\027\220q\340\010\017\210t\2209\230A\230]\250!";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_entity_freq_2[] = "entity freq";
static const char __pyx_k_entity_hash_2[] = "entity hash";
static const char __pyx_k_entity_vector[] = "entity_vector";
static const char __pyx_k_entry_index_2[] = "entry_index";
static const char __pyx_k_entry_indices[] = "entry_indices";
static const char __pyx_k_indices_lists[] = "indices_lists";
static const char __pyx_k_nr_candidates[] = "nr_candidates";
static const char __pyx_k_probabilities[] = "probabilities";
static const char __pyx_k_read_contents[] = "read_contents";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_vector_length[] = "vector length";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_contains_alias[] = "contains_alias";
static const char __pyx_k_entity_vectors[] = "entity_vectors";
static const char __pyx_k_get_candidates[] = "get_candidates";
static const char __pyx_k_get_prior_prob[] = "get_prior_prob";
static const char __pyx_k_vector_element[] = "vector element";
static const char __pyx_k_vector_index_2[] = "vector index";
static const char __pyx_k_write_contents[] = "write_contents";
static const char __pyx_k_contains_entity[] = "contains_entity";
static const char __pyx_k_entities_length[] = "entities_length";
static const char __pyx_k_ignore_warnings[] = "ignore_warnings";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_InMemoryLookupKB[] = "InMemoryLookupKB";
static const char __pyx_k_SimpleFrozenList[] = "SimpleFrozenList";
static const char __pyx_k_candidate_length[] = "candidate length";
static const char __pyx_k_get_size_aliases[] = "get_size_aliases";
static const char __pyx_k_serialize_header[] = "serialize_header";
static const char __pyx_k_vector_element_2[] = "vector_element";
static const char __pyx_k_U_Qa_q_6_Qa_AQ_AQ[] = "\210\001\330\014\025\220U\230+\240Q\240a\330\014\032\230&\240\001\240\021\330\014\031\230\026\230q\240\001\330\014#\2406\250\021\250!\330\014\020\320\020%\240Q\240a\330\014\020\320\020$\240A\240Q\330\014\020\320\020$\240A\240Q\330\014\020\320\020(\250\001";
static const char __pyx_k_get_alias_strings[] = "get_alias_strings";
static const char __pyx_k_get_size_entities[] = "get_size_entities";
static const char __pyx_k_previous_alias_nr[] = "previous_alias_nr";
static const char __pyx_k_prior_probability[] = "prior probability";
static const char __pyx_k_serialize_aliases[] = "serialize_aliases";
static const char __pyx_k_serialize_entries[] = "serialize_entries";
static const char __pyx_k_Iterable_Candidate[] = "Iterable[Candidate]";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_candidate_length_2[] = "candidate_length";
static const char __pyx_k_candidate_length_3[] = "_candidate_length";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_deserialize_header[] = "deserialize_header";
static const char __pyx_k_get_entity_strings[] = "get_entity_strings";
static const char __pyx_k_initialize_aliases[] = "_initialize_aliases";
static const char __pyx_k_initialize_vectors[] = "_initialize_vectors";
static const char __pyx_k_0_Q_a_a_q_q_Kq_IQ_q[] = "\320\0040\260\005\260Q\360\006\000\t\n\360\024\000\t\n\360\006\000\t\n\360\032\000\t\n\360\036\000\t\n\330\014\026\220a\330\014\036\230a\330\014\027\220q\330\014\027\220q\340\010\014\210K\220q\230\014\240I\250Q\330\010\017\210q";
static const char __pyx_k_deserialize_aliases[] = "deserialize_aliases";
static const char __pyx_k_deserialize_entries[] = "deserialize_entries";
static const char __pyx_k_deserialize_vectors[] = "deserialize_vectors";
static const char __pyx_k_initialize_entities[] = "_initialize_entities";
static const char __pyx_k_entity_vector_length[] = "entity_vector_length";
static const char __pyx_k_get_alias_candidates[] = "get_alias_candidates";
static const char __pyx_k_probabilities_length[] = "probabilities_length";
static const char __pyx_k_spacy_kb_kb_in_memory[] = "spacy.kb.kb_in_memory";
static const char __pyx_k_to_disk_locals_lambda[] = "to_disk.<locals>.<lambda>";
static const char __pyx_k_Reader___reduce_cython[] = "Reader.__reduce_cython__";
static const char __pyx_k_Writer___reduce_cython[] = "Writer.__reduce_cython__";
static const char __pyx_k_to_bytes_locals_lambda[] = "to_bytes.<locals>.<lambda>";
static const char __pyx_k_from_disk_locals_lambda[] = "from_disk.<locals>.<lambda>";
static const char __pyx_k_InMemoryLookupKB_to_disk[] = "InMemoryLookupKB.to_disk";
static const char __pyx_k_Reader___setstate_cython[] = "Reader.__setstate_cython__";
static const char __pyx_k_Writer___setstate_cython[] = "Writer.__setstate_cython__";
static const char __pyx_k_A_fHAQ_wd_1E_Q_d_q_t_4y_Q[] = "\200A\330\010\"\240$\240f\250H\260A\260Q\360\006\000\t\014\210<\220w\230d\240!\330\014\023\2201\220E\230\024\230Q\330\010\026\220d\230-\240q\250\001\340\010\017\210t\220?\240!\2404\240y\260\001\260\034\270Q";
static const char __pyx_k_InMemoryLookupKB_is_empty[] = "InMemoryLookupKB.is_empty";
static const char __pyx_k_InMemoryLookupKB_to_bytes[] = "InMemoryLookupKB.to_bytes";
static const char __pyx_k_spacy_kb_kb_in_memory_pyx[] = "spacy/kb/kb_in_memory.pyx";
static const char __pyx_k_InMemoryLookupKB_add_alias[] = "InMemoryLookupKB.add_alias";
static const char __pyx_k_InMemoryLookupKB_from_disk[] = "InMemoryLookupKB.from_disk";
static const char __pyx_k_InMemoryLookupKB_add_entity[] = "InMemoryLookupKB.add_entity";
static const char __pyx_k_InMemoryLookupKB_from_bytes[] = "InMemoryLookupKB.from_bytes";
static const char __pyx_k_InMemoryLookupKB_get_vector[] = "InMemoryLookupKB.get_vector";
static const char __pyx_k_U_Qa_f_5Q__A_XQ_Q_1_IQe1_M_Q[] = "\210\001\340\014\025\220U\230+\240Q\240a\330\014\020\220\001\330\014\021\220\035\230f\320$5\260Q\330\020\025\220_\240A\330\020\025\220X\230Q\330\020\025\320\025%\240Q\330\020\025\220^\2401\330\020\024\220I\230Q\230e\2401\330\020\024\220M\240\021\240/\260\021\330\020\025\220Q";
static const char __pyx_k_write_contents_locals_lambda[] = "write_contents.<locals>.<lambda>";
static const char __pyx_k_InMemoryLookupKB_append_alias[] = "InMemoryLookupKB.append_alias";
static const char __pyx_k_InMemoryLookupKB_set_entities[] = "InMemoryLookupKB.set_entities";
static const char __pyx_k_pyx_unpickle_InMemoryLookupKB[] = "__pyx_unpickle_InMemoryLookupKB";
static const char __pyx_k_1_V81A_gT_1_it_AQ_d_q_Q_d_1L_d[] = "\320\0041\260\021\360\016\000\t\"\240\024\240V\2508\2601\260A\330\010\013\210;\220g\230T\240\021\330\014\023\2201\330\010\026\220i\230t\240=\260\004\260A\260Q\330\010\026\220d\230/\250\021\250!\340\010\017\210q\220\t\230\021\230#\230Q\330\032&\240d\250)\2601\260L\300\001\330\032&\240d\250)\2601\260L\300\001\330\032(\250\004\250O\2701\330\036\"\240)\2501\250L\270\001\340\032%\240Q\330\032%\240Q\330\020\025\220]\240/\260\023\260A\330\024\037\320\037/\250{\270!\340\020\023\220<\230s\240!";
static const char __pyx_k_55EQ_1_4t7_axq_4t7_AV5_q_A_A_A[] = "\320\004%\320%5\3205E\300Q\330\010\017\210{\230!\2301\330\010\013\2104\210t\2207\230!\330\014\020\220\006\220a\220x\230q\330\010\013\2104\210t\2207\230!\330\014\022\220*\230A\230V\2405\250\007\250q\260\004\260A\330\010\024\220A\330\010\021\220\021\220.\240\001\330\010\021\220\021\320\022$\240A\330\010\014\210H\220A\220V\230;\240a";
static const char __pyx_k_77Gq_1_4t7_AV5_q_A_4t7_AV5_q_A[] = "\320\004'\320'7\3207G\300q\330\010\017\210{\230!\2301\330\010\013\2104\210t\2207\230!\330\014\022\220*\230A\230V\2405\250\007\250q\260\004\260A\330\010\013\2104\210t\2207\230!\330\014\022\220*\230A\230V\2405\250\007\250q\260\004\260A\330\0107\260q\330\010\023\2201\220N\240!\330\010\023\2201\320\024&\240a\330\010\014\210J\220a\220v\230]\250!";
static const char __pyx_k_InMemoryLookupKB_read_contents[] = "InMemoryLookupKB.read_contents";
static const char __pyx_k_T_5T_D_W_mmq_r_C_C_G_G_b_b_h_h[] = "\200\001\360\010\000\005\016\210T\220\037\240\004\320$5\260T\270\033\300D\310\017\320W[\320[m\320mq\360\000\000r\001C\002\360\000\000C\002G\002\360\000\000G\002^\002\360\000\000^\002b\002\360\000\000b\002h\002\360\000\000h\002l\002\360\000\000l\002m\002\330\004\014\210G\2201\220F\230,\240a\330\004\007\200v\210W\220A\330\010\022\220!\330\010\027\220q\340\010\027\220t\230>\250\027\260\005\260S\270\004\270N\310'\320QV\320VY\320Y]\320]n\320nu\320uz\320z}\360\000\000~\001B\002\360\000\000B\002G\002\360\000\000G\002N\002\360\000\000N\002S\002\360\000\000S\002V\002\360\000\000V\002Z\002\360\000\000Z\002a\002\360\000\000a\002h\002\360\000\000h\002i\002\330\004\007\200q\330\010\017\320\0171\260\024\260Q\260g\270[\310\007\310q\340\010\017\320\0171\260\024\260Q\260g\270[\310\001";
static const char __pyx_k_hk_A_1_c_c_e_e_f_81A_7_2_3FnTU[] = "\200\001\360\006\000\005\010\200\220h\230k\250\033\260A\330\010\r\210^\2301\330\010\016\320\016!\360\000\000\"c\003\360\000\000c\003e\003\360\000\000e\003f\003\330\004\023\320\023#\2408\2501\250A\330\004\007\200|\2207\230!\330\0102\260!\3203F\300n\320TU\330\004\013\2101";
static const char __pyx_k_uKq_e_axq_e_axq_E_AXQa_Qiy_0_a[] = "\210\001\340\014\020\220\001\330\014\027\220u\230K\240q\250\001\330\014\026\220e\230;\240a\240x\250q\260\001\330\014\026\220e\230;\240a\240x\250q\260\001\330\014\024\220E\230\033\240A\240X\250Q\250a\330\014\020\220\010\230\t\240\031\250#\250Q\250i\260y\300\001\330\020\034\320\0340\260\001\330\020\025\320\025&\240a\330\020\025\220Y\230a\330\020\024\220O\2401\240E\250\021\330\020\024\220M\240\021\240.\260\001\330\020\025\220Q";
static const char __pyx_k_AGH_V81A_gT_AV5_q_a_fHAQ_wd_AV5[] = "\200A\330GH\360\030\000\t\"\240\024\240V\2508\2601\260A\330\010\013\210;\220g\230T\240\021\330\014\022\220*\230A\230V\2405\250\007\250q\260\006\260a\360\006\000\t#\240$\240f\250H\260A\260Q\330\010\013\210<\220w\230d\240!\330\014\022\220*\230A\230V\2405\250\007\250q\260\007\260q\330\010\026\220i\230t\240=\260\004\260A\260Q\360\010\000\t\027\220i\230t\240=\260\004\260A\260Q\330\010\026\220d\230/\250\021\250!\330\010\026\220c\230\021\230!\2302\230T\240\025\240k\260\021\330\010\022\220,\230b\240\001\340\010\013\2108\2202\220Q\330\014\022\220*\230A\230V\2405\250\007\250q\260\006\260g\270T\300\021\340\010\030\230\013\2401\340\010\025\220Q\330\010\014\210E\220\025\220a\220}\240E\250\021\330\014\017\210}\230A\230S\240\003\2403\240a\240q\330\020\035\230Q\340\010\013\2101\330\014\017\210t\2201\330\020\030\230\005\230Q\230h\240e\2507\260!\2607\270(\300&\310\001\340\014\031\230\032\2401\240C\240q\250\001\330\014\027\320\027(\250\001\340\014\024\220K\230q\330\014\021\220\032\2301\230E\240\021\240!\330\014\027\220y\240\001\330\014\020\220\017\230q\240\017\250q";
static const char __pyx_k_A_V81A_fHAQ_wd_gT_1_it_AQ_d_q_d[] = "\200A\360\010\000\t\"\240\024\240V\2508\2601\260A\330\010\"\240$\240f\250H\260A\260Q\340\010\013\210<\220w\230d\240.\260\003\260;\270g\300T\310\021\330\014\023\2201\340\010\026\220i\230t\240=\260\004\260A\260Q\330\010\026\220d\230-\240q\250\001\340\010\026\220d\230/\250\021\250!\330\010\r\210]\230/\250\023\250A\330\014\027\320\027'\240{\260!\340\014\017\210t\2209\230A\230\\\250\035\260c\270\021\330\020\027\220q\340\010\017\210q";
static const char __pyx_k_InMemoryLookupKB_contains_alias[] = "InMemoryLookupKB.contains_alias";
static const char __pyx_k_InMemoryLookupKB_get_candidates[] = "InMemoryLookupKB.get_candidates";
static const char __pyx_k_InMemoryLookupKB_get_prior_prob[] = "InMemoryLookupKB.get_prior_prob";
static const char __pyx_k_InMemoryLookupKB_write_contents[] = "InMemoryLookupKB.write_contents";
static const char __pyx_k_Q_O6_M_t4q_IQa_uM_A_3a_gRuN_we1[] = "\210\001\330\014\020\220\001\330\014\025\220Q\330\014\020\220\014\230O\2506\260\021\330\020\024\220M\240\026\240t\2504\250q\340\020\030\230\004\230I\240Q\240a\330\020\027\220u\230M\250\023\250A\330\020\027\220|\2403\240a\330\020\026\220g\230R\230u\240N\260%\260w\270e\3001\330\020\024\220B\220b\230\001\330\014\023\2205\230\013\2401\240A";
static const char __pyx_k_a_A_O6_M_t4q_O1A_3a_3auA_wb_A_W[] = "\210\001\330\014\020\220\001\330\014\026\220a\330\014\034\230A\330\014\032\230!\330\014\020\220\014\230O\2506\260\021\330\020\024\220M\240\026\240t\2504\250q\340\020\030\230\004\230O\2501\250A\330\020\027\220|\2403\240a\330\020#\2403\240a\240u\250A\330\020\027\220w\230b\240\014\250A\330\020\035\230W\240A\240U\250!\330\020\033\2307\240!\2405\250\001\330\020\024\220B\220b\230\001\330\014\033\2305\240\013\2501\250A\330\014\033\2305\240\013\2501\250A\330\014\031\230\025\230k\250\021\250!\330\014\023\2205\230\013\2402\240^\260>\300\021";
static const char __pyx_k_self__fp_cannot_be_converted_to[] = "self._fp cannot be converted to a Python object for pickling";
static const char __pyx_k_A_3a_Cs_c_A_S_AV1_c_Qa_A_b_Qa_fH[] = "\200A\330\010\013\2103\210a\210}\230C\230s\240!\240;\250c\260\023\260A\260]\300#\300S\310\001\310\021\330\014\022\220*\230A\230V\2401\340\010\026\220c\230\021\230#\230Q\230a\330\010\014\320\014!\240\021\240!\330\010\014\320\014 \240\001\240\021\340\010\014\210A\360\006\000\t\017\210b\220\002\220#\220Q\220a\340\014\032\230$\230f\240H\250D\260\001\260\033\270A\270Q\330\014\017\210|\2303\230d\240!\330\020\030\230\005\230Q\230h\240e\2507\260!\2607\270+\300Q\300a\360\006\000\021!\240\013\2501\250A\330\020\023\2203\220a\220\240c\250\024\250Q\330\024\032\230*\240A\330\030\036\230e\2407\250!\330\034\"\240#\240Q\240a\330\034%\240T\250\021\360\010\000\021\026\220_\240A\330\020\025\220X\230Y\240a\240q\340\020\024\220O\2401\240E\250\021\330\020\025\320\025%\240Q\340\020\025\220^\2401\340\020\024\220I\230Q\230a\230q\240\005\240Q\330\020\024\220M\240\021\240/\260\021\260!\2601\340\014\021\220\021";
static const char __pyx_k_A_6_E_Cq_s_AV5_q_a_D_1_4s_S_1A_A[] = "\200A\360\n\000\t\014\2106\220\023\220E\230\023\230C\230q\240\007\240s\250!\330\014\022\220*\230A\230V\2405\250\007\250q\260\006\260a\340\010\034\230D\320 1\260\021\340\010\013\2104\210s\220!\220:\230S\240\003\2401\240A\330\014\022\220*\230A\330\020\026\220e\2307\240!\330\024\032\230!\330\024$\240C\240q\250\001\330\024)\250\023\250A\250Q\360\n\000\t\024\2203\220a\220q\330\010\013\2109\220B\220a\330\014\022\220*\230A\230V\2405\250\007\250q\260\006\260g\270T\300\021\340\010!\240\024\240V\2508\2604\260q\270\001\360\006\000\t\014\210;\220c\230\024\230Q\330\014\024\220E\230\021\230(\240%\240w\250a\250v\260Q\330\014\r\360\n\000\t\r\210H\220H\230C\230q\240\n\250!\330\014\032\230$\230f\240H\250A\250Q\330\014\017\210|\2307\240$\240a\330\020\026\220j\240\001\240\026\240u\250G\2601\260G\2701\340\014\032\230)\2404\240}\260D\270\001\270\021\330\014\031\230\032\2401\240C\240q\250\001\330\014\021\220\032\2301\230E\240\021\240!\340\010\024\220D\230\016\240a\330\0271\3201F\300a\340\010\014\210M\230\021\230.\250\001\340\010\013\320\013\035\230R\230r\240\023\240D\320(9\270\021\330\014\022\220,\230a\230v\240U\250'\260\021\260&\270\001\330\010\017\210q";
static const char __pyx_k_A_V1A_l_1M_A_Q_Q_b_IQa_Ba_1A_Qe1[] = "\200A\360\024\000\t\036\230V\2401\240A\360\n\000\t\017\210l\230!\2301\230M\250\021\250!\340\010\014\320\014!\240\021\240!\330\010\014\320\014 \240\001\240\021\330\010\014\320\014$\240A\360\006\000\t\026\220Q\330\010\025\220Q\330\010\016\210b\220\002\220!\330\014\034\230I\240Q\240a\330\014\020\220\001\330\014\022\220\"\220B\220a\330\020\026\320\026*\250!\2501\250A\330\020\035\230Q\230e\2401\330\020\024\220A\220Q\220a\330\014\020\220\017\230q\240\005\240Q\330\014\020\220\001\220\021\220!\360\n\000\t\r\210A\330\010\016\210b\220\003\2201\330\014\022\220+\230Q\230a\230}\250A\250V\2601\260A\340\014\021\220\037\240\001\330\014\021\220\030\230\021\330\014\021\320\021!\240\021\330\014\021\220\036\230q\340\014\020\220\t\230\021\230%\230q\330\014\020\220\r\230Q\230o\250Q\340\014\021\220\021\360\006\000\t\020\210|\2303\230d\320\"4\260A\360\010\000\t\017\320\016 \240\001\240\021\240!\330\010\014\320\014 \240\001\240\021\360\014\000\t\r\210A\360\006\000\t\017\210b\220\003\2201\330\014\022\320\022$\240A\240Q\240l\260!\2601\330\014\"\240)\2501\250A\330\014\032\230'\240\021\240!\340\014\020\220\005\220U\230!\2303\230a\330\020\026\220k\240\021\240!\240=\260\001\260\021\330\020\035\230Q\230e\2401\330\020\025\220Q\220e\2301\340\014\021\320\021\"\240!\330\014\021\220\031\230!\340\014\020\220\017\230q\240\005\240Q\330\014\020\220\r\230Q\230n\250A\340\014\021\220\021\360\006\000\t\020\210{\230#\230T\320!2\260!";
static const char __pyx_k_A_V1A_m1D_2_d_A_T_1_1A_A_L_vQ_V4[] = "\200A\330\010\035\230V\2401\240A\330\010\016\210m\2301\230D\320 2\260$\260d\270!\360\006\000\t\r\210A\330\010\014\320\014\035\230T\240\021\330\014\020\220\013\2301\330\020\026\320\026+\2501\250A\330\014\020\220\001\220\021\220!\360\014\000\t\r\210A\330\010\014\210L\230\017\240v\250Q\330\014\020\220\r\230V\2404\240t\2501\340\014\024\220D\230\t\240\021\240!\330\014\023\2205\230\r\240S\250\001\330\014\023\220<\230s\240!\330\014\022\220,\230a\230u\240N\260%\260w\270e\3001\330\014\020\220\001\220\021\220!\340\010\016\320\016!\240\021\240$\320&7\260q\360\010\000\t\r\210A\330\010\014\210L\230\017\240v\250Q\330\020\024\220M\240\026\240t\2504\250q\340\014\024\220D\230\017\240q\250\001\330\014\023\220<\230s\240!\340\014\037\230s\240!\2405\250\001\330\014\022\320\022%\240Q\240l\260!\340\014\020\220\005\220U\230!\2303\230a\330\020\026\220l\240!\2405\250\016\260a\260t\2705\300\006\300a\300q\340\014\020\220\001\220\021\220!\340\010\016\210f\220A";
static const char __pyx_k_A_fHD_s_a_E_wawa_3a_c_Q_A_e7_Q_i[] = "\200A\360\014\000\t#\240$\240f\250H\260D\270\001\270\021\360\006\000\t\014\210<\220s\230$\230a\330\014\024\220E\230\021\230(\240%\240w\250a\250w\260a\330\014\r\360\006\000\t\014\2103\210a\210\230c\240\024\240Q\330\014\022\220*\230A\330\020\026\220e\2307\240!\330\024\032\230#\230Q\320\036.\250i\260t\2701\360\010\000\t\030\220t\230=\250\017\260q\340\010\024\220D\230\r\240Q\330\030\031\330\021\022\330\031\032\330\027\030\340\010\014\210M\230\021\230/\250\021\340\010\017\210q";
static const char __pyx_k_InMemoryLookupKB___reduce_cython[] = "InMemoryLookupKB.__reduce_cython__";
static const char __pyx_k_InMemoryLookupKB___setstate_cyth[] = "InMemoryLookupKB.__setstate_cython__";
static const char __pyx_k_InMemoryLookupKB__initialize_ali[] = "InMemoryLookupKB._initialize_aliases";
static const char __pyx_k_InMemoryLookupKB__initialize_ent[] = "InMemoryLookupKB._initialize_entities";
static const char __pyx_k_InMemoryLookupKB__initialize_vec[] = "InMemoryLookupKB._initialize_vectors";
static const char __pyx_k_InMemoryLookupKB_contains_entity[] = "InMemoryLookupKB.contains_entity";
static const char __pyx_k_InMemoryLookupKB_get_alias_candi[] = "InMemoryLookupKB.get_alias_candidates";
static const char __pyx_k_InMemoryLookupKB_get_alias_strin[] = "InMemoryLookupKB.get_alias_strings";
static const char __pyx_k_InMemoryLookupKB_get_entity_stri[] = "InMemoryLookupKB.get_entity_strings";
static const char __pyx_k_InMemoryLookupKB_get_size_aliase[] = "InMemoryLookupKB.get_size_aliases";
static const char __pyx_k_InMemoryLookupKB_get_size_entiti[] = "InMemoryLookupKB.get_size_entities";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0xc524dce, 0x501cf2a, 0x09523a4) = (_alias_index, _aliases_table, _entries, _entry_index, _features_table, _vectors_table, entity_vector_length, mem, vocab))";
static const char __pyx_k_No_value_specified_for_struct_at[] = "No value specified for struct attribute 'entry_indices'";
static const char __pyx_k_Note_that_Cython_is_deliberately[] = "Note that Cython is deliberately stricter than PEP-484 and rejects subclasses of builtin types. If you need to pass subclasses then set the 'annotation_typing' directive to False.";
static const char __pyx_k_from_bytes_locals_deserialize_al[] = "from_bytes.<locals>.deserialize_aliases";
static const char __pyx_k_from_bytes_locals_deserialize_en[] = "from_bytes.<locals>.deserialize_entries";
static const char __pyx_k_from_bytes_locals_deserialize_he[] = "from_bytes.<locals>.deserialize_header";
static const char __pyx_k_from_bytes_locals_deserialize_ve[] = "from_bytes.<locals>.deserialize_vectors";
static const char __pyx_k_numpy__core_multiarray_failed_to[] = "numpy._core.multiarray failed to import";
static const char __pyx_k_numpy__core_umath_failed_to_impo[] = "numpy._core.umath failed to import";
static const char __pyx_k_to_bytes_locals_serialize_aliase[] = "to_bytes.<locals>.serialize_aliases.<locals>.<lambda>";
static const char __pyx_k_to_bytes_locals_serialize_entrie[] = "to_bytes.<locals>.serialize_entries.<locals>.<lambda>";
static const char __pyx_k_to_bytes_locals_serialize_header[] = "to_bytes.<locals>.serialize_header";
static const char __pyx_k_No_value_specified_for_struct_at_2[] = "No value specified for struct attribute 'probs'";
static const char __pyx_k_No_value_specified_for_struct_at_3[] = "No value specified for struct attribute 'entity_hash'";
static const char __pyx_k_No_value_specified_for_struct_at_4[] = "No value specified for struct attribute 'vector_index'";
static const char __pyx_k_No_value_specified_for_struct_at_5[] = "No value specified for struct attribute 'feats_row'";
static const char __pyx_k_No_value_specified_for_struct_at_6[] = "No value specified for struct attribute 'freq'";
static const char __pyx_k_to_bytes_locals_serialize_aliase_2[] = "to_bytes.<locals>.serialize_aliases";
static const char __pyx_k_to_bytes_locals_serialize_entrie_2[] = "to_bytes.<locals>.serialize_entries";
/* #### Code section: decls ### */
static int __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB___init__(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, struct __pyx_obj_5spacy_5vocab_Vocab *__pyx_v_vocab, PyObject *__pyx_v_entity_vector_length); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_2_initialize_entities(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, int64_t __pyx_v_nr_entities); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_4_initialize_vectors(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, int64_t __pyx_v_nr_entities); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_6_initialize_aliases(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, int64_t __pyx_v_nr_aliases); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8is_empty(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_10__len__(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_12get_size_entities(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_14get_entity_strings(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_16get_size_aliases(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_18get_alias_strings(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_20add_entity(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_entity, float __pyx_v_freq, std::vector<float>  __pyx_v_entity_vector); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_22set_entities(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_entity_list, PyObject *__pyx_v_freq_list, PyObject *__pyx_v_vector_list); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_24contains_entity(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_entity); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_26contains_alias(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_alias); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_28add_alias(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_alias, PyObject *__pyx_v_entities, PyObject *__pyx_v_probabilities); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_30append_alias(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_alias, PyObject *__pyx_v_entity, float __pyx_v_prior_prob, PyObject *__pyx_v_ignore_warnings); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_32get_candidates(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_mention); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_34get_alias_candidates(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_alias); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_36get_vector(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_entity); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_38get_prior_prob(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_entity, PyObject *__pyx_v_alias); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_serialize_header(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_2serialize_entries(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_4serialize_aliases(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda2(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_40to_bytes(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_10from_bytes_deserialize_header(PyObject *__pyx_self, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_10from_bytes_2deserialize_vectors(PyObject *__pyx_self, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_10from_bytes_4deserialize_entries(PyObject *__pyx_self, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_10from_bytes_6deserialize_aliases(PyObject *__pyx_self, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_42from_bytes(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_bytes_data, PyObject *__pyx_v_exclude); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_p); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda4(PyObject *__pyx_self, PyObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_44to_disk(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_path, PyObject *__pyx_v_exclude); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda5(PyObject *__pyx_self, PyObject *__pyx_v_p); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda6(PyObject *__pyx_self, PyObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_46from_disk(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_path, PyObject *__pyx_v_exclude); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda7(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_48write_contents(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_file_path); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_50read_contents(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_file_path); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_52__reduce_cython__(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_54__setstate_cython__(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5spacy_2kb_12kb_in_memory_6Writer___init__(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer *__pyx_v_self, PyObject *__pyx_v_path); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_6Writer_2close(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_6Writer_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_6Writer_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5spacy_2kb_12kb_in_memory_Writer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5spacy_2kb_12kb_in_memory_6Reader___init__(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader *__pyx_v_self, PyObject *__pyx_v_path); /* proto */
static void __pyx_pf_5spacy_2kb_12kb_in_memory_6Reader_2__dealloc__(struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_6Reader_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_6Reader_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5spacy_2kb_12kb_in_memory_Reader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory___pyx_unpickle_InMemoryLookupKB(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_5spacy_2kb_12kb_in_memory_InMemoryLookupKB(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5spacy_2kb_12kb_in_memory_Writer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5spacy_2kb_12kb_in_memory_Reader(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5spacy_2kb_12kb_in_memory___pyx_scope_struct_1_from_bytes(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5spacy_2kb_12kb_in_memory___pyx_scope_struct_2_to_disk(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5spacy_2kb_12kb_in_memory___pyx_scope_struct_3_from_disk(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
/* SmallCodeConfig */
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  PyTypeObject *__pyx_ptype_5cymem_5cymem_PyMalloc;
  PyTypeObject *__pyx_ptype_5cymem_5cymem_PyFree;
  PyTypeObject *__pyx_ptype_5cymem_5cymem_Pool;
  PyTypeObject *__pyx_ptype_5cymem_5cymem_Address;
  PyTypeObject *__pyx_ptype_7preshed_4maps_PreshMap;
  PyTypeObject *__pyx_ptype_7preshed_4maps_PreshMapArray;
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  PyTypeObject *__pyx_ptype_5numpy_dtype;
  PyTypeObject *__pyx_ptype_5numpy_flatiter;
  PyTypeObject *__pyx_ptype_5numpy_broadcast;
  PyTypeObject *__pyx_ptype_5numpy_ndarray;
  PyTypeObject *__pyx_ptype_5numpy_generic;
  PyTypeObject *__pyx_ptype_5numpy_number;
  PyTypeObject *__pyx_ptype_5numpy_integer;
  PyTypeObject *__pyx_ptype_5numpy_signedinteger;
  PyTypeObject *__pyx_ptype_5numpy_unsignedinteger;
  PyTypeObject *__pyx_ptype_5numpy_inexact;
  PyTypeObject *__pyx_ptype_5numpy_floating;
  PyTypeObject *__pyx_ptype_5numpy_complexfloating;
  PyTypeObject *__pyx_ptype_5numpy_flexible;
  PyTypeObject *__pyx_ptype_5numpy_character;
  PyTypeObject *__pyx_ptype_5numpy_ufunc;
  PyTypeObject *__pyx_ptype_5spacy_7strings_StringStore;
  PyTypeObject *__pyx_ptype_5spacy_10morphology_Morphology;
  PyTypeObject *__pyx_ptype_5spacy_5vocab_Vocab;
  PyTypeObject *__pyx_ptype_5spacy_2kb_2kb_KnowledgeBase;
  PyObject *__pyx_type_5spacy_2kb_12kb_in_memory_InMemoryLookupKB;
  PyObject *__pyx_type_5spacy_2kb_12kb_in_memory_Writer;
  PyObject *__pyx_type_5spacy_2kb_12kb_in_memory_Reader;
  PyObject *__pyx_type_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes;
  PyObject *__pyx_type_5spacy_2kb_12kb_in_memory___pyx_scope_struct_1_from_bytes;
  PyObject *__pyx_type_5spacy_2kb_12kb_in_memory___pyx_scope_struct_2_to_disk;
  PyObject *__pyx_type_5spacy_2kb_12kb_in_memory___pyx_scope_struct_3_from_disk;
  PyTypeObject *__pyx_ptype_5spacy_2kb_12kb_in_memory_InMemoryLookupKB;
  PyTypeObject *__pyx_ptype_5spacy_2kb_12kb_in_memory_Writer;
  PyTypeObject *__pyx_ptype_5spacy_2kb_12kb_in_memory_Reader;
  PyTypeObject *__pyx_ptype_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes;
  PyTypeObject *__pyx_ptype_5spacy_2kb_12kb_in_memory___pyx_scope_struct_1_from_bytes;
  PyTypeObject *__pyx_ptype_5spacy_2kb_12kb_in_memory___pyx_scope_struct_2_to_disk;
  PyTypeObject *__pyx_ptype_5spacy_2kb_12kb_in_memory___pyx_scope_struct_3_from_disk;
  __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_pop;
  __Pyx_CachedCFunction __pyx_umethod_PyBytes_Type__encode;
  PyObject *__pyx_k__2;
  PyObject *__pyx_k__3;
  PyObject *__pyx_k__4;
  PyObject *__pyx_tuple[2];
  PyObject *__pyx_codeobj_tab[48];
  PyObject *__pyx_string_tab[293];
  PyObject *__pyx_float_0_0;
  PyObject *__pyx_float_1_00001;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_9773988;
  PyObject *__pyx_int_84004650;
  PyObject *__pyx_int_206720462;
/* #### Code section: module_state_contents ### */
/* CachedMethodType.module_state_decls */
#if CYTHON_COMPILING_IN_LIMITED_API
PyObject *__Pyx_CachedMethodType;
#endif


#if CYTHON_USE_FREELISTS
struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes *__pyx_freelist_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes[8];
int __pyx_freecount_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes;
#endif

#if CYTHON_USE_FREELISTS
struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct_1_from_bytes *__pyx_freelist_5spacy_2kb_12kb_in_memory___pyx_scope_struct_1_from_bytes[8];
int __pyx_freecount_5spacy_2kb_12kb_in_memory___pyx_scope_struct_1_from_bytes;
#endif

#if CYTHON_USE_FREELISTS
struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct_2_to_disk *__pyx_freelist_5spacy_2kb_12kb_in_memory___pyx_scope_struct_2_to_disk[8];
int __pyx_freecount_5spacy_2kb_12kb_in_memory___pyx_scope_struct_2_to_disk;
#endif

#if CYTHON_USE_FREELISTS
struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct_3_from_disk *__pyx_freelist_5spacy_2kb_12kb_in_memory___pyx_scope_struct_3_from_disk[8];
int __pyx_freecount_5spacy_2kb_12kb_in_memory___pyx_scope_struct_3_from_disk;
#endif
/* CodeObjectCache.module_state_decls */
struct __Pyx_CodeObjectCache __pyx_code_cache;

/* #### Code section: module_state_end ### */
} __pyx_mstatetype;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate_global (__Pyx_PyModule_GetState(__Pyx_State_FindModule(&__pyx_moduledef)))

#define __pyx_m (__Pyx_State_FindModule(&__pyx_moduledef))
#else
static __pyx_mstatetype __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstatetype * const __pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: constant_name_defines ### */
#define __pyx_n_u_ __pyx_string_tab[0]
#define __pyx_kp_u_ __pyx_string_tab[1]
#define __pyx_n_u_Any __pyx_string_tab[2]
#define __pyx_n_u_AssertionError __pyx_string_tab[3]
#define __pyx_n_u_Callable __pyx_string_tab[4]
#define __pyx_n_u_Candidate __pyx_string_tab[5]
#define __pyx_n_u_Dict __pyx_string_tab[6]
#define __pyx_n_u_E132 __pyx_string_tab[7]
#define __pyx_n_u_E133 __pyx_string_tab[8]
#define __pyx_n_u_E134 __pyx_string_tab[9]
#define __pyx_n_u_E140 __pyx_string_tab[10]
#define __pyx_n_u_E141 __pyx_string_tab[11]
#define __pyx_n_u_E145 __pyx_string_tab[12]
#define __pyx_n_u_E146 __pyx_string_tab[13]
#define __pyx_n_u_E176 __pyx_string_tab[14]
#define __pyx_n_u_E890 __pyx_string_tab[15]
#define __pyx_n_u_E891 __pyx_string_tab[16]
#define __pyx_n_u_E928 __pyx_string_tab[17]
#define __pyx_n_u_E929 __pyx_string_tab[18]
#define __pyx_n_u_Errors __pyx_string_tab[19]
#define __pyx_n_u_IOError __pyx_string_tab[20]
#define __pyx_n_u_ImportError __pyx_string_tab[21]
#define __pyx_n_u_InMemoryLookupKB __pyx_string_tab[22]
#define __pyx_n_u_InMemoryLookupKB___reduce_cython __pyx_string_tab[23]
#define __pyx_n_u_InMemoryLookupKB___setstate_cyth __pyx_string_tab[24]
#define __pyx_n_u_InMemoryLookupKB__initialize_ali __pyx_string_tab[25]
#define __pyx_n_u_InMemoryLookupKB__initialize_ent __pyx_string_tab[26]
#define __pyx_n_u_InMemoryLookupKB__initialize_vec __pyx_string_tab[27]
#define __pyx_n_u_InMemoryLookupKB_add_alias __pyx_string_tab[28]
#define __pyx_n_u_InMemoryLookupKB_add_entity __pyx_string_tab[29]
#define __pyx_n_u_InMemoryLookupKB_append_alias __pyx_string_tab[30]
#define __pyx_n_u_InMemoryLookupKB_contains_alias __pyx_string_tab[31]
#define __pyx_n_u_InMemoryLookupKB_contains_entity __pyx_string_tab[32]
#define __pyx_n_u_InMemoryLookupKB_from_bytes __pyx_string_tab[33]
#define __pyx_n_u_InMemoryLookupKB_from_disk __pyx_string_tab[34]
#define __pyx_n_u_InMemoryLookupKB_get_alias_candi __pyx_string_tab[35]
#define __pyx_n_u_InMemoryLookupKB_get_alias_strin __pyx_string_tab[36]
#define __pyx_n_u_InMemoryLookupKB_get_candidates __pyx_string_tab[37]
#define __pyx_n_u_InMemoryLookupKB_get_entity_stri __pyx_string_tab[38]
#define __pyx_n_u_InMemoryLookupKB_get_prior_prob __pyx_string_tab[39]
#define __pyx_n_u_InMemoryLookupKB_get_size_aliase __pyx_string_tab[40]
#define __pyx_n_u_InMemoryLookupKB_get_size_entiti __pyx_string_tab[41]
#define __pyx_n_u_InMemoryLookupKB_get_vector __pyx_string_tab[42]
#define __pyx_n_u_InMemoryLookupKB_is_empty __pyx_string_tab[43]
#define __pyx_n_u_InMemoryLookupKB_read_contents __pyx_string_tab[44]
#define __pyx_n_u_InMemoryLookupKB_set_entities __pyx_string_tab[45]
#define __pyx_n_u_InMemoryLookupKB_to_bytes __pyx_string_tab[46]
#define __pyx_n_u_InMemoryLookupKB_to_disk __pyx_string_tab[47]
#define __pyx_n_u_InMemoryLookupKB_write_contents __pyx_string_tab[48]
#define __pyx_kp_u_Incompatible_checksums_0x_x_vs_0 __pyx_string_tab[49]
#define __pyx_n_u_Iterable __pyx_string_tab[50]
#define __pyx_kp_u_Iterable_Candidate __pyx_string_tab[51]
#define __pyx_kp_u_Iterable_str __pyx_string_tab[52]
#define __pyx_n_u_KeyError __pyx_string_tab[53]
#define __pyx_n_u_MemoryError __pyx_string_tab[54]
#define __pyx_kp_u_No_value_specified_for_struct_at __pyx_string_tab[55]
#define __pyx_kp_u_No_value_specified_for_struct_at_2 __pyx_string_tab[56]
#define __pyx_kp_u_No_value_specified_for_struct_at_3 __pyx_string_tab[57]
#define __pyx_kp_u_No_value_specified_for_struct_at_4 __pyx_string_tab[58]
#define __pyx_kp_u_No_value_specified_for_struct_at_5 __pyx_string_tab[59]
#define __pyx_kp_u_No_value_specified_for_struct_at_6 __pyx_string_tab[60]
#define __pyx_kp_u_Note_that_Cython_is_deliberately __pyx_string_tab[61]
#define __pyx_n_u_Path __pyx_string_tab[62]
#define __pyx_n_u_PickleError __pyx_string_tab[63]
#define __pyx_n_u_Reader __pyx_string_tab[64]
#define __pyx_n_u_Reader___reduce_cython __pyx_string_tab[65]
#define __pyx_n_u_Reader___setstate_cython __pyx_string_tab[66]
#define __pyx_n_u_RuntimeError __pyx_string_tab[67]
#define __pyx_n_u_SimpleFrozenList __pyx_string_tab[68]
#define __pyx_n_u_Span __pyx_string_tab[69]
#define __pyx_n_u_TypeError __pyx_string_tab[70]
#define __pyx_n_u_ValueError __pyx_string_tab[71]
#define __pyx_n_u_W017 __pyx_string_tab[72]
#define __pyx_n_u_W018 __pyx_string_tab[73]
#define __pyx_n_u_W024 __pyx_string_tab[74]
#define __pyx_n_u_Warnings __pyx_string_tab[75]
#define __pyx_n_u_Writer __pyx_string_tab[76]
#define __pyx_n_u_Writer___reduce_cython __pyx_string_tab[77]
#define __pyx_n_u_Writer___setstate_cython __pyx_string_tab[78]
#define __pyx_n_u_Writer_close __pyx_string_tab[79]
#define __pyx_kp_u__5 __pyx_string_tab[80]
#define __pyx_kp_u__6 __pyx_string_tab[81]
#define __pyx_n_u_add __pyx_string_tab[82]
#define __pyx_n_u_add_alias __pyx_string_tab[83]
#define __pyx_n_u_add_entity __pyx_string_tab[84]
#define __pyx_kp_u_add_note __pyx_string_tab[85]
#define __pyx_n_u_alias __pyx_string_tab[86]
#define __pyx_n_u_alias_entry __pyx_string_tab[87]
#define __pyx_n_u_alias_hash __pyx_string_tab[88]
#define __pyx_kp_u_alias_hash_2 __pyx_string_tab[89]
#define __pyx_n_u_alias_index __pyx_string_tab[90]
#define __pyx_kp_u_alias_length __pyx_string_tab[91]
#define __pyx_n_u_aliases __pyx_string_tab[92]
#define __pyx_n_u_all_data __pyx_string_tab[93]
#define __pyx_n_u_append_alias __pyx_string_tab[94]
#define __pyx_n_u_asyncio_coroutines __pyx_string_tab[95]
#define __pyx_n_u_b __pyx_string_tab[96]
#define __pyx_n_u_bytes_data __pyx_string_tab[97]
#define __pyx_n_u_candidate __pyx_string_tab[98]
#define __pyx_kp_u_candidate_length __pyx_string_tab[99]
#define __pyx_n_u_candidate_length_2 __pyx_string_tab[100]
#define __pyx_n_u_candidate_length_3 __pyx_string_tab[101]
#define __pyx_n_u_class_getitem __pyx_string_tab[102]
#define __pyx_n_u_cline_in_traceback __pyx_string_tab[103]
#define __pyx_n_u_close __pyx_string_tab[104]
#define __pyx_n_u_contains_alias __pyx_string_tab[105]
#define __pyx_n_u_contains_entity __pyx_string_tab[106]
#define __pyx_n_u_contents __pyx_string_tab[107]
#define __pyx_n_u_current_sum __pyx_string_tab[108]
#define __pyx_n_u_deserialize __pyx_string_tab[109]
#define __pyx_n_u_deserialize_aliases __pyx_string_tab[110]
#define __pyx_n_u_deserialize_entries __pyx_string_tab[111]
#define __pyx_n_u_deserialize_header __pyx_string_tab[112]
#define __pyx_n_u_deserialize_vectors __pyx_string_tab[113]
#define __pyx_n_u_dict __pyx_string_tab[114]
#define __pyx_n_u_dict_2 __pyx_string_tab[115]
#define __pyx_kp_u_disable __pyx_string_tab[116]
#define __pyx_n_u_element __pyx_string_tab[117]
#define __pyx_kp_u_enable __pyx_string_tab[118]
#define __pyx_n_u_encode __pyx_string_tab[119]
#define __pyx_n_u_ensure_path __pyx_string_tab[120]
#define __pyx_n_u_entities __pyx_string_tab[121]
#define __pyx_n_u_entities_length __pyx_string_tab[122]
#define __pyx_n_u_entity __pyx_string_tab[123]
#define __pyx_n_u_entity_freq __pyx_string_tab[124]
#define __pyx_kp_u_entity_freq_2 __pyx_string_tab[125]
#define __pyx_n_u_entity_hash __pyx_string_tab[126]
#define __pyx_kp_u_entity_hash_2 __pyx_string_tab[127]
#define __pyx_n_u_entity_list __pyx_string_tab[128]
#define __pyx_n_u_entity_vector __pyx_string_tab[129]
#define __pyx_n_u_entity_vector_length __pyx_string_tab[130]
#define __pyx_n_u_entity_vectors __pyx_string_tab[131]
#define __pyx_n_u_entries __pyx_string_tab[132]
#define __pyx_n_u_entry __pyx_string_tab[133]
#define __pyx_n_u_entry_hash __pyx_string_tab[134]
#define __pyx_kp_u_entry_index __pyx_string_tab[135]
#define __pyx_n_u_entry_index_2 __pyx_string_tab[136]
#define __pyx_n_u_entry_indices __pyx_string_tab[137]
#define __pyx_n_u_errors __pyx_string_tab[138]
#define __pyx_n_u_exclude __pyx_string_tab[139]
#define __pyx_n_u_exists __pyx_string_tab[140]
#define __pyx_n_u_feats_row __pyx_string_tab[141]
#define __pyx_n_u_file_path __pyx_string_tab[142]
#define __pyx_n_u_format __pyx_string_tab[143]
#define __pyx_n_u_found __pyx_string_tab[144]
#define __pyx_n_u_freq __pyx_string_tab[145]
#define __pyx_n_u_freq_list __pyx_string_tab[146]
#define __pyx_n_u_from_bytes __pyx_string_tab[147]
#define __pyx_n_u_from_bytes_locals_deserialize_al __pyx_string_tab[148]
#define __pyx_n_u_from_bytes_locals_deserialize_en __pyx_string_tab[149]
#define __pyx_n_u_from_bytes_locals_deserialize_he __pyx_string_tab[150]
#define __pyx_n_u_from_bytes_locals_deserialize_ve __pyx_string_tab[151]
#define __pyx_n_u_from_disk __pyx_string_tab[152]
#define __pyx_n_u_from_disk_locals_lambda __pyx_string_tab[153]
#define __pyx_n_u_func __pyx_string_tab[154]
#define __pyx_kp_u_gc __pyx_string_tab[155]
#define __pyx_n_u_get_alias_candidates __pyx_string_tab[156]
#define __pyx_n_u_get_alias_strings __pyx_string_tab[157]
#define __pyx_n_u_get_candidates __pyx_string_tab[158]
#define __pyx_n_u_get_entity_strings __pyx_string_tab[159]
#define __pyx_n_u_get_prior_prob __pyx_string_tab[160]
#define __pyx_n_u_get_size_aliases __pyx_string_tab[161]
#define __pyx_n_u_get_size_entities __pyx_string_tab[162]
#define __pyx_n_u_get_vector __pyx_string_tab[163]
#define __pyx_n_u_getstate __pyx_string_tab[164]
#define __pyx_n_u_header __pyx_string_tab[165]
#define __pyx_n_u_headers __pyx_string_tab[166]
#define __pyx_n_u_headers_dump __pyx_string_tab[167]
#define __pyx_n_u_i __pyx_string_tab[168]
#define __pyx_n_u_ignore_warnings __pyx_string_tab[169]
#define __pyx_n_u_indices __pyx_string_tab[170]
#define __pyx_n_u_indices_dump __pyx_string_tab[171]
#define __pyx_n_u_indices_lists __pyx_string_tab[172]
#define __pyx_n_u_init __pyx_string_tab[173]
#define __pyx_n_u_initialize_aliases __pyx_string_tab[174]
#define __pyx_n_u_initialize_entities __pyx_string_tab[175]
#define __pyx_n_u_initialize_vectors __pyx_string_tab[176]
#define __pyx_n_u_initializing __pyx_string_tab[177]
#define __pyx_n_u_is_coroutine __pyx_string_tab[178]
#define __pyx_n_u_is_dir __pyx_string_tab[179]
#define __pyx_n_u_is_empty __pyx_string_tab[180]
#define __pyx_n_u_is_present __pyx_string_tab[181]
#define __pyx_kp_u_isenabled __pyx_string_tab[182]
#define __pyx_n_u_items __pyx_string_tab[183]
#define __pyx_n_u_j __pyx_string_tab[184]
#define __pyx_n_u_json_dumps __pyx_string_tab[185]
#define __pyx_n_u_json_loads __pyx_string_tab[186]
#define __pyx_n_u_kb __pyx_string_tab[187]
#define __pyx_n_u_key __pyx_string_tab[188]
#define __pyx_n_u_kwargs __pyx_string_tab[189]
#define __pyx_n_u_lambda __pyx_string_tab[190]
#define __pyx_n_u_loc __pyx_string_tab[191]
#define __pyx_n_u_main __pyx_string_tab[192]
#define __pyx_n_u_mention __pyx_string_tab[193]
#define __pyx_n_u_mkdir __pyx_string_tab[194]
#define __pyx_n_u_module __pyx_string_tab[195]
#define __pyx_n_u_name __pyx_string_tab[196]
#define __pyx_n_u_new __pyx_string_tab[197]
#define __pyx_n_u_new_index __pyx_string_tab[198]
#define __pyx_n_u_new_sum __pyx_string_tab[199]
#define __pyx_n_u_nr_aliases __pyx_string_tab[200]
#define __pyx_n_u_nr_candidates __pyx_string_tab[201]
#define __pyx_n_u_nr_entities __pyx_string_tab[202]
#define __pyx_kp_u_numpy__core_multiarray_failed_to __pyx_string_tab[203]
#define __pyx_kp_u_numpy__core_umath_failed_to_impo __pyx_string_tab[204]
#define __pyx_n_u_p __pyx_string_tab[205]
#define __pyx_n_u_param __pyx_string_tab[206]
#define __pyx_n_u_parents __pyx_string_tab[207]
#define __pyx_n_u_path __pyx_string_tab[208]
#define __pyx_n_u_pathlib __pyx_string_tab[209]
#define __pyx_n_u_pickle __pyx_string_tab[210]
#define __pyx_n_u_pop __pyx_string_tab[211]
#define __pyx_n_u_previous_alias_nr __pyx_string_tab[212]
#define __pyx_n_u_prior_prob __pyx_string_tab[213]
#define __pyx_kp_u_prior_probability __pyx_string_tab[214]
#define __pyx_n_u_prob __pyx_string_tab[215]
#define __pyx_n_u_prob_sum __pyx_string_tab[216]
#define __pyx_n_u_probabilities __pyx_string_tab[217]
#define __pyx_n_u_probabilities_length __pyx_string_tab[218]
#define __pyx_n_u_probs __pyx_string_tab[219]
#define __pyx_n_u_probs_dump __pyx_string_tab[220]
#define __pyx_n_u_probs_lists __pyx_string_tab[221]
#define __pyx_n_u_pyx_PickleError __pyx_string_tab[222]
#define __pyx_n_u_pyx_checksum __pyx_string_tab[223]
#define __pyx_n_u_pyx_result __pyx_string_tab[224]
#define __pyx_n_u_pyx_state __pyx_string_tab[225]
#define __pyx_n_u_pyx_type __pyx_string_tab[226]
#define __pyx_n_u_pyx_unpickle_InMemoryLookupKB __pyx_string_tab[227]
#define __pyx_n_u_pyx_vtable __pyx_string_tab[228]
#define __pyx_n_u_qualname __pyx_string_tab[229]
#define __pyx_n_u_range __pyx_string_tab[230]
#define __pyx_n_u_read_contents __pyx_string_tab[231]
#define __pyx_n_u_reader __pyx_string_tab[232]
#define __pyx_n_u_reduce __pyx_string_tab[233]
#define __pyx_n_u_reduce_cython __pyx_string_tab[234]
#define __pyx_n_u_reduce_ex __pyx_string_tab[235]
#define __pyx_n_u_required __pyx_string_tab[236]
#define __pyx_n_u_return __pyx_string_tab[237]
#define __pyx_n_u_self __pyx_string_tab[238]
#define __pyx_kp_u_self__fp_cannot_be_converted_to __pyx_string_tab[239]
#define __pyx_n_u_serialize __pyx_string_tab[240]
#define __pyx_n_u_serialize_aliases __pyx_string_tab[241]
#define __pyx_n_u_serialize_entries __pyx_string_tab[242]
#define __pyx_n_u_serialize_header __pyx_string_tab[243]
#define __pyx_n_u_serializers __pyx_string_tab[244]
#define __pyx_n_u_set_entities __pyx_string_tab[245]
#define __pyx_n_u_set_name __pyx_string_tab[246]
#define __pyx_n_u_setstate __pyx_string_tab[247]
#define __pyx_n_u_setstate_cython __pyx_string_tab[248]
#define __pyx_n_u_setters __pyx_string_tab[249]
#define __pyx_n_u_sorted __pyx_string_tab[250]
#define __pyx_n_u_spacy_kb_kb_in_memory __pyx_string_tab[251]
#define __pyx_kp_u_spacy_kb_kb_in_memory_pyx __pyx_string_tab[252]
#define __pyx_n_u_spec __pyx_string_tab[253]
#define __pyx_n_u_srsly __pyx_string_tab[254]
#define __pyx_n_u_state __pyx_string_tab[255]
#define __pyx_n_u_status __pyx_string_tab[256]
#define __pyx_kp_u_strings_json __pyx_string_tab[257]
#define __pyx_kp_u_stringsource __pyx_string_tab[258]
#define __pyx_n_u_sum __pyx_string_tab[259]
#define __pyx_n_u_super __pyx_string_tab[260]
#define __pyx_n_u_test __pyx_string_tab[261]
#define __pyx_n_u_text __pyx_string_tab[262]
#define __pyx_n_u_to_bytes __pyx_string_tab[263]
#define __pyx_n_u_to_bytes_locals_lambda __pyx_string_tab[264]
#define __pyx_n_u_to_bytes_locals_serialize_aliase __pyx_string_tab[265]
#define __pyx_n_u_to_bytes_locals_serialize_aliase_2 __pyx_string_tab[266]
#define __pyx_n_u_to_bytes_locals_serialize_entrie __pyx_string_tab[267]
#define __pyx_n_u_to_bytes_locals_serialize_entrie_2 __pyx_string_tab[268]
#define __pyx_n_u_to_bytes_locals_serialize_header __pyx_string_tab[269]
#define __pyx_n_u_to_disk __pyx_string_tab[270]
#define __pyx_n_u_to_disk_locals_lambda __pyx_string_tab[271]
#define __pyx_n_u_tokens __pyx_string_tab[272]
#define __pyx_n_u_tuples __pyx_string_tab[273]
#define __pyx_n_u_typing __pyx_string_tab[274]
#define __pyx_n_u_update __pyx_string_tab[275]
#define __pyx_n_u_use_setstate __pyx_string_tab[276]
#define __pyx_n_u_utf8 __pyx_string_tab[277]
#define __pyx_n_u_util __pyx_string_tab[278]
#define __pyx_kp_u_vector_element __pyx_string_tab[279]
#define __pyx_n_u_vector_element_2 __pyx_string_tab[280]
#define __pyx_n_u_vector_index __pyx_string_tab[281]
#define __pyx_kp_u_vector_index_2 __pyx_string_tab[282]
#define __pyx_kp_u_vector_length __pyx_string_tab[283]
#define __pyx_n_u_vector_list __pyx_string_tab[284]
#define __pyx_n_u_vocab __pyx_string_tab[285]
#define __pyx_n_u_warn __pyx_string_tab[286]
#define __pyx_n_u_warnings __pyx_string_tab[287]
#define __pyx_n_u_write_contents __pyx_string_tab[288]
#define __pyx_n_u_write_contents_locals_lambda __pyx_string_tab[289]
#define __pyx_n_u_writer __pyx_string_tab[290]
#define __pyx_n_u_x __pyx_string_tab[291]
#define __pyx_n_u_zip __pyx_string_tab[292]
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __pyx_m_clear(PyObject *m) {
  __pyx_mstatetype *clear_module_state = __Pyx_PyModule_GetState(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __Pyx_State_RemoveModule(NULL);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_5cymem_5cymem_PyMalloc);
  Py_CLEAR(clear_module_state->__pyx_ptype_5cymem_5cymem_PyFree);
  Py_CLEAR(clear_module_state->__pyx_ptype_5cymem_5cymem_Pool);
  Py_CLEAR(clear_module_state->__pyx_ptype_5cymem_5cymem_Address);
  Py_CLEAR(clear_module_state->__pyx_ptype_7preshed_4maps_PreshMap);
  Py_CLEAR(clear_module_state->__pyx_ptype_7preshed_4maps_PreshMapArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_dtype);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flatiter);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_broadcast);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ndarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_generic);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_number);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_integer);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_inexact);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_floating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flexible);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_character);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ufunc);
  Py_CLEAR(clear_module_state->__pyx_ptype_5spacy_7strings_StringStore);
  Py_CLEAR(clear_module_state->__pyx_ptype_5spacy_10morphology_Morphology);
  Py_CLEAR(clear_module_state->__pyx_ptype_5spacy_5vocab_Vocab);
  Py_CLEAR(clear_module_state->__pyx_ptype_5spacy_2kb_2kb_KnowledgeBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_5spacy_2kb_12kb_in_memory_InMemoryLookupKB);
  Py_CLEAR(clear_module_state->__pyx_type_5spacy_2kb_12kb_in_memory_InMemoryLookupKB);
  Py_CLEAR(clear_module_state->__pyx_ptype_5spacy_2kb_12kb_in_memory_Writer);
  Py_CLEAR(clear_module_state->__pyx_type_5spacy_2kb_12kb_in_memory_Writer);
  Py_CLEAR(clear_module_state->__pyx_ptype_5spacy_2kb_12kb_in_memory_Reader);
  Py_CLEAR(clear_module_state->__pyx_type_5spacy_2kb_12kb_in_memory_Reader);
  Py_CLEAR(clear_module_state->__pyx_ptype_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes);
  Py_CLEAR(clear_module_state->__pyx_type_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes);
  Py_CLEAR(clear_module_state->__pyx_ptype_5spacy_2kb_12kb_in_memory___pyx_scope_struct_1_from_bytes);
  Py_CLEAR(clear_module_state->__pyx_type_5spacy_2kb_12kb_in_memory___pyx_scope_struct_1_from_bytes);
  Py_CLEAR(clear_module_state->__pyx_ptype_5spacy_2kb_12kb_in_memory___pyx_scope_struct_2_to_disk);
  Py_CLEAR(clear_module_state->__pyx_type_5spacy_2kb_12kb_in_memory___pyx_scope_struct_2_to_disk);
  Py_CLEAR(clear_module_state->__pyx_ptype_5spacy_2kb_12kb_in_memory___pyx_scope_struct_3_from_disk);
  Py_CLEAR(clear_module_state->__pyx_type_5spacy_2kb_12kb_in_memory___pyx_scope_struct_3_from_disk);
  Py_CLEAR(clear_module_state->__pyx_k__2);
  Py_CLEAR(clear_module_state->__pyx_k__3);
  Py_CLEAR(clear_module_state->__pyx_k__4);
  for (int i=0; i<2; ++i) { Py_CLEAR(clear_module_state->__pyx_tuple[i]); }
  for (int i=0; i<48; ++i) { Py_CLEAR(clear_module_state->__pyx_codeobj_tab[i]); }
  for (int i=0; i<293; ++i) { Py_CLEAR(clear_module_state->__pyx_string_tab[i]); }
  Py_CLEAR(clear_module_state->__pyx_float_0_0);
  Py_CLEAR(clear_module_state->__pyx_float_1_00001);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_9773988);
  Py_CLEAR(clear_module_state->__pyx_int_84004650);
  Py_CLEAR(clear_module_state->__pyx_int_206720462);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstatetype *traverse_module_state = __Pyx_PyModule_GetState(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_tuple);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_bytes);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_5cymem_5cymem_PyMalloc);
  Py_VISIT(traverse_module_state->__pyx_ptype_5cymem_5cymem_PyFree);
  Py_VISIT(traverse_module_state->__pyx_ptype_5cymem_5cymem_Pool);
  Py_VISIT(traverse_module_state->__pyx_ptype_5cymem_5cymem_Address);
  Py_VISIT(traverse_module_state->__pyx_ptype_7preshed_4maps_PreshMap);
  Py_VISIT(traverse_module_state->__pyx_ptype_7preshed_4maps_PreshMapArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_dtype);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flatiter);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_broadcast);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ndarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_generic);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_number);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_integer);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_inexact);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_floating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flexible);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_character);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ufunc);
  Py_VISIT(traverse_module_state->__pyx_ptype_5spacy_7strings_StringStore);
  Py_VISIT(traverse_module_state->__pyx_ptype_5spacy_10morphology_Morphology);
  Py_VISIT(traverse_module_state->__pyx_ptype_5spacy_5vocab_Vocab);
  Py_VISIT(traverse_module_state->__pyx_ptype_5spacy_2kb_2kb_KnowledgeBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_5spacy_2kb_12kb_in_memory_InMemoryLookupKB);
  Py_VISIT(traverse_module_state->__pyx_type_5spacy_2kb_12kb_in_memory_InMemoryLookupKB);
  Py_VISIT(traverse_module_state->__pyx_ptype_5spacy_2kb_12kb_in_memory_Writer);
  Py_VISIT(traverse_module_state->__pyx_type_5spacy_2kb_12kb_in_memory_Writer);
  Py_VISIT(traverse_module_state->__pyx_ptype_5spacy_2kb_12kb_in_memory_Reader);
  Py_VISIT(traverse_module_state->__pyx_type_5spacy_2kb_12kb_in_memory_Reader);
  Py_VISIT(traverse_module_state->__pyx_ptype_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes);
  Py_VISIT(traverse_module_state->__pyx_type_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes);
  Py_VISIT(traverse_module_state->__pyx_ptype_5spacy_2kb_12kb_in_memory___pyx_scope_struct_1_from_bytes);
  Py_VISIT(traverse_module_state->__pyx_type_5spacy_2kb_12kb_in_memory___pyx_scope_struct_1_from_bytes);
  Py_VISIT(traverse_module_state->__pyx_ptype_5spacy_2kb_12kb_in_memory___pyx_scope_struct_2_to_disk);
  Py_VISIT(traverse_module_state->__pyx_type_5spacy_2kb_12kb_in_memory___pyx_scope_struct_2_to_disk);
  Py_VISIT(traverse_module_state->__pyx_ptype_5spacy_2kb_12kb_in_memory___pyx_scope_struct_3_from_disk);
  Py_VISIT(traverse_module_state->__pyx_type_5spacy_2kb_12kb_in_memory___pyx_scope_struct_3_from_disk);
  Py_VISIT(traverse_module_state->__pyx_k__2);
  Py_VISIT(traverse_module_state->__pyx_k__3);
  Py_VISIT(traverse_module_state->__pyx_k__4);
  for (int i=0; i<2; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_tuple[i]); }
  for (int i=0; i<48; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_codeobj_tab[i]); }
  for (int i=0; i<293; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_string_tab[i]); }
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_0_0);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_1_00001);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_0);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_1);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_9773988);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_84004650);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_206720462);
  return 0;
}
#endif
/* #### Code section: module_code ### */

/* "vector.to_py":76
 *     const Py_ssize_t PY_SSIZE_T_MAX
 * 
 * @cname("__pyx_convert_vector_to_py_int64_t")             # <<<<<<<<<<<<<<
 * cdef object __pyx_convert_vector_to_py_int64_t(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
*/

static PyObject *__pyx_convert_vector_to_py_int64_t(std::vector<int64_t>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int64_t", 0);

  /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py_int64_t")
 * cdef object __pyx_convert_vector_to_py_int64_t(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":79
 * cdef object __pyx_convert_vector_to_py_int64_t(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
*/
    PyErr_NoMemory(); __PYX_ERR(1, 79, __pyx_L1_error)

    /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py_int64_t")
 * cdef object __pyx_convert_vector_to_py_int64_t(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  }

  /* "vector.to_py":80
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
*/
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":82
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
*/
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":87
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
*/
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":88
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)
*/
    __pyx_t_2 = __Pyx_PyLong_From_int64_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":89
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
*/
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":90
 *         item = v[i]
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
*/
    __pyx_t_6 = __Pyx_PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 90, __pyx_L1_error)
  }

  /* "vector.to_py":92
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":76
 *     const Py_ssize_t PY_SSIZE_T_MAX
 * 
 * @cname("__pyx_convert_vector_to_py_int64_t")             # <<<<<<<<<<<<<<
 * cdef object __pyx_convert_vector_to_py_int64_t(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int64_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_float(std::vector<float>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_float", 0);

  /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py_float")
 * cdef object __pyx_convert_vector_to_py_float(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":79
 * cdef object __pyx_convert_vector_to_py_float(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
*/
    PyErr_NoMemory(); __PYX_ERR(1, 79, __pyx_L1_error)

    /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py_float")
 * cdef object __pyx_convert_vector_to_py_float(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  }

  /* "vector.to_py":80
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
*/
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":82
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
*/
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":87
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
*/
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":88
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)
*/
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":89
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
*/
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":90
 *         item = v[i]
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
*/
    __pyx_t_6 = __Pyx_PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 90, __pyx_L1_error)
  }

  /* "vector.to_py":92
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":76
 *     const Py_ssize_t PY_SSIZE_T_MAX
 * 
 * @cname("__pyx_convert_vector_to_py_float")             # <<<<<<<<<<<<<<
 * cdef object __pyx_convert_vector_to_py_float(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_AliasC(std::vector<struct __pyx_t_5spacy_7structs_AliasC>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_AliasC", 0);

  /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_AliasC")
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_AliasC(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":79
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_AliasC(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
*/
    PyErr_NoMemory(); __PYX_ERR(1, 79, __pyx_L1_error)

    /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_AliasC")
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_AliasC(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  }

  /* "vector.to_py":80
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
*/
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":82
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
*/
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":87
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
*/
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":88
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)
*/
    __pyx_t_2 = __pyx_convert__to_py_struct____pyx_t_5spacy_7structs_AliasC((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":89
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
*/
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":90
 *         item = v[i]
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
*/
    __pyx_t_6 = __Pyx_PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 90, __pyx_L1_error)
  }

  /* "vector.to_py":92
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":76
 *     const Py_ssize_t PY_SSIZE_T_MAX
 * 
 * @cname("__pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_AliasC")             # <<<<<<<<<<<<<<
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_AliasC(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_AliasC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "FromPyStructUtility":11
 *     int __Pyx_RaiseUnexpectedTypeError(const char *expected, object obj) except 0
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_5spacy_7structs_AliasC")             # <<<<<<<<<<<<<<
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_7structs_AliasC(obj) except *:
 *     cdef struct_type result
*/

static struct __pyx_t_5spacy_7structs_AliasC __pyx_convert__from_py_struct____pyx_t_5spacy_7structs_AliasC(PyObject *__pyx_v_obj) {
  struct __pyx_t_5spacy_7structs_AliasC __pyx_v_result;
  PyObject *__pyx_v_value = NULL;
  struct __pyx_t_5spacy_7structs_AliasC __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  size_t __pyx_t_12;
  std::vector<int64_t>  __pyx_t_13;
  std::vector<float>  __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert__from_py_struct____pyx_t_5spacy_7structs_AliasC", 0);

  /* "FromPyStructUtility":14
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_7structs_AliasC(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
*/
  __pyx_t_1 = (!PyMapping_Check(__pyx_v_obj));
  if (__pyx_t_1) {

    /* "FromPyStructUtility":15
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)             # <<<<<<<<<<<<<<
 * 
 *     try:
*/
    __pyx_t_2 = __Pyx_RaiseUnexpectedTypeError(((char const *)"a mapping"), __pyx_v_obj); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 15, __pyx_L1_error)

    /* "FromPyStructUtility":14
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_7structs_AliasC(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
*/
  }

  /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['entry_indices']
 *     except KeyError:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":18
 * 
 *     try:
 *         value = obj['entry_indices']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'entry_indices'")
*/
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_mstate_global->__pyx_n_u_entry_indices); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 18, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_v_value = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['entry_indices']
 *     except KeyError:
*/
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "FromPyStructUtility":19
 *     try:
 *         value = obj['entry_indices']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'entry_indices'")
 *     result.entry_indices = value
*/
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_7structs_AliasC", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(1, 19, __pyx_L6_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);

      /* "FromPyStructUtility":20
 *         value = obj['entry_indices']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'entry_indices'")             # <<<<<<<<<<<<<<
 *     result.entry_indices = value
 *     try:
*/
      __pyx_t_10 = NULL;
      __Pyx_INCREF(__pyx_builtin_ValueError);
      __pyx_t_11 = __pyx_builtin_ValueError; 
      __pyx_t_12 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_mstate_global->__pyx_kp_u_No_value_specified_for_struct_at};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 20, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 20, __pyx_L6_except_error)
    }
    goto __pyx_L6_except_error;

    /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['entry_indices']
 *     except KeyError:
*/
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "FromPyStructUtility":21
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'entry_indices'")
 *     result.entry_indices = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['probs']
*/
  __pyx_t_13 = __pyx_convert_vector_from_py_int64_t(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 21, __pyx_L1_error)
  __pyx_v_result.entry_indices = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_13);

  /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'entry_indices'")
 *     result.entry_indices = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['probs']
 *     except KeyError:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":23
 *     result.entry_indices = value
 *     try:
 *         value = obj['probs']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'probs'")
*/
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_mstate_global->__pyx_n_u_probs); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 23, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'entry_indices'")
 *     result.entry_indices = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['probs']
 *     except KeyError:
*/
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L17_try_end;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":24
 *     try:
 *         value = obj['probs']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'probs'")
 *     result.probs = value
*/
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_7structs_AliasC", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_6) < 0) __PYX_ERR(1, 24, __pyx_L14_except_error)
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_6);

      /* "FromPyStructUtility":25
 *         value = obj['probs']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'probs'")             # <<<<<<<<<<<<<<
 *     result.probs = value
 *     return result
*/
      __pyx_t_11 = NULL;
      __Pyx_INCREF(__pyx_builtin_ValueError);
      __pyx_t_10 = __pyx_builtin_ValueError; 
      __pyx_t_12 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_mstate_global->__pyx_kp_u_No_value_specified_for_struct_at_2};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 25, __pyx_L14_except_error)
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 25, __pyx_L14_except_error)
    }
    goto __pyx_L14_except_error;

    /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'entry_indices'")
 *     result.entry_indices = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['probs']
 *     except KeyError:
*/
    __pyx_L14_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L17_try_end:;
  }

  /* "FromPyStructUtility":26
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'probs'")
 *     result.probs = value             # <<<<<<<<<<<<<<
 *     return result
 * 
*/
  __pyx_t_14 = __pyx_convert_vector_from_py_float(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 26, __pyx_L1_error)
  __pyx_v_result.probs = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_14);

  /* "FromPyStructUtility":27
 *         raise ValueError("No value specified for struct attribute 'probs'")
 *     result.probs = value
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "FromPyStructUtility":11
 *     int __Pyx_RaiseUnexpectedTypeError(const char *expected, object obj) except 0
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_5spacy_7structs_AliasC")             # <<<<<<<<<<<<<<
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_7structs_AliasC(obj) except *:
 *     cdef struct_type result
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_7structs_AliasC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":76
 *     const Py_ssize_t PY_SSIZE_T_MAX
 * 
 * @cname("__pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_KBEntryC")             # <<<<<<<<<<<<<<
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_KBEntryC(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
*/

static PyObject *__pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_KBEntryC(std::vector<struct __pyx_t_5spacy_7structs_KBEntryC>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_KBEntryC", 0);

  /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_KBEntryC")
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_KBEntryC(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":79
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_KBEntryC(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
*/
    PyErr_NoMemory(); __PYX_ERR(1, 79, __pyx_L1_error)

    /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_KBEntryC")
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_KBEntryC(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  }

  /* "vector.to_py":80
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
*/
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":82
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
*/
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":87
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
*/
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":88
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)
*/
    __pyx_t_2 = __pyx_convert__to_py_struct____pyx_t_5spacy_7structs_KBEntryC((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":89
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
*/
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":90
 *         item = v[i]
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
*/
    __pyx_t_6 = __Pyx_PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 90, __pyx_L1_error)
  }

  /* "vector.to_py":92
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":76
 *     const Py_ssize_t PY_SSIZE_T_MAX
 * 
 * @cname("__pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_KBEntryC")             # <<<<<<<<<<<<<<
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_KBEntryC(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_struct____pyx_t_5spacy_7structs_KBEntryC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "FromPyStructUtility":11
 *     int __Pyx_RaiseUnexpectedTypeError(const char *expected, object obj) except 0
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_5spacy_7structs_KBEntryC")             # <<<<<<<<<<<<<<
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_7structs_KBEntryC(obj) except *:
 *     cdef struct_type result
*/

static struct __pyx_t_5spacy_7structs_KBEntryC __pyx_convert__from_py_struct____pyx_t_5spacy_7structs_KBEntryC(PyObject *__pyx_v_obj) {
  struct __pyx_t_5spacy_7structs_KBEntryC __pyx_v_result;
  PyObject *__pyx_v_value = NULL;
  struct __pyx_t_5spacy_7structs_KBEntryC __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  size_t __pyx_t_12;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_t_13;
  int32_t __pyx_t_14;
  float __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert__from_py_struct____pyx_t_5spacy_7structs_KBEntryC", 0);

  /* "FromPyStructUtility":14
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_7structs_KBEntryC(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
*/
  __pyx_t_1 = (!PyMapping_Check(__pyx_v_obj));
  if (__pyx_t_1) {

    /* "FromPyStructUtility":15
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)             # <<<<<<<<<<<<<<
 * 
 *     try:
*/
    __pyx_t_2 = __Pyx_RaiseUnexpectedTypeError(((char const *)"a mapping"), __pyx_v_obj); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 15, __pyx_L1_error)

    /* "FromPyStructUtility":14
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_7structs_KBEntryC(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
*/
  }

  /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['entity_hash']
 *     except KeyError:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":18
 * 
 *     try:
 *         value = obj['entity_hash']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'entity_hash'")
*/
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_mstate_global->__pyx_n_u_entity_hash); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 18, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_v_value = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['entity_hash']
 *     except KeyError:
*/
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "FromPyStructUtility":19
 *     try:
 *         value = obj['entity_hash']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'entity_hash'")
 *     result.entity_hash = value
*/
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_7structs_KBEntryC", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(1, 19, __pyx_L6_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);

      /* "FromPyStructUtility":20
 *         value = obj['entity_hash']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'entity_hash'")             # <<<<<<<<<<<<<<
 *     result.entity_hash = value
 *     try:
*/
      __pyx_t_10 = NULL;
      __Pyx_INCREF(__pyx_builtin_ValueError);
      __pyx_t_11 = __pyx_builtin_ValueError; 
      __pyx_t_12 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_mstate_global->__pyx_kp_u_No_value_specified_for_struct_at_3};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 20, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 20, __pyx_L6_except_error)
    }
    goto __pyx_L6_except_error;

    /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['entity_hash']
 *     except KeyError:
*/
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "FromPyStructUtility":21
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'entity_hash'")
 *     result.entity_hash = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['vector_index']
*/
  __pyx_t_13 = __Pyx_PyLong_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_13 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 21, __pyx_L1_error)
  __pyx_v_result.entity_hash = __pyx_t_13;

  /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'entity_hash'")
 *     result.entity_hash = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['vector_index']
 *     except KeyError:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":23
 *     result.entity_hash = value
 *     try:
 *         value = obj['vector_index']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'vector_index'")
*/
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_mstate_global->__pyx_n_u_vector_index); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 23, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'entity_hash'")
 *     result.entity_hash = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['vector_index']
 *     except KeyError:
*/
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L17_try_end;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":24
 *     try:
 *         value = obj['vector_index']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'vector_index'")
 *     result.vector_index = value
*/
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_7structs_KBEntryC", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_6) < 0) __PYX_ERR(1, 24, __pyx_L14_except_error)
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_6);

      /* "FromPyStructUtility":25
 *         value = obj['vector_index']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'vector_index'")             # <<<<<<<<<<<<<<
 *     result.vector_index = value
 *     try:
*/
      __pyx_t_11 = NULL;
      __Pyx_INCREF(__pyx_builtin_ValueError);
      __pyx_t_10 = __pyx_builtin_ValueError; 
      __pyx_t_12 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_mstate_global->__pyx_kp_u_No_value_specified_for_struct_at_4};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 25, __pyx_L14_except_error)
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 25, __pyx_L14_except_error)
    }
    goto __pyx_L14_except_error;

    /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'entity_hash'")
 *     result.entity_hash = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['vector_index']
 *     except KeyError:
*/
    __pyx_L14_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L17_try_end:;
  }

  /* "FromPyStructUtility":26
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'vector_index'")
 *     result.vector_index = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['feats_row']
*/
  __pyx_t_14 = __Pyx_PyLong_As_int32_t(__pyx_v_value); if (unlikely((__pyx_t_14 == ((int32_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 26, __pyx_L1_error)
  __pyx_v_result.vector_index = __pyx_t_14;

  /* "FromPyStructUtility":27
 *         raise ValueError("No value specified for struct attribute 'vector_index'")
 *     result.vector_index = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['feats_row']
 *     except KeyError:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":28
 *     result.vector_index = value
 *     try:
 *         value = obj['feats_row']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'feats_row'")
*/
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_mstate_global->__pyx_n_u_feats_row); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 28, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "FromPyStructUtility":27
 *         raise ValueError("No value specified for struct attribute 'vector_index'")
 *     result.vector_index = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['feats_row']
 *     except KeyError:
*/
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L25_try_end;
    __pyx_L20_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":29
 *     try:
 *         value = obj['feats_row']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'feats_row'")
 *     result.feats_row = value
*/
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_7structs_KBEntryC", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(1, 29, __pyx_L22_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);

      /* "FromPyStructUtility":30
 *         value = obj['feats_row']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'feats_row'")             # <<<<<<<<<<<<<<
 *     result.feats_row = value
 *     try:
*/
      __pyx_t_10 = NULL;
      __Pyx_INCREF(__pyx_builtin_ValueError);
      __pyx_t_11 = __pyx_builtin_ValueError; 
      __pyx_t_12 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_mstate_global->__pyx_kp_u_No_value_specified_for_struct_at_5};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 30, __pyx_L22_except_error)
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 30, __pyx_L22_except_error)
    }
    goto __pyx_L22_except_error;

    /* "FromPyStructUtility":27
 *         raise ValueError("No value specified for struct attribute 'vector_index'")
 *     result.vector_index = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['feats_row']
 *     except KeyError:
*/
    __pyx_L22_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L25_try_end:;
  }

  /* "FromPyStructUtility":31
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'feats_row'")
 *     result.feats_row = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['freq']
*/
  __pyx_t_14 = __Pyx_PyLong_As_int32_t(__pyx_v_value); if (unlikely((__pyx_t_14 == ((int32_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 31, __pyx_L1_error)
  __pyx_v_result.feats_row = __pyx_t_14;

  /* "FromPyStructUtility":32
 *         raise ValueError("No value specified for struct attribute 'feats_row'")
 *     result.feats_row = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['freq']
 *     except KeyError:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":33
 *     result.feats_row = value
 *     try:
 *         value = obj['freq']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'freq'")
*/
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_mstate_global->__pyx_n_u_freq); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 33, __pyx_L28_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":32
 *         raise ValueError("No value specified for struct attribute 'feats_row'")
 *     result.feats_row = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['freq']
 *     except KeyError:
*/
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L33_try_end;
    __pyx_L28_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":34
 *     try:
 *         value = obj['freq']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'freq'")
 *     result.freq = value
*/
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_7structs_KBEntryC", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_6) < 0) __PYX_ERR(1, 34, __pyx_L30_except_error)
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_6);

      /* "FromPyStructUtility":35
 *         value = obj['freq']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'freq'")             # <<<<<<<<<<<<<<
 *     result.freq = value
 *     return result
*/
      __pyx_t_11 = NULL;
      __Pyx_INCREF(__pyx_builtin_ValueError);
      __pyx_t_10 = __pyx_builtin_ValueError; 
      __pyx_t_12 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_mstate_global->__pyx_kp_u_No_value_specified_for_struct_at_6};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 35, __pyx_L30_except_error)
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 35, __pyx_L30_except_error)
    }
    goto __pyx_L30_except_error;

    /* "FromPyStructUtility":32
 *         raise ValueError("No value specified for struct attribute 'feats_row'")
 *     result.feats_row = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['freq']
 *     except KeyError:
*/
    __pyx_L30_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L33_try_end:;
  }

  /* "FromPyStructUtility":36
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'freq'")
 *     result.freq = value             # <<<<<<<<<<<<<<
 *     return result
 * 
*/
  __pyx_t_15 = __Pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_15 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 36, __pyx_L1_error)
  __pyx_v_result.freq = __pyx_t_15;

  /* "FromPyStructUtility":37
 *         raise ValueError("No value specified for struct attribute 'freq'")
 *     result.freq = value
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "FromPyStructUtility":11
 *     int __Pyx_RaiseUnexpectedTypeError(const char *expected, object obj) except 0
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_5spacy_7structs_KBEntryC")             # <<<<<<<<<<<<<<
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_7structs_KBEntryC(obj) except *:
 *     cdef struct_type result
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_7structs_KBEntryC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":76
 *     const Py_ssize_t PY_SSIZE_T_MAX
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec")             # <<<<<<<<<<<<<<
 * cdef object __pyx_convert_vector_to_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
*/

static PyObject *__pyx_convert_vector_to_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec(std::vector<__pyx_t_5spacy_2kb_12kb_in_memory_float_vec>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec", 0);

  /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec")
 * cdef object __pyx_convert_vector_to_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":79
 * cdef object __pyx_convert_vector_to_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
*/
    PyErr_NoMemory(); __PYX_ERR(1, 79, __pyx_L1_error)

    /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec")
 * cdef object __pyx_convert_vector_to_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  }

  /* "vector.to_py":80
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
*/
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":82
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
*/
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":87
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
*/
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":88
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)
*/
    __pyx_t_2 = __pyx_convert_vector_to_py_float((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":89
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
*/
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":90
 *         item = v[i]
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
*/
    __pyx_t_6 = __Pyx_PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 90, __pyx_L1_error)
  }

  /* "vector.to_py":92
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":76
 *     const Py_ssize_t PY_SSIZE_T_MAX
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec")             # <<<<<<<<<<<<<<
 * cdef object __pyx_convert_vector_to_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":48
 *     cdef Py_ssize_t __Pyx_PyObject_LengthHint(object o, Py_ssize_t defaultval) except -1
 * 
 * @cname("__pyx_convert_vector_from_py_int64_t")             # <<<<<<<<<<<<<<
 * cdef vector[X] __pyx_convert_vector_from_py_int64_t(object o) except *:
 * 
*/

static std::vector<int64_t>  __pyx_convert_vector_from_py_int64_t(PyObject *__pyx_v_o) {
  std::vector<int64_t>  __pyx_v_v;
  Py_ssize_t __pyx_v_s;
  PyObject *__pyx_v_item = NULL;
  std::vector<int64_t>  __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int64_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int64_t", 0);

  /* "vector.from_py":52
 * 
 *     cdef vector[X] v
 *     cdef Py_ssize_t s = __Pyx_PyObject_LengthHint(o, 0)             # <<<<<<<<<<<<<<
 * 
 *     if s > 0:
*/
  __pyx_t_1 = __Pyx_PyObject_LengthHint(__pyx_v_o, 0); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 52, __pyx_L1_error)
  __pyx_v_s = __pyx_t_1;

  /* "vector.from_py":54
 *     cdef Py_ssize_t s = __Pyx_PyObject_LengthHint(o, 0)
 * 
 *     if s > 0:             # <<<<<<<<<<<<<<
 *         v.reserve(<size_t> s)
 * 
*/
  __pyx_t_2 = (__pyx_v_s > 0);
  if (__pyx_t_2) {

    /* "vector.from_py":55
 * 
 *     if s > 0:
 *         v.reserve(<size_t> s)             # <<<<<<<<<<<<<<
 * 
 *     for item in o:
*/
    try {
      __pyx_v_v.reserve(((size_t)__pyx_v_s));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 55, __pyx_L1_error)
    }

    /* "vector.from_py":54
 *     cdef Py_ssize_t s = __Pyx_PyObject_LengthHint(o, 0)
 * 
 *     if s > 0:             # <<<<<<<<<<<<<<
 *         v.reserve(<size_t> s)
 * 
*/
  }

  /* "vector.from_py":57
 *         v.reserve(<size_t> s)
 * 
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 * 
*/
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_3 = __pyx_v_o; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 57, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 57, __pyx_L1_error)
          #endif
          if (__pyx_t_1 >= __pyx_temp) break;
        }
        __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_1);
        ++__pyx_t_1;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 57, __pyx_L1_error)
          #endif
          if (__pyx_t_1 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1));
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1);
        #endif
        ++__pyx_t_1;
      }
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 57, __pyx_L1_error)
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_3);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(1, 57, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "vector.from_py":58
 * 
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 * 
 *     return v
*/
    __pyx_t_6 = __Pyx_PyLong_As_int64_t(__pyx_v_item); if (unlikely((__pyx_t_6 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 58, __pyx_L1_error)
    try {
      __pyx_v_v.push_back(((int64_t)__pyx_t_6));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 58, __pyx_L1_error)
    }

    /* "vector.from_py":57
 *         v.reserve(<size_t> s)
 * 
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 * 
*/
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vector.from_py":60
 *         v.push_back(<X>item)
 * 
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":48
 *     cdef Py_ssize_t __Pyx_PyObject_LengthHint(object o, Py_ssize_t defaultval) except -1
 * 
 * @cname("__pyx_convert_vector_from_py_int64_t")             # <<<<<<<<<<<<<<
 * cdef vector[X] __pyx_convert_vector_from_py_int64_t(object o) except *:
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int64_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<float>  __pyx_convert_vector_from_py_float(PyObject *__pyx_v_o) {
  std::vector<float>  __pyx_v_v;
  Py_ssize_t __pyx_v_s;
  PyObject *__pyx_v_item = NULL;
  std::vector<float>  __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  float __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_float", 0);

  /* "vector.from_py":52
 * 
 *     cdef vector[X] v
 *     cdef Py_ssize_t s = __Pyx_PyObject_LengthHint(o, 0)             # <<<<<<<<<<<<<<
 * 
 *     if s > 0:
*/
  __pyx_t_1 = __Pyx_PyObject_LengthHint(__pyx_v_o, 0); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 52, __pyx_L1_error)
  __pyx_v_s = __pyx_t_1;

  /* "vector.from_py":54
 *     cdef Py_ssize_t s = __Pyx_PyObject_LengthHint(o, 0)
 * 
 *     if s > 0:             # <<<<<<<<<<<<<<
 *         v.reserve(<size_t> s)
 * 
*/
  __pyx_t_2 = (__pyx_v_s > 0);
  if (__pyx_t_2) {

    /* "vector.from_py":55
 * 
 *     if s > 0:
 *         v.reserve(<size_t> s)             # <<<<<<<<<<<<<<
 * 
 *     for item in o:
*/
    try {
      __pyx_v_v.reserve(((size_t)__pyx_v_s));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 55, __pyx_L1_error)
    }

    /* "vector.from_py":54
 *     cdef Py_ssize_t s = __Pyx_PyObject_LengthHint(o, 0)
 * 
 *     if s > 0:             # <<<<<<<<<<<<<<
 *         v.reserve(<size_t> s)
 * 
*/
  }

  /* "vector.from_py":57
 *         v.reserve(<size_t> s)
 * 
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 * 
*/
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_3 = __pyx_v_o; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 57, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 57, __pyx_L1_error)
          #endif
          if (__pyx_t_1 >= __pyx_temp) break;
        }
        __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_1);
        ++__pyx_t_1;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 57, __pyx_L1_error)
          #endif
          if (__pyx_t_1 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1));
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1);
        #endif
        ++__pyx_t_1;
      }
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 57, __pyx_L1_error)
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_3);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(1, 57, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "vector.from_py":58
 * 
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 * 
 *     return v
*/
    __pyx_t_6 = __Pyx_PyFloat_AsFloat(__pyx_v_item); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 58, __pyx_L1_error)
    try {
      __pyx_v_v.push_back(((float)__pyx_t_6));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 58, __pyx_L1_error)
    }

    /* "vector.from_py":57
 *         v.reserve(<size_t> s)
 * 
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 * 
*/
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vector.from_py":60
 *         v.push_back(<X>item)
 * 
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":48
 *     cdef Py_ssize_t __Pyx_PyObject_LengthHint(object o, Py_ssize_t defaultval) except -1
 * 
 * @cname("__pyx_convert_vector_from_py_float")             # <<<<<<<<<<<<<<
 * cdef vector[X] __pyx_convert_vector_from_py_float(object o) except *:
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<struct __pyx_t_5spacy_7structs_AliasC>  __pyx_convert_vector_from_py_struct____pyx_t_5spacy_7structs_AliasC(PyObject *__pyx_v_o) {
  std::vector<struct __pyx_t_5spacy_7structs_AliasC>  __pyx_v_v;
  Py_ssize_t __pyx_v_s;
  PyObject *__pyx_v_item = NULL;
  std::vector<struct __pyx_t_5spacy_7structs_AliasC>  __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_t_5spacy_7structs_AliasC __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_struct____pyx_t_5spacy_7structs_AliasC", 0);

  /* "vector.from_py":52
 * 
 *     cdef vector[X] v
 *     cdef Py_ssize_t s = __Pyx_PyObject_LengthHint(o, 0)             # <<<<<<<<<<<<<<
 * 
 *     if s > 0:
*/
  __pyx_t_1 = __Pyx_PyObject_LengthHint(__pyx_v_o, 0); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 52, __pyx_L1_error)
  __pyx_v_s = __pyx_t_1;

  /* "vector.from_py":54
 *     cdef Py_ssize_t s = __Pyx_PyObject_LengthHint(o, 0)
 * 
 *     if s > 0:             # <<<<<<<<<<<<<<
 *         v.reserve(<size_t> s)
 * 
*/
  __pyx_t_2 = (__pyx_v_s > 0);
  if (__pyx_t_2) {

    /* "vector.from_py":55
 * 
 *     if s > 0:
 *         v.reserve(<size_t> s)             # <<<<<<<<<<<<<<
 * 
 *     for item in o:
*/
    try {
      __pyx_v_v.reserve(((size_t)__pyx_v_s));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 55, __pyx_L1_error)
    }

    /* "vector.from_py":54
 *     cdef Py_ssize_t s = __Pyx_PyObject_LengthHint(o, 0)
 * 
 *     if s > 0:             # <<<<<<<<<<<<<<
 *         v.reserve(<size_t> s)
 * 
*/
  }

  /* "vector.from_py":57
 *         v.reserve(<size_t> s)
 * 
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 * 
*/
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_3 = __pyx_v_o; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 57, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 57, __pyx_L1_error)
          #endif
          if (__pyx_t_1 >= __pyx_temp) break;
        }
        __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_1);
        ++__pyx_t_1;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 57, __pyx_L1_error)
          #endif
          if (__pyx_t_1 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1));
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1);
        #endif
        ++__pyx_t_1;
      }
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 57, __pyx_L1_error)
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_3);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(1, 57, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "vector.from_py":58
 * 
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 * 
 *     return v
*/
    __pyx_t_6 = __pyx_convert__from_py_struct____pyx_t_5spacy_7structs_AliasC(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 58, __pyx_L1_error)
    try {
      __pyx_v_v.push_back(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 58, __pyx_L1_error)
    }

    /* "vector.from_py":57
 *         v.reserve(<size_t> s)
 * 
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 * 
*/
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vector.from_py":60
 *         v.push_back(<X>item)
 * 
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":48
 *     cdef Py_ssize_t __Pyx_PyObject_LengthHint(object o, Py_ssize_t defaultval) except -1
 * 
 * @cname("__pyx_convert_vector_from_py_struct____pyx_t_5spacy_7structs_AliasC")             # <<<<<<<<<<<<<<
 * cdef vector[X] __pyx_convert_vector_from_py_struct____pyx_t_5spacy_7structs_AliasC(object o) except *:
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_struct____pyx_t_5spacy_7structs_AliasC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<struct __pyx_t_5spacy_7structs_KBEntryC>  __pyx_convert_vector_from_py_struct____pyx_t_5spacy_7structs_KBEntryC(PyObject *__pyx_v_o) {
  std::vector<struct __pyx_t_5spacy_7structs_KBEntryC>  __pyx_v_v;
  Py_ssize_t __pyx_v_s;
  PyObject *__pyx_v_item = NULL;
  std::vector<struct __pyx_t_5spacy_7structs_KBEntryC>  __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_t_5spacy_7structs_KBEntryC __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_struct____pyx_t_5spacy_7structs_KBEntryC", 0);

  /* "vector.from_py":52
 * 
 *     cdef vector[X] v
 *     cdef Py_ssize_t s = __Pyx_PyObject_LengthHint(o, 0)             # <<<<<<<<<<<<<<
 * 
 *     if s > 0:
*/
  __pyx_t_1 = __Pyx_PyObject_LengthHint(__pyx_v_o, 0); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 52, __pyx_L1_error)
  __pyx_v_s = __pyx_t_1;

  /* "vector.from_py":54
 *     cdef Py_ssize_t s = __Pyx_PyObject_LengthHint(o, 0)
 * 
 *     if s > 0:             # <<<<<<<<<<<<<<
 *         v.reserve(<size_t> s)
 * 
*/
  __pyx_t_2 = (__pyx_v_s > 0);
  if (__pyx_t_2) {

    /* "vector.from_py":55
 * 
 *     if s > 0:
 *         v.reserve(<size_t> s)             # <<<<<<<<<<<<<<
 * 
 *     for item in o:
*/
    try {
      __pyx_v_v.reserve(((size_t)__pyx_v_s));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 55, __pyx_L1_error)
    }

    /* "vector.from_py":54
 *     cdef Py_ssize_t s = __Pyx_PyObject_LengthHint(o, 0)
 * 
 *     if s > 0:             # <<<<<<<<<<<<<<
 *         v.reserve(<size_t> s)
 * 
*/
  }

  /* "vector.from_py":57
 *         v.reserve(<size_t> s)
 * 
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 * 
*/
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_3 = __pyx_v_o; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 57, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 57, __pyx_L1_error)
          #endif
          if (__pyx_t_1 >= __pyx_temp) break;
        }
        __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_1);
        ++__pyx_t_1;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 57, __pyx_L1_error)
          #endif
          if (__pyx_t_1 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1));
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1);
        #endif
        ++__pyx_t_1;
      }
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 57, __pyx_L1_error)
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_3);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(1, 57, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "vector.from_py":58
 * 
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 * 
 *     return v
*/
    __pyx_t_6 = __pyx_convert__from_py_struct____pyx_t_5spacy_7structs_KBEntryC(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 58, __pyx_L1_error)
    try {
      __pyx_v_v.push_back(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 58, __pyx_L1_error)
    }

    /* "vector.from_py":57
 *         v.reserve(<size_t> s)
 * 
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 * 
*/
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vector.from_py":60
 *         v.push_back(<X>item)
 * 
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":48
 *     cdef Py_ssize_t __Pyx_PyObject_LengthHint(object o, Py_ssize_t defaultval) except -1
 * 
 * @cname("__pyx_convert_vector_from_py_struct____pyx_t_5spacy_7structs_KBEntryC")             # <<<<<<<<<<<<<<
 * cdef vector[X] __pyx_convert_vector_from_py_struct____pyx_t_5spacy_7structs_KBEntryC(object o) except *:
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_struct____pyx_t_5spacy_7structs_KBEntryC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<__pyx_t_5spacy_2kb_12kb_in_memory_float_vec>  __pyx_convert_vector_from_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec(PyObject *__pyx_v_o) {
  std::vector<__pyx_t_5spacy_2kb_12kb_in_memory_float_vec>  __pyx_v_v;
  Py_ssize_t __pyx_v_s;
  PyObject *__pyx_v_item = NULL;
  std::vector<__pyx_t_5spacy_2kb_12kb_in_memory_float_vec>  __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  __pyx_t_5spacy_2kb_12kb_in_memory_float_vec __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec", 0);

  /* "vector.from_py":52
 * 
 *     cdef vector[X] v
 *     cdef Py_ssize_t s = __Pyx_PyObject_LengthHint(o, 0)             # <<<<<<<<<<<<<<
 * 
 *     if s > 0:
*/
  __pyx_t_1 = __Pyx_PyObject_LengthHint(__pyx_v_o, 0); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 52, __pyx_L1_error)
  __pyx_v_s = __pyx_t_1;

  /* "vector.from_py":54
 *     cdef Py_ssize_t s = __Pyx_PyObject_LengthHint(o, 0)
 * 
 *     if s > 0:             # <<<<<<<<<<<<<<
 *         v.reserve(<size_t> s)
 * 
*/
  __pyx_t_2 = (__pyx_v_s > 0);
  if (__pyx_t_2) {

    /* "vector.from_py":55
 * 
 *     if s > 0:
 *         v.reserve(<size_t> s)             # <<<<<<<<<<<<<<
 * 
 *     for item in o:
*/
    try {
      __pyx_v_v.reserve(((size_t)__pyx_v_s));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 55, __pyx_L1_error)
    }

    /* "vector.from_py":54
 *     cdef Py_ssize_t s = __Pyx_PyObject_LengthHint(o, 0)
 * 
 *     if s > 0:             # <<<<<<<<<<<<<<
 *         v.reserve(<size_t> s)
 * 
*/
  }

  /* "vector.from_py":57
 *         v.reserve(<size_t> s)
 * 
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 * 
*/
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_3 = __pyx_v_o; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 57, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 57, __pyx_L1_error)
          #endif
          if (__pyx_t_1 >= __pyx_temp) break;
        }
        __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_1);
        ++__pyx_t_1;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 57, __pyx_L1_error)
          #endif
          if (__pyx_t_1 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1));
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1);
        #endif
        ++__pyx_t_1;
      }
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 57, __pyx_L1_error)
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_3);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(1, 57, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "vector.from_py":58
 * 
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 * 
 *     return v
*/
    __pyx_t_6 = __pyx_convert_vector_from_py_float(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 58, __pyx_L1_error)
    try {
      __pyx_v_v.push_back(((__pyx_t_5spacy_2kb_12kb_in_memory_float_vec)__pyx_t_6));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 58, __pyx_L1_error)
    }

    /* "vector.from_py":57
 *         v.reserve(<size_t> s)
 * 
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 * 
*/
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vector.from_py":60
 *         v.push_back(<X>item)
 * 
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":48
 *     cdef Py_ssize_t __Pyx_PyObject_LengthHint(object o, Py_ssize_t defaultval) except -1
 * 
 * @cname("__pyx_convert_vector_from_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec")             # <<<<<<<<<<<<<<
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec(object o) except *:
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":286
 *         cdef int type_num
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp itemsize(self) noexcept nogil:
 *             return PyDataType_ELSIZE(self)
*/

static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_8itemsize_itemsize(PyArray_Descr *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":288
 *         @property
 *         cdef inline npy_intp itemsize(self) noexcept nogil:
 *             return PyDataType_ELSIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyDataType_ELSIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":286
 *         cdef int type_num
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp itemsize(self) noexcept nogil:
 *             return PyDataType_ELSIZE(self)
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":290
 *             return PyDataType_ELSIZE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp alignment(self) noexcept nogil:
 *             return PyDataType_ALIGNMENT(self)
*/

static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_9alignment_alignment(PyArray_Descr *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":292
 *         @property
 *         cdef inline npy_intp alignment(self) noexcept nogil:
 *             return PyDataType_ALIGNMENT(self)             # <<<<<<<<<<<<<<
 * 
 *         # Use fields/names with care as they may be NULL.  You must check
*/
  __pyx_r = PyDataType_ALIGNMENT(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":290
 *             return PyDataType_ELSIZE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp alignment(self) noexcept nogil:
 *             return PyDataType_ALIGNMENT(self)
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":296
 *         # Use fields/names with care as they may be NULL.  You must check
 *         # for this using PyDataType_HASFIELDS.
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline object fields(self):
 *             return <object>PyDataType_FIELDS(self)
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_6fields_fields(PyArray_Descr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_RefNannySetupContext("fields", 0);

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":298
 *         @property
 *         cdef inline object fields(self):
 *             return <object>PyDataType_FIELDS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDataType_FIELDS(__pyx_v_self);
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":296
 *         # Use fields/names with care as they may be NULL.  You must check
 *         # for this using PyDataType_HASFIELDS.
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline object fields(self):
 *             return <object>PyDataType_FIELDS(self)
*/

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":300
 *             return <object>PyDataType_FIELDS(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline tuple names(self):
 *             return <tuple>PyDataType_NAMES(self)
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_5names_names(PyArray_Descr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_RefNannySetupContext("names", 0);

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":302
 *         @property
 *         cdef inline tuple names(self):
 *             return <tuple>PyDataType_NAMES(self)             # <<<<<<<<<<<<<<
 * 
 *         # Use PyDataType_HASSUBARRAY to test whether this field is
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDataType_NAMES(__pyx_v_self);
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = ((PyObject*)__pyx_t_1);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":300
 *             return <object>PyDataType_FIELDS(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline tuple names(self):
 *             return <tuple>PyDataType_NAMES(self)
*/

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":307
 *         # valid (the pointer can be NULL). Most users should access
 *         # this field via the inline helper method PyDataType_SHAPE.
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline PyArray_ArrayDescr* subarray(self) noexcept nogil:
 *             return PyDataType_SUBARRAY(self)
*/

static CYTHON_INLINE PyArray_ArrayDescr *__pyx_f_5numpy_5dtype_8subarray_subarray(PyArray_Descr *__pyx_v_self) {
  PyArray_ArrayDescr *__pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":309
 *         @property
 *         cdef inline PyArray_ArrayDescr* subarray(self) noexcept nogil:
 *             return PyDataType_SUBARRAY(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyDataType_SUBARRAY(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":307
 *         # valid (the pointer can be NULL). Most users should access
 *         # this field via the inline helper method PyDataType_SHAPE.
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline PyArray_ArrayDescr* subarray(self) noexcept nogil:
 *             return PyDataType_SUBARRAY(self)
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":311
 *             return PyDataType_SUBARRAY(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_uint64 flags(self) noexcept nogil:
 *             """The data types flags."""
*/

static CYTHON_INLINE npy_uint64 __pyx_f_5numpy_5dtype_5flags_flags(PyArray_Descr *__pyx_v_self) {
  npy_uint64 __pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":314
 *         cdef inline npy_uint64 flags(self) noexcept nogil:
 *             """The data types flags."""
 *             return PyDataType_FLAGS(self)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = PyDataType_FLAGS(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":311
 *             return PyDataType_SUBARRAY(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_uint64 flags(self) noexcept nogil:
 *             """The data types flags."""
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":323
 *     ctypedef class numpy.broadcast [object PyArrayMultiIterObject, check_size ignore]:
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline int numiter(self) noexcept nogil:
 *             """The number of arrays that need to be broadcast to the same shape."""
*/

static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_7numiter_numiter(PyArrayMultiIterObject *__pyx_v_self) {
  int __pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":326
 *         cdef inline int numiter(self) noexcept nogil:
 *             """The number of arrays that need to be broadcast to the same shape."""
 *             return PyArray_MultiIter_NUMITER(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_MultiIter_NUMITER(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":323
 *     ctypedef class numpy.broadcast [object PyArrayMultiIterObject, check_size ignore]:
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline int numiter(self) noexcept nogil:
 *             """The number of arrays that need to be broadcast to the same shape."""
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":328
 *             return PyArray_MultiIter_NUMITER(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp size(self) noexcept nogil:
 *             """The total broadcasted size."""
*/

static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_4size_size(PyArrayMultiIterObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":331
 *         cdef inline npy_intp size(self) noexcept nogil:
 *             """The total broadcasted size."""
 *             return PyArray_MultiIter_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_MultiIter_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":328
 *             return PyArray_MultiIter_NUMITER(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp size(self) noexcept nogil:
 *             """The total broadcasted size."""
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":333
 *             return PyArray_MultiIter_SIZE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp index(self) noexcept nogil:
 *             """The current (1-d) index into the broadcasted result."""
*/

static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_5index_index(PyArrayMultiIterObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":336
 *         cdef inline npy_intp index(self) noexcept nogil:
 *             """The current (1-d) index into the broadcasted result."""
 *             return PyArray_MultiIter_INDEX(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_MultiIter_INDEX(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":333
 *             return PyArray_MultiIter_SIZE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp index(self) noexcept nogil:
 *             """The current (1-d) index into the broadcasted result."""
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":338
 *             return PyArray_MultiIter_INDEX(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline int nd(self) noexcept nogil:
 *             """The number of dimensions in the broadcasted result."""
*/

static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_2nd_nd(PyArrayMultiIterObject *__pyx_v_self) {
  int __pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":341
 *         cdef inline int nd(self) noexcept nogil:
 *             """The number of dimensions in the broadcasted result."""
 *             return PyArray_MultiIter_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_MultiIter_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":338
 *             return PyArray_MultiIter_INDEX(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline int nd(self) noexcept nogil:
 *             """The number of dimensions in the broadcasted result."""
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":343
 *             return PyArray_MultiIter_NDIM(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp* dimensions(self) noexcept nogil:
 *             """The shape of the broadcasted result."""
*/

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_9broadcast_10dimensions_dimensions(PyArrayMultiIterObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":346
 *         cdef inline npy_intp* dimensions(self) noexcept nogil:
 *             """The shape of the broadcasted result."""
 *             return PyArray_MultiIter_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_MultiIter_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":343
 *             return PyArray_MultiIter_NDIM(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp* dimensions(self) noexcept nogil:
 *             """The shape of the broadcasted result."""
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":348
 *             return PyArray_MultiIter_DIMS(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline void** iters(self) noexcept nogil:
 *             """An array of iterator objects that holds the iterators for the arrays to be broadcast together.
*/

static CYTHON_INLINE void **__pyx_f_5numpy_9broadcast_5iters_iters(PyArrayMultiIterObject *__pyx_v_self) {
  void **__pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":352
 *             """An array of iterator objects that holds the iterators for the arrays to be broadcast together.
 *             On return, the iterators are adjusted for broadcasting."""
 *             return PyArray_MultiIter_ITERS(self)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = PyArray_MultiIter_ITERS(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":348
 *             return PyArray_MultiIter_DIMS(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline void** iters(self) noexcept nogil:
 *             """An array of iterator objects that holds the iterators for the arrays to be broadcast together.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":366
 *         # Instead, we use properties that map to the corresponding C-API functions.
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline PyObject* base(self) noexcept nogil:
 *             """Returns a borrowed reference to the object owning the data/memory.
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self) {
  PyObject *__pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":370
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 *             return PyArray_BASE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_BASE(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":366
 *         # Instead, we use properties that map to the corresponding C-API functions.
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline PyObject* base(self) noexcept nogil:
 *             """Returns a borrowed reference to the object owning the data/memory.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":372
 *             return PyArray_BASE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline dtype descr(self):
 *             """Returns an owned reference to the dtype of the array.
*/

static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self) {
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyArray_Descr *__pyx_t_1;
  __Pyx_RefNannySetupContext("descr", 0);

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":376
 *             """Returns an owned reference to the dtype of the array.
 *             """
 *             return <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = PyArray_DESCR(__pyx_v_self);
  __Pyx_INCREF((PyObject *)((PyArray_Descr *)__pyx_t_1));
  __pyx_r = ((PyArray_Descr *)__pyx_t_1);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":372
 *             return PyArray_BASE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline dtype descr(self):
 *             """Returns an owned reference to the dtype of the array.
*/

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":378
 *             return <dtype>PyArray_DESCR(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline int ndim(self) noexcept nogil:
 *             """Returns the number of dimensions in the array.
*/

static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self) {
  int __pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":382
 *             """Returns the number of dimensions in the array.
 *             """
 *             return PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":378
 *             return <dtype>PyArray_DESCR(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline int ndim(self) noexcept nogil:
 *             """Returns the number of dimensions in the array.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":384
 *             return PyArray_NDIM(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp *shape(self) noexcept nogil:
 *             """Returns a pointer to the dimensions/shape of the array.
*/

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":390
 *             Can return NULL for 0-dimensional arrays.
 *             """
 *             return PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":384
 *             return PyArray_NDIM(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp *shape(self) noexcept nogil:
 *             """Returns a pointer to the dimensions/shape of the array.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":392
 *             return PyArray_DIMS(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp *strides(self) noexcept nogil:
 *             """Returns a pointer to the strides of the array.
*/

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":397
 *             The number of elements matches the number of dimensions of the array (ndim).
 *             """
 *             return PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_STRIDES(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":392
 *             return PyArray_DIMS(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp *strides(self) noexcept nogil:
 *             """Returns a pointer to the strides of the array.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":399
 *             return PyArray_STRIDES(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp size(self) noexcept nogil:
 *             """Returns the total size (in number of elements) of the array.
*/

static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":403
 *             """Returns the total size (in number of elements) of the array.
 *             """
 *             return PyArray_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":399
 *             return PyArray_STRIDES(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp size(self) noexcept nogil:
 *             """Returns the total size (in number of elements) of the array.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":405
 *             return PyArray_SIZE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline char* data(self) noexcept nogil:
 *             """The pointer to the data buffer as a char*.
*/

static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self) {
  char *__pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":412
 *             of `PyArray_DATA()` instead, which returns a 'void*'.
 *             """
 *             return PyArray_BYTES(self)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = PyArray_BYTES(__pyx_v_self);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":405
 *             return PyArray_SIZE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline char* data(self) noexcept nogil:
 *             """The pointer to the data buffer as a char*.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":824
 * ctypedef long double complex clongdouble_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":825
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":824
 * ctypedef long double complex clongdouble_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":827
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":828
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":827
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":830
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":831
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":830
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":833
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":834
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":833
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":836
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":837
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":836
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":839
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":840
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
*/
  __pyx_t_1 = PyDataType_HASSUBARRAY(__pyx_v_d);
  if (__pyx_t_1) {

    /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":841
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_5numpy_5dtype_8subarray_subarray(__pyx_v_d)->shape;
    __Pyx_INCREF(((PyObject*)__pyx_t_2));
    __pyx_r = ((PyObject*)__pyx_t_2);
    goto __pyx_L0;

    /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":840
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
*/
  }

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":843
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_empty_tuple);
    __pyx_r = __pyx_mstate_global->__pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":839
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
*/

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1035
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base) except *:             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
*/

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1036
 * 
 * cdef inline void set_array_base(ndarray arr, object base) except *:
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
*/
  Py_INCREF(__pyx_v_base);

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1037
 * cdef inline void set_array_base(ndarray arr, object base) except *:
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
*/
  __pyx_t_1 = PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 1037, __pyx_L1_error)

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1035
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base) except *:             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1039
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1040
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
*/
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1041
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
*/
  __pyx_t_1 = (__pyx_v_base == NULL);
  if (__pyx_t_1) {

    /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1042
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1041
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
*/
  }

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1043
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1039
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
*/

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1047
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
*/

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1048
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1049
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")
*/
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1049, __pyx_L3_error)

      /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1048
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
*/
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1050
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
*/
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(((PyTypeObject*)PyExc_Exception))));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1050, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1051
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
*/
      __pyx_t_9 = NULL;
      __Pyx_INCREF(__pyx_builtin_ImportError);
      __pyx_t_10 = __pyx_builtin_ImportError; 
      __pyx_t_11 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_u_numpy__core_multiarray_failed_to};
        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1051, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_8);
      }
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1051, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1048
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
*/
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1047
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1053
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
*/

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1054
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1055
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")
*/
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1055, __pyx_L3_error)

      /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1054
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
*/
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1056
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.umath failed to import")
 * 
*/
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(((PyTypeObject*)PyExc_Exception))));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1056, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1057
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
*/
      __pyx_t_9 = NULL;
      __Pyx_INCREF(__pyx_builtin_ImportError);
      __pyx_t_10 = __pyx_builtin_ImportError; 
      __pyx_t_11 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_u_numpy__core_umath_failed_to_impo};
        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1057, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_8);
      }
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1057, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1054
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
*/
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1053
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1059
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
*/

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1060
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1061
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")
*/
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1061, __pyx_L3_error)

      /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1060
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
*/
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1062
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.umath failed to import")
 * 
*/
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(((PyTypeObject*)PyExc_Exception))));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1062, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1063
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
*/
      __pyx_t_9 = NULL;
      __Pyx_INCREF(__pyx_builtin_ImportError);
      __pyx_t_10 = __pyx_builtin_ImportError; 
      __pyx_t_11 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_u_numpy__core_umath_failed_to_impo};
        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1063, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_8);
      }
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1063, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1060
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
*/
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1059
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1066
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
*/

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1078
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1066
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1081
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
*/

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1093
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1081
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1096
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
*/

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1103
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1096
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1106
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
*/

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1110
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1106
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1113
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
*/

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1117
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "C:/Users/runneradmin/AppData/Local/Temp/pip-build-env-1xodcuc8/overlay/Lib/site-packages/numpy/__init__.cython-30.pxd":1113
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pxd":58
 *     cdef object _features_table
 * 
 *     cdef inline int64_t c_add_vector(self, vector[float] entity_vector) nogil:             # <<<<<<<<<<<<<<
 *         """Add an entity vector to the vectors table."""
 *         cdef int64_t new_index = self._vectors_table.size()
*/

static CYTHON_INLINE int64_t __pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_c_add_vector(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, std::vector<float>  __pyx_v_entity_vector) {
  int64_t __pyx_v_new_index;
  int64_t __pyx_r;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyGILState_STATE __pyx_gilstate_save;

  /* "spacy/kb/kb_in_memory.pxd":60
 *     cdef inline int64_t c_add_vector(self, vector[float] entity_vector) nogil:
 *         """Add an entity vector to the vectors table."""
 *         cdef int64_t new_index = self._vectors_table.size()             # <<<<<<<<<<<<<<
 *         self._vectors_table.push_back(entity_vector)
 *         return new_index
*/
  __pyx_v_new_index = __pyx_v_self->_vectors_table.size();

  /* "spacy/kb/kb_in_memory.pxd":61
 *         """Add an entity vector to the vectors table."""
 *         cdef int64_t new_index = self._vectors_table.size()
 *         self._vectors_table.push_back(entity_vector)             # <<<<<<<<<<<<<<
 *         return new_index
 * 
*/
  try {
    __pyx_v_self->_vectors_table.push_back(__pyx_v_entity_vector);
  } catch(...) {
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    __Pyx_CppExn2PyErr();
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    __PYX_ERR(3, 61, __pyx_L1_error)
  }

  /* "spacy/kb/kb_in_memory.pxd":62
 *         cdef int64_t new_index = self._vectors_table.size()
 *         self._vectors_table.push_back(entity_vector)
 *         return new_index             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int64_t c_add_entity(
*/
  __pyx_r = __pyx_v_new_index;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pxd":58
 *     cdef object _features_table
 * 
 *     cdef inline int64_t c_add_vector(self, vector[float] entity_vector) nogil:             # <<<<<<<<<<<<<<
 *         """Add an entity vector to the vectors table."""
 *         cdef int64_t new_index = self._vectors_table.size()
*/

  /* function exit code */
  __pyx_L1_error:;
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.c_add_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  __pyx_L0:;
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pxd":64
 *         return new_index
 * 
 *     cdef inline int64_t c_add_entity(             # <<<<<<<<<<<<<<
 *         self,
 *         hash_t entity_hash,
*/

static CYTHON_INLINE int64_t __pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_c_add_entity(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, __pyx_t_5spacy_8typedefs_hash_t __pyx_v_entity_hash, float __pyx_v_freq, int32_t __pyx_v_vector_index, int __pyx_v_feats_row) {
  int64_t __pyx_v_new_index;
  struct __pyx_t_5spacy_7structs_KBEntryC __pyx_v_entry;
  int64_t __pyx_r;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyGILState_STATE __pyx_gilstate_save;

  /* "spacy/kb/kb_in_memory.pxd":76
 *         # This is what we'll map the entity hash key to. It's where the entry will sit
 *         # in the vector of entries, so we can get it later.
 *         cdef int64_t new_index = self._entries.size()             # <<<<<<<<<<<<<<
 * 
 *         # Avoid struct initializer to enable nogil, cf.
*/
  __pyx_v_new_index = __pyx_v_self->_entries.size();

  /* "spacy/kb/kb_in_memory.pxd":81
 *         # https://github.com/cython/cython/issues/1642
 *         cdef KBEntryC entry
 *         entry.entity_hash = entity_hash             # <<<<<<<<<<<<<<
 *         entry.vector_index = vector_index
 *         entry.feats_row = feats_row
*/
  __pyx_v_entry.entity_hash = __pyx_v_entity_hash;

  /* "spacy/kb/kb_in_memory.pxd":82
 *         cdef KBEntryC entry
 *         entry.entity_hash = entity_hash
 *         entry.vector_index = vector_index             # <<<<<<<<<<<<<<
 *         entry.feats_row = feats_row
 *         entry.freq = freq
*/
  __pyx_v_entry.vector_index = __pyx_v_vector_index;

  /* "spacy/kb/kb_in_memory.pxd":83
 *         entry.entity_hash = entity_hash
 *         entry.vector_index = vector_index
 *         entry.feats_row = feats_row             # <<<<<<<<<<<<<<
 *         entry.freq = freq
 * 
*/
  __pyx_v_entry.feats_row = __pyx_v_feats_row;

  /* "spacy/kb/kb_in_memory.pxd":84
 *         entry.vector_index = vector_index
 *         entry.feats_row = feats_row
 *         entry.freq = freq             # <<<<<<<<<<<<<<
 * 
 *         self._entries.push_back(entry)
*/
  __pyx_v_entry.freq = __pyx_v_freq;

  /* "spacy/kb/kb_in_memory.pxd":86
 *         entry.freq = freq
 * 
 *         self._entries.push_back(entry)             # <<<<<<<<<<<<<<
 *         return new_index
 * 
*/
  try {
    __pyx_v_self->_entries.push_back(__pyx_v_entry);
  } catch(...) {
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    __Pyx_CppExn2PyErr();
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    __PYX_ERR(3, 86, __pyx_L1_error)
  }

  /* "spacy/kb/kb_in_memory.pxd":87
 * 
 *         self._entries.push_back(entry)
 *         return new_index             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int64_t c_add_aliases(
*/
  __pyx_r = __pyx_v_new_index;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pxd":64
 *         return new_index
 * 
 *     cdef inline int64_t c_add_entity(             # <<<<<<<<<<<<<<
 *         self,
 *         hash_t entity_hash,
*/

  /* function exit code */
  __pyx_L1_error:;
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.c_add_entity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  __pyx_L0:;
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pxd":89
 *         return new_index
 * 
 *     cdef inline int64_t c_add_aliases(             # <<<<<<<<<<<<<<
 *         self,
 *         hash_t alias_hash,
*/

static CYTHON_INLINE int64_t __pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_c_add_aliases(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, CYTHON_UNUSED __pyx_t_5spacy_8typedefs_hash_t __pyx_v_alias_hash, std::vector<int64_t>  __pyx_v_entry_indices, std::vector<float>  __pyx_v_probs) {
  int64_t __pyx_v_new_index;
  struct __pyx_t_5spacy_7structs_AliasC __pyx_v_alias;
  int64_t __pyx_r;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyGILState_STATE __pyx_gilstate_save;

  /* "spacy/kb/kb_in_memory.pxd":100
 *         # This is what we'll map the alias hash key to. It's where the alias will be
 *         # defined in the vector of aliases.
 *         cdef int64_t new_index = self._aliases_table.size()             # <<<<<<<<<<<<<<
 * 
 *         # Avoid struct initializer to enable nogil
*/
  __pyx_v_new_index = __pyx_v_self->_aliases_table.size();

  /* "spacy/kb/kb_in_memory.pxd":104
 *         # Avoid struct initializer to enable nogil
 *         cdef AliasC alias
 *         alias.entry_indices = entry_indices             # <<<<<<<<<<<<<<
 *         alias.probs = probs
 * 
*/
  __pyx_v_alias.entry_indices = __pyx_v_entry_indices;

  /* "spacy/kb/kb_in_memory.pxd":105
 *         cdef AliasC alias
 *         alias.entry_indices = entry_indices
 *         alias.probs = probs             # <<<<<<<<<<<<<<
 * 
 *         self._aliases_table.push_back(alias)
*/
  __pyx_v_alias.probs = __pyx_v_probs;

  /* "spacy/kb/kb_in_memory.pxd":107
 *         alias.probs = probs
 * 
 *         self._aliases_table.push_back(alias)             # <<<<<<<<<<<<<<
 *         return new_index
 * 
*/
  try {
    __pyx_v_self->_aliases_table.push_back(__pyx_v_alias);
  } catch(...) {
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    __Pyx_CppExn2PyErr();
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    __PYX_ERR(3, 107, __pyx_L1_error)
  }

  /* "spacy/kb/kb_in_memory.pxd":108
 * 
 *         self._aliases_table.push_back(alias)
 *         return new_index             # <<<<<<<<<<<<<<
 * 
 *     cdef inline void _create_empty_vectors(self, hash_t dummy_hash) nogil:
*/
  __pyx_r = __pyx_v_new_index;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pxd":89
 *         return new_index
 * 
 *     cdef inline int64_t c_add_aliases(             # <<<<<<<<<<<<<<
 *         self,
 *         hash_t alias_hash,
*/

  /* function exit code */
  __pyx_L1_error:;
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.c_add_aliases", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  __pyx_L0:;
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pxd":110
 *         return new_index
 * 
 *     cdef inline void _create_empty_vectors(self, hash_t dummy_hash) nogil:             # <<<<<<<<<<<<<<
 *         """
 *         Initializing the vectors and making sure the first element of each vector is a
*/

static CYTHON_INLINE void __pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB__create_empty_vectors(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, __pyx_t_5spacy_8typedefs_hash_t __pyx_v_dummy_hash) {
  int32_t __pyx_v_dummy_value;
  struct __pyx_t_5spacy_7structs_KBEntryC __pyx_v_entry;
  std::vector<int64_t>  __pyx_v_dummy_entry_indices;
  std::vector<float>  __pyx_v_dummy_probs;
  struct __pyx_t_5spacy_7structs_AliasC __pyx_v_alias;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyGILState_STATE __pyx_gilstate_save;

  /* "spacy/kb/kb_in_memory.pxd":117
 *         cf. https://github.com/explosion/preshed/issues/17
 *         """
 *         cdef int32_t dummy_value = 0             # <<<<<<<<<<<<<<
 * 
 *         # Avoid struct initializer to enable nogil
*/
  __pyx_v_dummy_value = 0;

  /* "spacy/kb/kb_in_memory.pxd":121
 *         # Avoid struct initializer to enable nogil
 *         cdef KBEntryC entry
 *         entry.entity_hash = dummy_hash             # <<<<<<<<<<<<<<
 *         entry.vector_index = dummy_value
 *         entry.feats_row = dummy_value
*/
  __pyx_v_entry.entity_hash = __pyx_v_dummy_hash;

  /* "spacy/kb/kb_in_memory.pxd":122
 *         cdef KBEntryC entry
 *         entry.entity_hash = dummy_hash
 *         entry.vector_index = dummy_value             # <<<<<<<<<<<<<<
 *         entry.feats_row = dummy_value
 *         entry.freq = dummy_value
*/
  __pyx_v_entry.vector_index = __pyx_v_dummy_value;

  /* "spacy/kb/kb_in_memory.pxd":123
 *         entry.entity_hash = dummy_hash
 *         entry.vector_index = dummy_value
 *         entry.feats_row = dummy_value             # <<<<<<<<<<<<<<
 *         entry.freq = dummy_value
 * 
*/
  __pyx_v_entry.feats_row = __pyx_v_dummy_value;

  /* "spacy/kb/kb_in_memory.pxd":124
 *         entry.vector_index = dummy_value
 *         entry.feats_row = dummy_value
 *         entry.freq = dummy_value             # <<<<<<<<<<<<<<
 * 
 *         # Avoid struct initializer to enable nogil
*/
  __pyx_v_entry.freq = __pyx_v_dummy_value;

  /* "spacy/kb/kb_in_memory.pxd":128
 *         # Avoid struct initializer to enable nogil
 *         cdef vector[int64_t] dummy_entry_indices
 *         dummy_entry_indices.push_back(0)             # <<<<<<<<<<<<<<
 *         cdef vector[float] dummy_probs
 *         dummy_probs.push_back(0)
*/
  try {
    __pyx_v_dummy_entry_indices.push_back(0);
  } catch(...) {
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    __Pyx_CppExn2PyErr();
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    __PYX_ERR(3, 128, __pyx_L1_error)
  }

  /* "spacy/kb/kb_in_memory.pxd":130
 *         dummy_entry_indices.push_back(0)
 *         cdef vector[float] dummy_probs
 *         dummy_probs.push_back(0)             # <<<<<<<<<<<<<<
 * 
 *         cdef AliasC alias
*/
  try {
    __pyx_v_dummy_probs.push_back(0.0);
  } catch(...) {
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    __Pyx_CppExn2PyErr();
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    __PYX_ERR(3, 130, __pyx_L1_error)
  }

  /* "spacy/kb/kb_in_memory.pxd":133
 * 
 *         cdef AliasC alias
 *         alias.entry_indices = dummy_entry_indices             # <<<<<<<<<<<<<<
 *         alias.probs = dummy_probs
 * 
*/
  __pyx_v_alias.entry_indices = __pyx_v_dummy_entry_indices;

  /* "spacy/kb/kb_in_memory.pxd":134
 *         cdef AliasC alias
 *         alias.entry_indices = dummy_entry_indices
 *         alias.probs = dummy_probs             # <<<<<<<<<<<<<<
 * 
 *         self._entries.push_back(entry)
*/
  __pyx_v_alias.probs = __pyx_v_dummy_probs;

  /* "spacy/kb/kb_in_memory.pxd":136
 *         alias.probs = dummy_probs
 * 
 *         self._entries.push_back(entry)             # <<<<<<<<<<<<<<
 *         self._aliases_table.push_back(alias)
 * 
*/
  try {
    __pyx_v_self->_entries.push_back(__pyx_v_entry);
  } catch(...) {
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    __Pyx_CppExn2PyErr();
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    __PYX_ERR(3, 136, __pyx_L1_error)
  }

  /* "spacy/kb/kb_in_memory.pxd":137
 * 
 *         self._entries.push_back(entry)
 *         self._aliases_table.push_back(alias)             # <<<<<<<<<<<<<<
 * 
 *     cpdef set_entities(self, entity_list, freq_list, vector_list)
*/
  try {
    __pyx_v_self->_aliases_table.push_back(__pyx_v_alias);
  } catch(...) {
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    __Pyx_CppExn2PyErr();
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    __PYX_ERR(3, 137, __pyx_L1_error)
  }

  /* "spacy/kb/kb_in_memory.pxd":110
 *         return new_index
 * 
 *     cdef inline void _create_empty_vectors(self, hash_t dummy_hash) nogil:             # <<<<<<<<<<<<<<
 *         """
 *         Initializing the vectors and making sure the first element of each vector is a
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB._create_empty_vectors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  __pyx_L0:;
}

/* "spacy/kb/kb_in_memory.pyx":37
 *     """
 * 
 *     def __init__(self, Vocab vocab, entity_vector_length):             # <<<<<<<<<<<<<<
 *         """Create an InMemoryLookupKB."""
 *         super().__init__(vocab, entity_vector_length)
*/

/* Python wrapper */
static int __pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB___init__, "Create an InMemoryLookupKB.");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB___init__;
#endif
static int __pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5spacy_5vocab_Vocab *__pyx_v_vocab = 0;
  PyObject *__pyx_v_entity_vector_length = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_vocab,&__pyx_mstate_global->__pyx_n_u_entity_vector_length,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 37, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 37, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 37, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__init__", 0) < 0) __PYX_ERR(0, 37, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, i); __PYX_ERR(0, 37, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 37, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 37, __pyx_L3_error)
    }
    __pyx_v_vocab = ((struct __pyx_obj_5spacy_5vocab_Vocab *)values[0]);
    __pyx_v_entity_vector_length = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 37, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vocab), __pyx_mstate_global->__pyx_ptype_5spacy_5vocab_Vocab, 1, "vocab", 0))) __PYX_ERR(0, 37, __pyx_L1_error)
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB___init__(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self), __pyx_v_vocab, __pyx_v_entity_vector_length);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB___init__(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, struct __pyx_obj_5spacy_5vocab_Vocab *__pyx_v_vocab, PyObject *__pyx_v_entity_vector_length) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "spacy/kb/kb_in_memory.pyx":39
 *     def __init__(self, Vocab vocab, entity_vector_length):
 *         """Create an InMemoryLookupKB."""
 *         super().__init__(vocab, entity_vector_length)             # <<<<<<<<<<<<<<
 *         self._entry_index = PreshMap()
 *         self._alias_index = PreshMap()
*/
  __pyx_t_4 = NULL;
  __Pyx_INCREF(__pyx_builtin_super);
  __pyx_t_5 = __pyx_builtin_super; 
  __pyx_t_6 = 1;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, ((PyObject *)__pyx_mstate_global->__pyx_ptype_5spacy_2kb_12kb_in_memory_InMemoryLookupKB), ((PyObject *)__pyx_v_self)};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_t_2 = __pyx_t_3;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_6 = 0;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, ((PyObject *)__pyx_v_vocab), __pyx_v_entity_vector_length};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_init, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":40
 *         """Create an InMemoryLookupKB."""
 *         super().__init__(vocab, entity_vector_length)
 *         self._entry_index = PreshMap()             # <<<<<<<<<<<<<<
 *         self._alias_index = PreshMap()
 *         self._create_empty_vectors(dummy_hash=self.vocab.strings[""])
*/
  __pyx_t_3 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_7preshed_4maps_PreshMap);
  __pyx_t_2 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_7preshed_4maps_PreshMap); 
  __pyx_t_6 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __Pyx_GIVEREF((PyObject *)__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_entry_index);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_entry_index);
  __pyx_v_self->_entry_index = ((struct __pyx_obj_7preshed_4maps_PreshMap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":41
 *         super().__init__(vocab, entity_vector_length)
 *         self._entry_index = PreshMap()
 *         self._alias_index = PreshMap()             # <<<<<<<<<<<<<<
 *         self._create_empty_vectors(dummy_hash=self.vocab.strings[""])
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_7preshed_4maps_PreshMap);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_7preshed_4maps_PreshMap); 
  __pyx_t_6 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __Pyx_GIVEREF((PyObject *)__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_alias_index);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_alias_index);
  __pyx_v_self->_alias_index = ((struct __pyx_obj_7preshed_4maps_PreshMap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":42
 *         self._entry_index = PreshMap()
 *         self._alias_index = PreshMap()
 *         self._create_empty_vectors(dummy_hash=self.vocab.strings[""])             # <<<<<<<<<<<<<<
 * 
 *     def _initialize_entities(self, int64_t nr_entities):
*/
  __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->__pyx_base.vocab->strings), __pyx_mstate_global->__pyx_kp_u_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyLong_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_7 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB__create_empty_vectors(__pyx_v_self, __pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 42, __pyx_L1_error)

  /* "spacy/kb/kb_in_memory.pyx":37
 *     """
 * 
 *     def __init__(self, Vocab vocab, entity_vector_length):             # <<<<<<<<<<<<<<
 *         """Create an InMemoryLookupKB."""
 *         super().__init__(vocab, entity_vector_length)
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":44
 *         self._create_empty_vectors(dummy_hash=self.vocab.strings[""])
 * 
 *     def _initialize_entities(self, int64_t nr_entities):             # <<<<<<<<<<<<<<
 *         self._entry_index = PreshMap(nr_entities + 1)
 *         self._entries = entry_vec(nr_entities + 1)
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_3_initialize_entities(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_2_initialize_entities, "InMemoryLookupKB._initialize_entities(self, int64_t nr_entities)");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_3_initialize_entities = {"_initialize_entities", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_3_initialize_entities, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_2_initialize_entities};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_3_initialize_entities(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int64_t __pyx_v_nr_entities;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_initialize_entities (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_nr_entities,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 44, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 44, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_initialize_entities", 0) < 0) __PYX_ERR(0, 44, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_initialize_entities", 1, 1, 1, i); __PYX_ERR(0, 44, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 44, __pyx_L3_error)
    }
    __pyx_v_nr_entities = __Pyx_PyLong_As_int64_t(values[0]); if (unlikely((__pyx_v_nr_entities == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 44, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_initialize_entities", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 44, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB._initialize_entities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_2_initialize_entities(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self), __pyx_v_nr_entities);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_2_initialize_entities(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, int64_t __pyx_v_nr_entities) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  __pyx_t_5spacy_2kb_12kb_in_memory_entry_vec __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_initialize_entities", 0);

  /* "spacy/kb/kb_in_memory.pyx":45
 * 
 *     def _initialize_entities(self, int64_t nr_entities):
 *         self._entry_index = PreshMap(nr_entities + 1)             # <<<<<<<<<<<<<<
 *         self._entries = entry_vec(nr_entities + 1)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_7preshed_4maps_PreshMap);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_7preshed_4maps_PreshMap); 
  __pyx_t_4 = __Pyx_PyLong_From_int64_t((__pyx_v_nr_entities + 1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __Pyx_GIVEREF((PyObject *)__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_entry_index);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_entry_index);
  __pyx_v_self->_entry_index = ((struct __pyx_obj_7preshed_4maps_PreshMap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":46
 *     def _initialize_entities(self, int64_t nr_entities):
 *         self._entry_index = PreshMap(nr_entities + 1)
 *         self._entries = entry_vec(nr_entities + 1)             # <<<<<<<<<<<<<<
 * 
 *     def _initialize_vectors(self, int64_t nr_entities):
*/
  try {
    __pyx_t_6 = __pyx_t_5spacy_2kb_12kb_in_memory_entry_vec((__pyx_v_nr_entities + 1));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 46, __pyx_L1_error)
  }
  __pyx_v_self->_entries = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

  /* "spacy/kb/kb_in_memory.pyx":44
 *         self._create_empty_vectors(dummy_hash=self.vocab.strings[""])
 * 
 *     def _initialize_entities(self, int64_t nr_entities):             # <<<<<<<<<<<<<<
 *         self._entry_index = PreshMap(nr_entities + 1)
 *         self._entries = entry_vec(nr_entities + 1)
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB._initialize_entities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":48
 *         self._entries = entry_vec(nr_entities + 1)
 * 
 *     def _initialize_vectors(self, int64_t nr_entities):             # <<<<<<<<<<<<<<
 *         self._vectors_table = float_matrix(nr_entities + 1)
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_5_initialize_vectors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_4_initialize_vectors, "InMemoryLookupKB._initialize_vectors(self, int64_t nr_entities)");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_5_initialize_vectors = {"_initialize_vectors", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_5_initialize_vectors, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_4_initialize_vectors};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_5_initialize_vectors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int64_t __pyx_v_nr_entities;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_initialize_vectors (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_nr_entities,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 48, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 48, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_initialize_vectors", 0) < 0) __PYX_ERR(0, 48, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_initialize_vectors", 1, 1, 1, i); __PYX_ERR(0, 48, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 48, __pyx_L3_error)
    }
    __pyx_v_nr_entities = __Pyx_PyLong_As_int64_t(values[0]); if (unlikely((__pyx_v_nr_entities == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_initialize_vectors", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 48, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB._initialize_vectors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_4_initialize_vectors(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self), __pyx_v_nr_entities);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_4_initialize_vectors(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, int64_t __pyx_v_nr_entities) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_5spacy_2kb_12kb_in_memory_float_matrix __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_initialize_vectors", 0);

  /* "spacy/kb/kb_in_memory.pyx":49
 * 
 *     def _initialize_vectors(self, int64_t nr_entities):
 *         self._vectors_table = float_matrix(nr_entities + 1)             # <<<<<<<<<<<<<<
 * 
 *     def _initialize_aliases(self, int64_t nr_aliases):
*/
  try {
    __pyx_t_1 = __pyx_t_5spacy_2kb_12kb_in_memory_float_matrix((__pyx_v_nr_entities + 1));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 49, __pyx_L1_error)
  }
  __pyx_v_self->_vectors_table = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "spacy/kb/kb_in_memory.pyx":48
 *         self._entries = entry_vec(nr_entities + 1)
 * 
 *     def _initialize_vectors(self, int64_t nr_entities):             # <<<<<<<<<<<<<<
 *         self._vectors_table = float_matrix(nr_entities + 1)
 * 
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB._initialize_vectors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":51
 *         self._vectors_table = float_matrix(nr_entities + 1)
 * 
 *     def _initialize_aliases(self, int64_t nr_aliases):             # <<<<<<<<<<<<<<
 *         self._alias_index = PreshMap(nr_aliases + 1)
 *         self._aliases_table = alias_vec(nr_aliases + 1)
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_7_initialize_aliases(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_6_initialize_aliases, "InMemoryLookupKB._initialize_aliases(self, int64_t nr_aliases)");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_7_initialize_aliases = {"_initialize_aliases", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_7_initialize_aliases, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_6_initialize_aliases};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_7_initialize_aliases(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int64_t __pyx_v_nr_aliases;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_initialize_aliases (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_nr_aliases,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 51, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 51, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_initialize_aliases", 0) < 0) __PYX_ERR(0, 51, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_initialize_aliases", 1, 1, 1, i); __PYX_ERR(0, 51, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 51, __pyx_L3_error)
    }
    __pyx_v_nr_aliases = __Pyx_PyLong_As_int64_t(values[0]); if (unlikely((__pyx_v_nr_aliases == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 51, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_initialize_aliases", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 51, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB._initialize_aliases", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_6_initialize_aliases(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self), __pyx_v_nr_aliases);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_6_initialize_aliases(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, int64_t __pyx_v_nr_aliases) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  __pyx_t_5spacy_2kb_12kb_in_memory_alias_vec __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_initialize_aliases", 0);

  /* "spacy/kb/kb_in_memory.pyx":52
 * 
 *     def _initialize_aliases(self, int64_t nr_aliases):
 *         self._alias_index = PreshMap(nr_aliases + 1)             # <<<<<<<<<<<<<<
 *         self._aliases_table = alias_vec(nr_aliases + 1)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_7preshed_4maps_PreshMap);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_7preshed_4maps_PreshMap); 
  __pyx_t_4 = __Pyx_PyLong_From_int64_t((__pyx_v_nr_aliases + 1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __Pyx_GIVEREF((PyObject *)__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_alias_index);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_alias_index);
  __pyx_v_self->_alias_index = ((struct __pyx_obj_7preshed_4maps_PreshMap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":53
 *     def _initialize_aliases(self, int64_t nr_aliases):
 *         self._alias_index = PreshMap(nr_aliases + 1)
 *         self._aliases_table = alias_vec(nr_aliases + 1)             # <<<<<<<<<<<<<<
 * 
 *     def is_empty(self):
*/
  try {
    __pyx_t_6 = __pyx_t_5spacy_2kb_12kb_in_memory_alias_vec((__pyx_v_nr_aliases + 1));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 53, __pyx_L1_error)
  }
  __pyx_v_self->_aliases_table = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

  /* "spacy/kb/kb_in_memory.pyx":51
 *         self._vectors_table = float_matrix(nr_entities + 1)
 * 
 *     def _initialize_aliases(self, int64_t nr_aliases):             # <<<<<<<<<<<<<<
 *         self._alias_index = PreshMap(nr_aliases + 1)
 *         self._aliases_table = alias_vec(nr_aliases + 1)
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB._initialize_aliases", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":55
 *         self._aliases_table = alias_vec(nr_aliases + 1)
 * 
 *     def is_empty(self):             # <<<<<<<<<<<<<<
 *         return len(self) == 0
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_9is_empty(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8is_empty, "InMemoryLookupKB.is_empty(self)");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_9is_empty = {"is_empty", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_9is_empty, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8is_empty};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_9is_empty(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_empty (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("is_empty", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("is_empty", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8is_empty(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8is_empty(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_empty", 0);

  /* "spacy/kb/kb_in_memory.pyx":56
 * 
 *     def is_empty(self):
 *         return len(self) == 0             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 56, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_t_1 == 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pyx":55
 *         self._aliases_table = alias_vec(nr_aliases + 1)
 * 
 *     def is_empty(self):             # <<<<<<<<<<<<<<
 *         return len(self) == 0
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.is_empty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":58
 *         return len(self) == 0
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.get_size_entities()
 * 
*/

/* Python wrapper */
static Py_ssize_t __pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_11__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_11__len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_10__len__(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_10__len__(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "spacy/kb/kb_in_memory.pyx":59
 * 
 *     def __len__(self):
 *         return self.get_size_entities()             # <<<<<<<<<<<<<<
 * 
 *     def get_size_entities(self):
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_size_entities, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pyx":58
 *         return len(self) == 0
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.get_size_entities()
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":61
 *         return self.get_size_entities()
 * 
 *     def get_size_entities(self):             # <<<<<<<<<<<<<<
 *         return len(self._entry_index)
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_13get_size_entities(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_12get_size_entities, "InMemoryLookupKB.get_size_entities(self)");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_13get_size_entities = {"get_size_entities", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_13get_size_entities, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_12get_size_entities};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_13get_size_entities(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_size_entities (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("get_size_entities", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("get_size_entities", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_12get_size_entities(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_12get_size_entities(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_size_entities", 0);

  /* "spacy/kb/kb_in_memory.pyx":62
 * 
 *     def get_size_entities(self):
 *         return len(self._entry_index)             # <<<<<<<<<<<<<<
 * 
 *     def get_entity_strings(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_v_self->_entry_index);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyLong_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pyx":61
 *         return self.get_size_entities()
 * 
 *     def get_size_entities(self):             # <<<<<<<<<<<<<<
 *         return len(self._entry_index)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.get_size_entities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":64
 *         return len(self._entry_index)
 * 
 *     def get_entity_strings(self):             # <<<<<<<<<<<<<<
 *         return [self.vocab.strings[x] for x in self._entry_index]
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_15get_entity_strings(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_14get_entity_strings, "InMemoryLookupKB.get_entity_strings(self)");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_15get_entity_strings = {"get_entity_strings", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_15get_entity_strings, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_14get_entity_strings};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_15get_entity_strings(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_entity_strings (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("get_entity_strings", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("get_entity_strings", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_14get_entity_strings(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_14get_entity_strings(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_entity_strings", 0);

  /* "spacy/kb/kb_in_memory.pyx":65
 * 
 *     def get_entity_strings(self):
 *         return [self.vocab.strings[x] for x in self._entry_index]             # <<<<<<<<<<<<<<
 * 
 *     def get_size_aliases(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self->_entry_index))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self->_entry_index))) {
    __pyx_t_2 = ((PyObject *)__pyx_v_self->_entry_index); __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(((PyObject *)__pyx_v_self->_entry_index)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 65, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 65, __pyx_L1_error)
          #endif
          if (__pyx_t_3 >= __pyx_temp) break;
        }
        __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_3);
        ++__pyx_t_3;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 65, __pyx_L1_error)
          #endif
          if (__pyx_t_3 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3));
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_3);
        #endif
        ++__pyx_t_3;
      }
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 65, __pyx_L1_error)
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 65, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->__pyx_base.vocab->strings), __pyx_v_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 65, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pyx":64
 *         return len(self._entry_index)
 * 
 *     def get_entity_strings(self):             # <<<<<<<<<<<<<<
 *         return [self.vocab.strings[x] for x in self._entry_index]
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.get_entity_strings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":67
 *         return [self.vocab.strings[x] for x in self._entry_index]
 * 
 *     def get_size_aliases(self):             # <<<<<<<<<<<<<<
 *         return len(self._alias_index)
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_17get_size_aliases(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_16get_size_aliases, "InMemoryLookupKB.get_size_aliases(self)");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_17get_size_aliases = {"get_size_aliases", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_17get_size_aliases, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_16get_size_aliases};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_17get_size_aliases(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_size_aliases (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("get_size_aliases", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("get_size_aliases", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_16get_size_aliases(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_16get_size_aliases(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_size_aliases", 0);

  /* "spacy/kb/kb_in_memory.pyx":68
 * 
 *     def get_size_aliases(self):
 *         return len(self._alias_index)             # <<<<<<<<<<<<<<
 * 
 *     def get_alias_strings(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_v_self->_alias_index);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyLong_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pyx":67
 *         return [self.vocab.strings[x] for x in self._entry_index]
 * 
 *     def get_size_aliases(self):             # <<<<<<<<<<<<<<
 *         return len(self._alias_index)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.get_size_aliases", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":70
 *         return len(self._alias_index)
 * 
 *     def get_alias_strings(self):             # <<<<<<<<<<<<<<
 *         return [self.vocab.strings[x] for x in self._alias_index]
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_19get_alias_strings(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_18get_alias_strings, "InMemoryLookupKB.get_alias_strings(self)");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_19get_alias_strings = {"get_alias_strings", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_19get_alias_strings, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_18get_alias_strings};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_19get_alias_strings(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_alias_strings (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("get_alias_strings", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("get_alias_strings", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_18get_alias_strings(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_18get_alias_strings(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_alias_strings", 0);

  /* "spacy/kb/kb_in_memory.pyx":71
 * 
 *     def get_alias_strings(self):
 *         return [self.vocab.strings[x] for x in self._alias_index]             # <<<<<<<<<<<<<<
 * 
 *     def add_entity(self, str entity, float freq, vector[float] entity_vector):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self->_alias_index))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self->_alias_index))) {
    __pyx_t_2 = ((PyObject *)__pyx_v_self->_alias_index); __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(((PyObject *)__pyx_v_self->_alias_index)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 71, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 71, __pyx_L1_error)
          #endif
          if (__pyx_t_3 >= __pyx_temp) break;
        }
        __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_3);
        ++__pyx_t_3;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 71, __pyx_L1_error)
          #endif
          if (__pyx_t_3 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3));
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_3);
        #endif
        ++__pyx_t_3;
      }
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 71, __pyx_L1_error)
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 71, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->__pyx_base.vocab->strings), __pyx_v_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pyx":70
 *         return len(self._alias_index)
 * 
 *     def get_alias_strings(self):             # <<<<<<<<<<<<<<
 *         return [self.vocab.strings[x] for x in self._alias_index]
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.get_alias_strings", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":73
 *         return [self.vocab.strings[x] for x in self._alias_index]
 * 
 *     def add_entity(self, str entity, float freq, vector[float] entity_vector):             # <<<<<<<<<<<<<<
 *         """
 *         Add an entity to the KB, optionally specifying its log probability
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_21add_entity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_20add_entity, "InMemoryLookupKB.add_entity(self, str entity, float freq, vector[float] entity_vector)\nAdd an entity to the KB, optionally specifying its log probability\nbased on corpus frequency.\nReturn the hash of the entity ID/name at the end.");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_21add_entity = {"add_entity", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_21add_entity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_20add_entity};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_21add_entity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_entity = 0;
  float __pyx_v_freq;
  std::vector<float>  __pyx_v_entity_vector;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_entity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_entity,&__pyx_mstate_global->__pyx_n_u_freq,&__pyx_mstate_global->__pyx_n_u_entity_vector,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 73, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 73, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 73, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 73, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "add_entity", 0) < 0) __PYX_ERR(0, 73, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("add_entity", 1, 3, 3, i); __PYX_ERR(0, 73, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 73, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 73, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 73, __pyx_L3_error)
    }
    __pyx_v_entity = ((PyObject*)values[0]);
    __pyx_v_freq = __Pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_freq == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L3_error)
    __pyx_v_entity_vector = __pyx_convert_vector_from_py_float(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_entity", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 73, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.add_entity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_entity), (&PyUnicode_Type), 1, "entity", 1))) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_20add_entity(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self), __pyx_v_entity, __pyx_v_freq, __PYX_STD_MOVE_IF_SUPPORTED(__pyx_v_entity_vector));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_20add_entity(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_entity, float __pyx_v_freq, std::vector<float>  __pyx_v_entity_vector) {
  __pyx_t_5spacy_8typedefs_hash_t __pyx_v_entity_hash;
  int64_t __pyx_v_vector_index;
  int64_t __pyx_v_new_index;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int64_t __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_entity", 0);

  /* "spacy/kb/kb_in_memory.pyx":79
 *         Return the hash of the entity ID/name at the end.
 *         """
 *         cdef hash_t entity_hash = self.vocab.strings.add(entity)             # <<<<<<<<<<<<<<
 * 
 *         # Return if this entity was added before
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->__pyx_base.vocab->strings);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_entity};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_add, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PyLong_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_entity_hash = __pyx_t_4;

  /* "spacy/kb/kb_in_memory.pyx":82
 * 
 *         # Return if this entity was added before
 *         if entity_hash in self._entry_index:             # <<<<<<<<<<<<<<
 *             warnings.warn(Warnings.W018.format(entity=entity))
 *             return
*/
  __pyx_t_1 = __Pyx_PyLong_From_uint64_t(__pyx_v_entity_hash); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, ((PyObject *)__pyx_v_self->_entry_index), Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "spacy/kb/kb_in_memory.pyx":83
 *         # Return if this entity was added before
 *         if entity_hash in self._entry_index:
 *             warnings.warn(Warnings.W018.format(entity=entity))             # <<<<<<<<<<<<<<
 *             return
 * 
*/
    __pyx_t_2 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_warnings); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_warn); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_Warnings); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_W018); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_8 = __pyx_t_10;
    __Pyx_INCREF(__pyx_t_8);
    __pyx_t_3 = 0;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_8, NULL};
      __pyx_t_9 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 83, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_entity, __pyx_v_entity, __pyx_t_9, __pyx_callargs+1, 0) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
      __pyx_t_6 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_format, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_9);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 83, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
    }
    __pyx_t_3 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
      assert(__pyx_t_2);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_7, __pyx__function);
      __pyx_t_3 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/kb/kb_in_memory.pyx":84
 *         if entity_hash in self._entry_index:
 *             warnings.warn(Warnings.W018.format(entity=entity))
 *             return             # <<<<<<<<<<<<<<
 * 
 *         # Raise an error if the provided entity vector is not of the correct length
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "spacy/kb/kb_in_memory.pyx":82
 * 
 *         # Return if this entity was added before
 *         if entity_hash in self._entry_index:             # <<<<<<<<<<<<<<
 *             warnings.warn(Warnings.W018.format(entity=entity))
 *             return
*/
  }

  /* "spacy/kb/kb_in_memory.pyx":87
 * 
 *         # Raise an error if the provided entity vector is not of the correct length
 *         if len(entity_vector) != self.entity_vector_length:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 Errors.E141.format(
*/
  __pyx_t_1 = __pyx_convert_vector_to_py_float(__pyx_v_entity_vector); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = (__pyx_t_11 != __pyx_v_self->__pyx_base.entity_vector_length);
  if (unlikely(__pyx_t_5)) {

    /* "spacy/kb/kb_in_memory.pyx":88
 *         # Raise an error if the provided entity vector is not of the correct length
 *         if len(entity_vector) != self.entity_vector_length:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 Errors.E141.format(
 *                     found=len(entity_vector), required=self.entity_vector_length
*/
    __pyx_t_7 = NULL;
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_t_6 = __pyx_builtin_ValueError; 

    /* "spacy/kb/kb_in_memory.pyx":89
 *         if len(entity_vector) != self.entity_vector_length:
 *             raise ValueError(
 *                 Errors.E141.format(             # <<<<<<<<<<<<<<
 *                     found=len(entity_vector), required=self.entity_vector_length
 *                 )
*/
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_Errors); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_E141); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = __pyx_t_8;
    __Pyx_INCREF(__pyx_t_10);

    /* "spacy/kb/kb_in_memory.pyx":90
 *             raise ValueError(
 *                 Errors.E141.format(
 *                     found=len(entity_vector), required=self.entity_vector_length             # <<<<<<<<<<<<<<
 *                 )
 *             )
*/
    __pyx_t_9 = __pyx_convert_vector_to_py_float(__pyx_v_entity_vector); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = PyObject_Length(__pyx_t_9); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyLong_FromSsize_t(__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_12 = __Pyx_PyLong_From_int64_t(__pyx_v_self->__pyx_base.entity_vector_length); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_3 = 0;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 2 : 0)] = {__pyx_t_10, NULL};
      __pyx_t_13 = __Pyx_MakeVectorcallBuilderKwds(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 89, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_found, __pyx_t_9, __pyx_t_13, __pyx_callargs+1, 0) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_required, __pyx_t_12, __pyx_t_13, __pyx_callargs+1, 1) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
      __pyx_t_2 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_format, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_13);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_3 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 88, __pyx_L1_error)

    /* "spacy/kb/kb_in_memory.pyx":87
 * 
 *         # Raise an error if the provided entity vector is not of the correct length
 *         if len(entity_vector) != self.entity_vector_length:             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 Errors.E141.format(
*/
  }

  /* "spacy/kb/kb_in_memory.pyx":94
 *             )
 * 
 *         vector_index = self.c_add_vector(entity_vector=entity_vector)             # <<<<<<<<<<<<<<
 * 
 *         new_index = self.c_add_entity(
*/
  __pyx_t_14 = __pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_c_add_vector(__pyx_v_self, __pyx_v_entity_vector); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 94, __pyx_L1_error)
  __pyx_v_vector_index = __pyx_t_14;

  /* "spacy/kb/kb_in_memory.pyx":96
 *         vector_index = self.c_add_vector(entity_vector=entity_vector)
 * 
 *         new_index = self.c_add_entity(             # <<<<<<<<<<<<<<
 *             entity_hash=entity_hash,
 *             freq=freq,
*/
  __pyx_t_14 = __pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_c_add_entity(__pyx_v_self, __pyx_v_entity_hash, __pyx_v_freq, __pyx_v_vector_index, -1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 96, __pyx_L1_error)
  __pyx_v_new_index = __pyx_t_14;

  /* "spacy/kb/kb_in_memory.pyx":102
 *             feats_row=-1
 *         )  # Features table currently not implemented
 *         self._entry_index[entity_hash] = new_index             # <<<<<<<<<<<<<<
 * 
 *         return entity_hash
*/
  __pyx_t_1 = __Pyx_PyLong_From_int64_t(__pyx_v_new_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((__Pyx_SetItemInt(((PyObject *)__pyx_v_self->_entry_index), __pyx_v_entity_hash, __pyx_t_1, __pyx_t_5spacy_8typedefs_hash_t, 0, __Pyx_PyLong_From_uint64_t, 0, 0, 1) < 0))) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":104
 *         self._entry_index[entity_hash] = new_index
 * 
 *         return entity_hash             # <<<<<<<<<<<<<<
 * 
 *     cpdef set_entities(self, entity_list, freq_list, vector_list):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_uint64_t(__pyx_v_entity_hash); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pyx":73
 *         return [self.vocab.strings[x] for x in self._alias_index]
 * 
 *     def add_entity(self, str entity, float freq, vector[float] entity_vector):             # <<<<<<<<<<<<<<
 *         """
 *         Add an entity to the KB, optionally specifying its log probability
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.add_entity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":106
 *         return entity_hash
 * 
 *     cpdef set_entities(self, entity_list, freq_list, vector_list):             # <<<<<<<<<<<<<<
 *         if len(entity_list) != len(freq_list) or len(entity_list) != len(vector_list):
 *             raise ValueError(Errors.E140)
*/

static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_23set_entities(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_set_entities(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_entity_list, PyObject *__pyx_v_freq_list, PyObject *__pyx_v_vector_list, int __pyx_skip_dispatch) {
  Py_ssize_t __pyx_v_nr_entities;
  long __pyx_v_i;
  struct __pyx_t_5spacy_7structs_KBEntryC __pyx_v_entry;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_v_entity_hash;
  PyObject *__pyx_v_entity_vector = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  float __pyx_t_16;
  __pyx_t_5spacy_2kb_12kb_in_memory_float_vec __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_entities", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_5spacy_2kb_12kb_in_memory_InMemoryLookupKB &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_set_entities); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_23set_entities)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[4] = {__pyx_t_3, __pyx_v_entity_list, __pyx_v_freq_list, __pyx_v_vector_list};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (4-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "spacy/kb/kb_in_memory.pyx":107
 * 
 *     cpdef set_entities(self, entity_list, freq_list, vector_list):
 *         if len(entity_list) != len(freq_list) or len(entity_list) != len(vector_list):             # <<<<<<<<<<<<<<
 *             raise ValueError(Errors.E140)
 * 
*/
  __pyx_t_7 = PyObject_Length(__pyx_v_entity_list); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 107, __pyx_L1_error)
  __pyx_t_8 = PyObject_Length(__pyx_v_freq_list); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 107, __pyx_L1_error)
  __pyx_t_9 = (__pyx_t_7 != __pyx_t_8);
  if (!__pyx_t_9) {
  } else {
    __pyx_t_6 = __pyx_t_9;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_8 = PyObject_Length(__pyx_v_entity_list); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 107, __pyx_L1_error)
  __pyx_t_7 = PyObject_Length(__pyx_v_vector_list); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 107, __pyx_L1_error)
  __pyx_t_9 = (__pyx_t_8 != __pyx_t_7);
  __pyx_t_6 = __pyx_t_9;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_6)) {

    /* "spacy/kb/kb_in_memory.pyx":108
 *     cpdef set_entities(self, entity_list, freq_list, vector_list):
 *         if len(entity_list) != len(freq_list) or len(entity_list) != len(vector_list):
 *             raise ValueError(Errors.E140)             # <<<<<<<<<<<<<<
 * 
 *         nr_entities = len(set(entity_list))
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_t_4 = __pyx_builtin_ValueError; 
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_Errors); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_E140); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_10};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 108, __pyx_L1_error)

    /* "spacy/kb/kb_in_memory.pyx":107
 * 
 *     cpdef set_entities(self, entity_list, freq_list, vector_list):
 *         if len(entity_list) != len(freq_list) or len(entity_list) != len(vector_list):             # <<<<<<<<<<<<<<
 *             raise ValueError(Errors.E140)
 * 
*/
  }

  /* "spacy/kb/kb_in_memory.pyx":110
 *             raise ValueError(Errors.E140)
 * 
 *         nr_entities = len(set(entity_list))             # <<<<<<<<<<<<<<
 *         self._initialize_entities(nr_entities)
 *         self._initialize_vectors(nr_entities)
*/
  __pyx_t_1 = PySet_New(__pyx_v_entity_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PySet_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nr_entities = __pyx_t_7;

  /* "spacy/kb/kb_in_memory.pyx":111
 * 
 *         nr_entities = len(set(entity_list))
 *         self._initialize_entities(nr_entities)             # <<<<<<<<<<<<<<
 *         self._initialize_vectors(nr_entities)
 * 
*/
  __pyx_t_4 = ((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_10 = PyLong_FromSsize_t(__pyx_v_nr_entities); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_10};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_initialize_entities, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":112
 *         nr_entities = len(set(entity_list))
 *         self._initialize_entities(nr_entities)
 *         self._initialize_vectors(nr_entities)             # <<<<<<<<<<<<<<
 * 
 *         i = 0
*/
  __pyx_t_10 = ((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_t_10);
  __pyx_t_4 = PyLong_FromSsize_t(__pyx_v_nr_entities); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_initialize_vectors, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":114
 *         self._initialize_vectors(nr_entities)
 * 
 *         i = 0             # <<<<<<<<<<<<<<
 *         cdef KBEntryC entry
 *         cdef hash_t entity_hash
*/
  __pyx_v_i = 0;

  /* "spacy/kb/kb_in_memory.pyx":117
 *         cdef KBEntryC entry
 *         cdef hash_t entity_hash
 *         while i < len(entity_list):             # <<<<<<<<<<<<<<
 *             # only process this entity if its unique ID hadn't been added before
 *             entity_hash = self.vocab.strings.add(entity_list[i])
*/
  while (1) {
    __pyx_t_7 = PyObject_Length(__pyx_v_entity_list); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 117, __pyx_L1_error)
    __pyx_t_6 = (__pyx_v_i < __pyx_t_7);
    if (!__pyx_t_6) break;

    /* "spacy/kb/kb_in_memory.pyx":119
 *         while i < len(entity_list):
 *             # only process this entity if its unique ID hadn't been added before
 *             entity_hash = self.vocab.strings.add(entity_list[i])             # <<<<<<<<<<<<<<
 *             if entity_hash in self._entry_index:
 *                 warnings.warn(Warnings.W018.format(entity=entity_list[i]))
*/
    __pyx_t_4 = ((PyObject *)__pyx_v_self->__pyx_base.vocab->strings);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_entity_list, __pyx_v_i, long, 1, __Pyx_PyLong_From_long, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_5 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_10};
      __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_add, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __pyx_t_11 = __Pyx_PyLong_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_11 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_entity_hash = __pyx_t_11;

    /* "spacy/kb/kb_in_memory.pyx":120
 *             # only process this entity if its unique ID hadn't been added before
 *             entity_hash = self.vocab.strings.add(entity_list[i])
 *             if entity_hash in self._entry_index:             # <<<<<<<<<<<<<<
 *                 warnings.warn(Warnings.W018.format(entity=entity_list[i]))
 * 
*/
    __pyx_t_1 = __Pyx_PyLong_From_uint64_t(__pyx_v_entity_hash); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, ((PyObject *)__pyx_v_self->_entry_index), Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "spacy/kb/kb_in_memory.pyx":121
 *             entity_hash = self.vocab.strings.add(entity_list[i])
 *             if entity_hash in self._entry_index:
 *                 warnings.warn(Warnings.W018.format(entity=entity_list[i]))             # <<<<<<<<<<<<<<
 * 
 *             else:
*/
      __pyx_t_10 = NULL;
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_warnings); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_warn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_mstate_global->__pyx_n_u_Warnings); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_mstate_global->__pyx_n_u_W018); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_3 = __pyx_t_13;
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_entity_list, __pyx_v_i, long, 1, __Pyx_PyLong_From_long, 0, 1, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_5 = 0;
      {
        PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_3, NULL};
        __pyx_t_14 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 121, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_entity, __pyx_t_12, __pyx_t_14, __pyx_callargs+1, 0) < 0) __PYX_ERR(0, 121, __pyx_L1_error)
        __pyx_t_4 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_format, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_14);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 121, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
      }
      __pyx_t_5 = 1;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
        assert(__pyx_t_10);
        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(__pyx__function);
        __Pyx_DECREF_SET(__pyx_t_2, __pyx__function);
        __pyx_t_5 = 0;
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_4};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "spacy/kb/kb_in_memory.pyx":120
 *             # only process this entity if its unique ID hadn't been added before
 *             entity_hash = self.vocab.strings.add(entity_list[i])
 *             if entity_hash in self._entry_index:             # <<<<<<<<<<<<<<
 *                 warnings.warn(Warnings.W018.format(entity=entity_list[i]))
 * 
*/
      goto __pyx_L8;
    }

    /* "spacy/kb/kb_in_memory.pyx":124
 * 
 *             else:
 *                 entity_vector = vector_list[i]             # <<<<<<<<<<<<<<
 *                 if len(entity_vector) != self.entity_vector_length:
 *                     raise ValueError(
*/
    /*else*/ {
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_vector_list, __pyx_v_i, long, 1, __Pyx_PyLong_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_entity_vector, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "spacy/kb/kb_in_memory.pyx":125
 *             else:
 *                 entity_vector = vector_list[i]
 *                 if len(entity_vector) != self.entity_vector_length:             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         Errors.E141.format(
*/
      __pyx_t_7 = PyObject_Length(__pyx_v_entity_vector); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 125, __pyx_L1_error)
      __pyx_t_6 = (__pyx_t_7 != __pyx_v_self->__pyx_base.entity_vector_length);
      if (unlikely(__pyx_t_6)) {

        /* "spacy/kb/kb_in_memory.pyx":126
 *                 entity_vector = vector_list[i]
 *                 if len(entity_vector) != self.entity_vector_length:
 *                     raise ValueError(             # <<<<<<<<<<<<<<
 *                         Errors.E141.format(
 *                             found=len(entity_vector),
*/
        __pyx_t_2 = NULL;
        __Pyx_INCREF(__pyx_builtin_ValueError);
        __pyx_t_4 = __pyx_builtin_ValueError; 

        /* "spacy/kb/kb_in_memory.pyx":127
 *                 if len(entity_vector) != self.entity_vector_length:
 *                     raise ValueError(
 *                         Errors.E141.format(             # <<<<<<<<<<<<<<
 *                             found=len(entity_vector),
 *                             required=self.entity_vector_length
*/
        __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_mstate_global->__pyx_n_u_Errors); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 127, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_mstate_global->__pyx_n_u_E141); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 127, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_13 = __pyx_t_12;
        __Pyx_INCREF(__pyx_t_13);

        /* "spacy/kb/kb_in_memory.pyx":128
 *                     raise ValueError(
 *                         Errors.E141.format(
 *                             found=len(entity_vector),             # <<<<<<<<<<<<<<
 *                             required=self.entity_vector_length
 *                         )
*/
        __pyx_t_7 = PyObject_Length(__pyx_v_entity_vector); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 128, __pyx_L1_error)
        __pyx_t_14 = PyLong_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 128, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);

        /* "spacy/kb/kb_in_memory.pyx":129
 *                         Errors.E141.format(
 *                             found=len(entity_vector),
 *                             required=self.entity_vector_length             # <<<<<<<<<<<<<<
 *                         )
 *                     )
*/
        __pyx_t_3 = __Pyx_PyLong_From_int64_t(__pyx_v_self->__pyx_base.entity_vector_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = 0;
        {
          PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 2 : 0)] = {__pyx_t_13, NULL};
          __pyx_t_15 = __Pyx_MakeVectorcallBuilderKwds(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 127, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_found, __pyx_t_14, __pyx_t_15, __pyx_callargs+1, 0) < 0) __PYX_ERR(0, 127, __pyx_L1_error)
          if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_required, __pyx_t_3, __pyx_t_15, __pyx_callargs+1, 1) < 0) __PYX_ERR(0, 127, __pyx_L1_error)
          __pyx_t_10 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_format, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_15);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 127, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
        }
        __pyx_t_5 = 1;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_10};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __PYX_ERR(0, 126, __pyx_L1_error)

        /* "spacy/kb/kb_in_memory.pyx":125
 *             else:
 *                 entity_vector = vector_list[i]
 *                 if len(entity_vector) != self.entity_vector_length:             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         Errors.E141.format(
*/
      }

      /* "spacy/kb/kb_in_memory.pyx":133
 *                     )
 * 
 *                 entry.entity_hash = entity_hash             # <<<<<<<<<<<<<<
 *                 entry.freq = freq_list[i]
 * 
*/
      __pyx_v_entry.entity_hash = __pyx_v_entity_hash;

      /* "spacy/kb/kb_in_memory.pyx":134
 * 
 *                 entry.entity_hash = entity_hash
 *                 entry.freq = freq_list[i]             # <<<<<<<<<<<<<<
 * 
 *                 self._vectors_table[i] = entity_vector
*/
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_freq_list, __pyx_v_i, long, 1, __Pyx_PyLong_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_16 = __Pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_16 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 134, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_entry.freq = __pyx_t_16;

      /* "spacy/kb/kb_in_memory.pyx":136
 *                 entry.freq = freq_list[i]
 * 
 *                 self._vectors_table[i] = entity_vector             # <<<<<<<<<<<<<<
 *                 entry.vector_index = i
 * 
*/
      __pyx_t_17 = __pyx_convert_vector_from_py_float(__pyx_v_entity_vector); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 136, __pyx_L1_error)
      (__pyx_v_self->_vectors_table[__pyx_v_i]) = __pyx_t_17;

      /* "spacy/kb/kb_in_memory.pyx":137
 * 
 *                 self._vectors_table[i] = entity_vector
 *                 entry.vector_index = i             # <<<<<<<<<<<<<<
 * 
 *                 entry.feats_row = -1   # Features table currently not implemented
*/
      __pyx_v_entry.vector_index = __pyx_v_i;

      /* "spacy/kb/kb_in_memory.pyx":139
 *                 entry.vector_index = i
 * 
 *                 entry.feats_row = -1   # Features table currently not implemented             # <<<<<<<<<<<<<<
 * 
 *                 self._entries[i+1] = entry
*/
      __pyx_v_entry.feats_row = -1;

      /* "spacy/kb/kb_in_memory.pyx":141
 *                 entry.feats_row = -1   # Features table currently not implemented
 * 
 *                 self._entries[i+1] = entry             # <<<<<<<<<<<<<<
 *                 self._entry_index[entity_hash] = i+1
 * 
*/
      (__pyx_v_self->_entries[(__pyx_v_i + 1)]) = __pyx_v_entry;

      /* "spacy/kb/kb_in_memory.pyx":142
 * 
 *                 self._entries[i+1] = entry
 *                 self._entry_index[entity_hash] = i+1             # <<<<<<<<<<<<<<
 * 
 *             i += 1
*/
      __pyx_t_1 = __Pyx_PyLong_From_long((__pyx_v_i + 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely((__Pyx_SetItemInt(((PyObject *)__pyx_v_self->_entry_index), __pyx_v_entity_hash, __pyx_t_1, __pyx_t_5spacy_8typedefs_hash_t, 0, __Pyx_PyLong_From_uint64_t, 0, 0, 1) < 0))) __PYX_ERR(0, 142, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L8:;

    /* "spacy/kb/kb_in_memory.pyx":144
 *                 self._entry_index[entity_hash] = i+1
 * 
 *             i += 1             # <<<<<<<<<<<<<<
 * 
 *     def contains_entity(self, str entity):
*/
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "spacy/kb/kb_in_memory.pyx":106
 *         return entity_hash
 * 
 *     cpdef set_entities(self, entity_list, freq_list, vector_list):             # <<<<<<<<<<<<<<
 *         if len(entity_list) != len(freq_list) or len(entity_list) != len(vector_list):
 *             raise ValueError(Errors.E140)
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.set_entities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_entity_vector);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_23set_entities(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_22set_entities, "InMemoryLookupKB.set_entities(self, entity_list, freq_list, vector_list)");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_23set_entities = {"set_entities", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_23set_entities, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_22set_entities};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_23set_entities(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_entity_list = 0;
  PyObject *__pyx_v_freq_list = 0;
  PyObject *__pyx_v_vector_list = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_entities (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_entity_list,&__pyx_mstate_global->__pyx_n_u_freq_list,&__pyx_mstate_global->__pyx_n_u_vector_list,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 106, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 106, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 106, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 106, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "set_entities", 0) < 0) __PYX_ERR(0, 106, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("set_entities", 1, 3, 3, i); __PYX_ERR(0, 106, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 106, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 106, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 106, __pyx_L3_error)
    }
    __pyx_v_entity_list = values[0];
    __pyx_v_freq_list = values[1];
    __pyx_v_vector_list = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_entities", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 106, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.set_entities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_22set_entities(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self), __pyx_v_entity_list, __pyx_v_freq_list, __pyx_v_vector_list);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_22set_entities(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_entity_list, PyObject *__pyx_v_freq_list, PyObject *__pyx_v_vector_list) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_entities", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_set_entities(__pyx_v_self, __pyx_v_entity_list, __pyx_v_freq_list, __pyx_v_vector_list, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.set_entities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":146
 *             i += 1
 * 
 *     def contains_entity(self, str entity):             # <<<<<<<<<<<<<<
 *         cdef hash_t entity_hash = self.vocab.strings.add(entity)
 *         return entity_hash in self._entry_index
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_25contains_entity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_24contains_entity, "InMemoryLookupKB.contains_entity(self, str entity)");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_25contains_entity = {"contains_entity", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_25contains_entity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_24contains_entity};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_25contains_entity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_entity = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("contains_entity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_entity,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 146, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 146, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "contains_entity", 0) < 0) __PYX_ERR(0, 146, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("contains_entity", 1, 1, 1, i); __PYX_ERR(0, 146, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 146, __pyx_L3_error)
    }
    __pyx_v_entity = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("contains_entity", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 146, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.contains_entity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_entity), (&PyUnicode_Type), 1, "entity", 1))) __PYX_ERR(0, 146, __pyx_L1_error)
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_24contains_entity(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self), __pyx_v_entity);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_24contains_entity(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_entity) {
  __pyx_t_5spacy_8typedefs_hash_t __pyx_v_entity_hash;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("contains_entity", 0);

  /* "spacy/kb/kb_in_memory.pyx":147
 * 
 *     def contains_entity(self, str entity):
 *         cdef hash_t entity_hash = self.vocab.strings.add(entity)             # <<<<<<<<<<<<<<
 *         return entity_hash in self._entry_index
 * 
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->__pyx_base.vocab->strings);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_entity};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_add, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PyLong_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_entity_hash = __pyx_t_4;

  /* "spacy/kb/kb_in_memory.pyx":148
 *     def contains_entity(self, str entity):
 *         cdef hash_t entity_hash = self.vocab.strings.add(entity)
 *         return entity_hash in self._entry_index             # <<<<<<<<<<<<<<
 * 
 *     def contains_alias(self, str alias):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_uint64_t(__pyx_v_entity_hash); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, ((PyObject *)__pyx_v_self->_entry_index), Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pyx":146
 *             i += 1
 * 
 *     def contains_entity(self, str entity):             # <<<<<<<<<<<<<<
 *         cdef hash_t entity_hash = self.vocab.strings.add(entity)
 *         return entity_hash in self._entry_index
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.contains_entity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":150
 *         return entity_hash in self._entry_index
 * 
 *     def contains_alias(self, str alias):             # <<<<<<<<<<<<<<
 *         cdef hash_t alias_hash = self.vocab.strings.add(alias)
 *         return alias_hash in self._alias_index
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_27contains_alias(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_26contains_alias, "InMemoryLookupKB.contains_alias(self, str alias)");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_27contains_alias = {"contains_alias", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_27contains_alias, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_26contains_alias};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_27contains_alias(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_alias = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("contains_alias (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_alias,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 150, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 150, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "contains_alias", 0) < 0) __PYX_ERR(0, 150, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("contains_alias", 1, 1, 1, i); __PYX_ERR(0, 150, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 150, __pyx_L3_error)
    }
    __pyx_v_alias = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("contains_alias", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 150, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.contains_alias", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_alias), (&PyUnicode_Type), 1, "alias", 1))) __PYX_ERR(0, 150, __pyx_L1_error)
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_26contains_alias(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self), __pyx_v_alias);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_26contains_alias(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_alias) {
  __pyx_t_5spacy_8typedefs_hash_t __pyx_v_alias_hash;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("contains_alias", 0);

  /* "spacy/kb/kb_in_memory.pyx":151
 * 
 *     def contains_alias(self, str alias):
 *         cdef hash_t alias_hash = self.vocab.strings.add(alias)             # <<<<<<<<<<<<<<
 *         return alias_hash in self._alias_index
 * 
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self->__pyx_base.vocab->strings);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_alias};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_add, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PyLong_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_alias_hash = __pyx_t_4;

  /* "spacy/kb/kb_in_memory.pyx":152
 *     def contains_alias(self, str alias):
 *         cdef hash_t alias_hash = self.vocab.strings.add(alias)
 *         return alias_hash in self._alias_index             # <<<<<<<<<<<<<<
 * 
 *     def add_alias(self, str alias, entities, probabilities):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_uint64_t(__pyx_v_alias_hash); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, ((PyObject *)__pyx_v_self->_alias_index), Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pyx":150
 *         return entity_hash in self._entry_index
 * 
 *     def contains_alias(self, str alias):             # <<<<<<<<<<<<<<
 *         cdef hash_t alias_hash = self.vocab.strings.add(alias)
 *         return alias_hash in self._alias_index
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.contains_alias", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":154
 *         return alias_hash in self._alias_index
 * 
 *     def add_alias(self, str alias, entities, probabilities):             # <<<<<<<<<<<<<<
 *         """
 *         For a given alias, add its potential entities and prior probabilies to the KB.
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_29add_alias(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_28add_alias, "InMemoryLookupKB.add_alias(self, str alias, entities, probabilities)\nFor a given alias, add its potential entities and prior probabilies to the KB.\nReturn the alias_hash at the end");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_29add_alias = {"add_alias", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_29add_alias, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_28add_alias};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_29add_alias(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_alias = 0;
  PyObject *__pyx_v_entities = 0;
  PyObject *__pyx_v_probabilities = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_alias (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_alias,&__pyx_mstate_global->__pyx_n_u_entities,&__pyx_mstate_global->__pyx_n_u_probabilities,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 154, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 154, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 154, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 154, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "add_alias", 0) < 0) __PYX_ERR(0, 154, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("add_alias", 1, 3, 3, i); __PYX_ERR(0, 154, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 154, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 154, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 154, __pyx_L3_error)
    }
    __pyx_v_alias = ((PyObject*)values[0]);
    __pyx_v_entities = values[1];
    __pyx_v_probabilities = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_alias", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 154, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.add_alias", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_alias), (&PyUnicode_Type), 1, "alias", 1))) __PYX_ERR(0, 154, __pyx_L1_error)
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_28add_alias(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self), __pyx_v_alias, __pyx_v_entities, __pyx_v_probabilities);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_28add_alias(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_alias, PyObject *__pyx_v_entities, PyObject *__pyx_v_probabilities) {
  PyObject *__pyx_v_previous_alias_nr = NULL;
  PyObject *__pyx_v_prob_sum = NULL;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_v_alias_hash;
  std::vector<int64_t>  __pyx_v_entry_indices;
  std::vector<float>  __pyx_v_probs;
  PyObject *__pyx_v_entity = NULL;
  PyObject *__pyx_v_prob = NULL;
  PyObject *__pyx_v_entity_hash = NULL;
  int64_t __pyx_v_entry_index;
  int64_t __pyx_v_new_index;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  PyObject *(*__pyx_t_17)(PyObject *);
  __pyx_t_7preshed_4maps_key_t __pyx_t_18;
  void *__pyx_t_19;
  double __pyx_t_20;
  int64_t __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_alias", 0);

  /* "spacy/kb/kb_in_memory.pyx":159
 *         Return the alias_hash at the end
 *         """
 *         if alias is None or len(alias) == 0:             # <<<<<<<<<<<<<<
 *             raise ValueError(Errors.E890.format(alias=alias))
 * 
*/
  __pyx_t_2 = (__pyx_v_alias == ((PyObject*)Py_None));
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  if (unlikely(__pyx_v_alias == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 159, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyUnicode_GET_LENGTH(__pyx_v_alias); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 159, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_3 == 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "spacy/kb/kb_in_memory.pyx":160
 *         """
 *         if alias is None or len(alias) == 0:
 *             raise ValueError(Errors.E890.format(alias=alias))             # <<<<<<<<<<<<<<
 * 
 *         previous_alias_nr = self.get_size_aliases()
*/
    __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_t_6 = __pyx_builtin_ValueError; 
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_Errors); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_E890); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_8 = __pyx_t_10;
    __Pyx_INCREF(__pyx_t_8);
    __pyx_t_11 = 0;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_8, NULL};
      __pyx_t_9 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 160, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_alias, __pyx_v_alias, __pyx_t_9, __pyx_callargs+1, 0) < 0) __PYX_ERR(0, 160, __pyx_L1_error)
      __pyx_t_7 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_format, __pyx_callargs+__pyx_t_11, (1-__pyx_t_11) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_9);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 160, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
    }
    __pyx_t_11 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_7};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 160, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 160, __pyx_L1_error)

    /* "spacy/kb/kb_in_memory.pyx":159
 *         Return the alias_hash at the end
 *         """
 *         if alias is None or len(alias) == 0:             # <<<<<<<<<<<<<<
 *             raise ValueError(Errors.E890.format(alias=alias))
 * 
*/
  }

  /* "spacy/kb/kb_in_memory.pyx":162
 *             raise ValueError(Errors.E890.format(alias=alias))
 * 
 *         previous_alias_nr = self.get_size_aliases()             # <<<<<<<<<<<<<<
 *         # Throw an error if the length of entities and probabilities are not the same
 *         if not len(entities) == len(probabilities):
*/
  __pyx_t_6 = ((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_t_6);
  __pyx_t_11 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_size_aliases, __pyx_callargs+__pyx_t_11, (1-__pyx_t_11) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __pyx_v_previous_alias_nr = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "spacy/kb/kb_in_memory.pyx":164
 *         previous_alias_nr = self.get_size_aliases()
 *         # Throw an error if the length of entities and probabilities are not the same
 *         if not len(entities) == len(probabilities):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 Errors.E132.format(
*/
  __pyx_t_3 = PyObject_Length(__pyx_v_entities); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_t_12 = PyObject_Length(__pyx_v_probabilities); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_t_1 = (!(__pyx_t_3 == __pyx_t_12));
  if (unlikely(__pyx_t_1)) {

    /* "spacy/kb/kb_in_memory.pyx":165
 *         # Throw an error if the length of entities and probabilities are not the same
 *         if not len(entities) == len(probabilities):
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 Errors.E132.format(
 *                     alias=alias,
*/
    __pyx_t_6 = NULL;
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_t_7 = __pyx_builtin_ValueError; 

    /* "spacy/kb/kb_in_memory.pyx":166
 *         if not len(entities) == len(probabilities):
 *             raise ValueError(
 *                 Errors.E132.format(             # <<<<<<<<<<<<<<
 *                     alias=alias,
 *                     entities_length=len(entities),
*/
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_Errors); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_E132); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = __pyx_t_8;
    __Pyx_INCREF(__pyx_t_10);

    /* "spacy/kb/kb_in_memory.pyx":168
 *                 Errors.E132.format(
 *                     alias=alias,
 *                     entities_length=len(entities),             # <<<<<<<<<<<<<<
 *                     probabilities_length=len(probabilities))
 *             )
*/
    __pyx_t_12 = PyObject_Length(__pyx_v_entities); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 168, __pyx_L1_error)
    __pyx_t_9 = PyLong_FromSsize_t(__pyx_t_12); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);

    /* "spacy/kb/kb_in_memory.pyx":169
 *                     alias=alias,
 *                     entities_length=len(entities),
 *                     probabilities_length=len(probabilities))             # <<<<<<<<<<<<<<
 *             )
 * 
*/
    __pyx_t_12 = PyObject_Length(__pyx_v_probabilities); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 169, __pyx_L1_error)
    __pyx_t_13 = PyLong_FromSsize_t(__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_11 = 0;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 3 : 0)] = {__pyx_t_10, NULL};
      __pyx_t_14 = __Pyx_MakeVectorcallBuilderKwds(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_alias, __pyx_v_alias, __pyx_t_14, __pyx_callargs+1, 0) < 0) __PYX_ERR(0, 166, __pyx_L1_error)
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_entities_length, __pyx_t_9, __pyx_t_14, __pyx_callargs+1, 1) < 0) __PYX_ERR(0, 166, __pyx_L1_error)
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_probabilities_length, __pyx_t_13, __pyx_t_14, __pyx_callargs+1, 2) < 0) __PYX_ERR(0, 166, __pyx_L1_error)
      __pyx_t_5 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_format, __pyx_callargs+__pyx_t_11, (1-__pyx_t_11) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_14);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    __pyx_t_11 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 165, __pyx_L1_error)

    /* "spacy/kb/kb_in_memory.pyx":164
 *         previous_alias_nr = self.get_size_aliases()
 *         # Throw an error if the length of entities and probabilities are not the same
 *         if not len(entities) == len(probabilities):             # <<<<<<<<<<<<<<
 *             raise ValueError(
 *                 Errors.E132.format(
*/
  }

  /* "spacy/kb/kb_in_memory.pyx":174
 *         # Throw an error if the probabilities sum up to more than 1 (allow for
 *         # some rounding errors)
 *         prob_sum = sum(probabilities)             # <<<<<<<<<<<<<<
 *         if prob_sum > 1.00001:
 *             raise ValueError(Errors.E133.format(alias=alias, sum=prob_sum))
*/
  __pyx_t_7 = NULL;
  __Pyx_INCREF(__pyx_builtin_sum);
  __pyx_t_5 = __pyx_builtin_sum; 
  __pyx_t_11 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_probabilities};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __pyx_v_prob_sum = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "spacy/kb/kb_in_memory.pyx":175
 *         # some rounding errors)
 *         prob_sum = sum(probabilities)
 *         if prob_sum > 1.00001:             # <<<<<<<<<<<<<<
 *             raise ValueError(Errors.E133.format(alias=alias, sum=prob_sum))
 * 
*/
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_prob_sum, __pyx_mstate_global->__pyx_float_1_00001, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 175, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "spacy/kb/kb_in_memory.pyx":176
 *         prob_sum = sum(probabilities)
 *         if prob_sum > 1.00001:
 *             raise ValueError(Errors.E133.format(alias=alias, sum=prob_sum))             # <<<<<<<<<<<<<<
 * 
 *         cdef hash_t alias_hash = self.vocab.strings.add(alias)
*/
    __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_t_7 = __pyx_builtin_ValueError; 
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_mstate_global->__pyx_n_u_Errors); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_mstate_global->__pyx_n_u_E133); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_8 = __pyx_t_13;
    __Pyx_INCREF(__pyx_t_8);
    __pyx_t_11 = 0;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 2 : 0)] = {__pyx_t_8, NULL};
      __pyx_t_14 = __Pyx_MakeVectorcallBuilderKwds(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_alias, __pyx_v_alias, __pyx_t_14, __pyx_callargs+1, 0) < 0) __PYX_ERR(0, 176, __pyx_L1_error)
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_sum, __pyx_v_prob_sum, __pyx_t_14, __pyx_callargs+1, 1) < 0) __PYX_ERR(0, 176, __pyx_L1_error)
      __pyx_t_6 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_format, __pyx_callargs+__pyx_t_11, (1-__pyx_t_11) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_14);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
    }
    __pyx_t_11 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_6};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 176, __pyx_L1_error)

    /* "spacy/kb/kb_in_memory.pyx":175
 *         # some rounding errors)
 *         prob_sum = sum(probabilities)
 *         if prob_sum > 1.00001:             # <<<<<<<<<<<<<<
 *             raise ValueError(Errors.E133.format(alias=alias, sum=prob_sum))
 * 
*/
  }

  /* "spacy/kb/kb_in_memory.pyx":178
 *             raise ValueError(Errors.E133.format(alias=alias, sum=prob_sum))
 * 
 *         cdef hash_t alias_hash = self.vocab.strings.add(alias)             # <<<<<<<<<<<<<<
 * 
 *         # Check whether this alias was added before
*/
  __pyx_t_7 = ((PyObject *)__pyx_v_self->__pyx_base.vocab->strings);
  __Pyx_INCREF(__pyx_t_7);
  __pyx_t_11 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_alias};
    __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_add, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __pyx_t_15 = __Pyx_PyLong_As_uint64_t(__pyx_t_4); if (unlikely((__pyx_t_15 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_alias_hash = __pyx_t_15;

  /* "spacy/kb/kb_in_memory.pyx":181
 * 
 *         # Check whether this alias was added before
 *         if alias_hash in self._alias_index:             # <<<<<<<<<<<<<<
 *             warnings.warn(Warnings.W017.format(alias=alias))
 *             return
*/
  __pyx_t_4 = __Pyx_PyLong_From_uint64_t(__pyx_v_alias_hash); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_t_4, ((PyObject *)__pyx_v_self->_alias_index), Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "spacy/kb/kb_in_memory.pyx":182
 *         # Check whether this alias was added before
 *         if alias_hash in self._alias_index:
 *             warnings.warn(Warnings.W017.format(alias=alias))             # <<<<<<<<<<<<<<
 *             return
 * 
*/
    __pyx_t_7 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_warnings); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_warn); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_mstate_global->__pyx_n_u_Warnings); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_mstate_global->__pyx_n_u_W017); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_13 = __pyx_t_8;
    __Pyx_INCREF(__pyx_t_13);
    __pyx_t_11 = 0;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_13, NULL};
      __pyx_t_14 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 182, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_alias, __pyx_v_alias, __pyx_t_14, __pyx_callargs+1, 0) < 0) __PYX_ERR(0, 182, __pyx_L1_error)
      __pyx_t_6 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_format, __pyx_callargs+__pyx_t_11, (1-__pyx_t_11) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_14);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 182, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
    }
    __pyx_t_11 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      assert(__pyx_t_7);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
      __pyx_t_11 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_6};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 182, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "spacy/kb/kb_in_memory.pyx":183
 *         if alias_hash in self._alias_index:
 *             warnings.warn(Warnings.W017.format(alias=alias))
 *             return             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[int64_t] entry_indices
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "spacy/kb/kb_in_memory.pyx":181
 * 
 *         # Check whether this alias was added before
 *         if alias_hash in self._alias_index:             # <<<<<<<<<<<<<<
 *             warnings.warn(Warnings.W017.format(alias=alias))
 *             return
*/
  }

  /* "spacy/kb/kb_in_memory.pyx":188
 *         cdef vector[float] probs
 * 
 *         for entity, prob in zip(entities, probabilities):             # <<<<<<<<<<<<<<
 *             entity_hash = self.vocab.strings[entity]
 *             if entity_hash not in self._entry_index:
*/
  __pyx_t_5 = NULL;
  __Pyx_INCREF(__pyx_builtin_zip);
  __pyx_t_6 = __pyx_builtin_zip; 
  __pyx_t_11 = 1;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_v_entities, __pyx_v_probabilities};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_11, (3-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6);
    __pyx_t_12 = 0;
    __pyx_t_16 = NULL;
  } else {
    __pyx_t_12 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_16 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_6); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 188, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_16)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_6);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 188, __pyx_L1_error)
          #endif
          if (__pyx_t_12 >= __pyx_temp) break;
        }
        __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_6, __pyx_t_12);
        ++__pyx_t_12;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_6);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 188, __pyx_L1_error)
          #endif
          if (__pyx_t_12 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_12));
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_12);
        #endif
        ++__pyx_t_12;
      }
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 188, __pyx_L1_error)
    } else {
      __pyx_t_4 = __pyx_t_16(__pyx_t_6);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 188, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_4);
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 188, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0);
        __Pyx_INCREF(__pyx_t_5);
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1);
        __Pyx_INCREF(__pyx_t_7);
      } else {
        __pyx_t_5 = __Pyx_PyList_GetItemRef(sequence, 0);
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 188, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_5);
        __pyx_t_7 = __Pyx_PyList_GetItemRef(sequence, 1);
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 188, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_7);
      }
      #else
      __pyx_t_5 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_17 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
      index = 0; __pyx_t_5 = __pyx_t_17(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_7 = __pyx_t_17(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_8), 2) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
      __pyx_t_17 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L12_unpacking_done;
      __pyx_L11_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_17 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 188, __pyx_L1_error)
      __pyx_L12_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_entity, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_prob, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "spacy/kb/kb_in_memory.pyx":189
 * 
 *         for entity, prob in zip(entities, probabilities):
 *             entity_hash = self.vocab.strings[entity]             # <<<<<<<<<<<<<<
 *             if entity_hash not in self._entry_index:
 *                 raise ValueError(Errors.E134.format(entity=entity))
*/
    __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->__pyx_base.vocab->strings), __pyx_v_entity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_entity_hash, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "spacy/kb/kb_in_memory.pyx":190
 *         for entity, prob in zip(entities, probabilities):
 *             entity_hash = self.vocab.strings[entity]
 *             if entity_hash not in self._entry_index:             # <<<<<<<<<<<<<<
 *                 raise ValueError(Errors.E134.format(entity=entity))
 * 
*/
    __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_entity_hash, ((PyObject *)__pyx_v_self->_entry_index), Py_NE)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 190, __pyx_L1_error)
    if (unlikely(__pyx_t_1)) {

      /* "spacy/kb/kb_in_memory.pyx":191
 *             entity_hash = self.vocab.strings[entity]
 *             if entity_hash not in self._entry_index:
 *                 raise ValueError(Errors.E134.format(entity=entity))             # <<<<<<<<<<<<<<
 * 
 *             entry_index = <int64_t>self._entry_index.get(entity_hash)
*/
      __pyx_t_7 = NULL;
      __Pyx_INCREF(__pyx_builtin_ValueError);
      __pyx_t_5 = __pyx_builtin_ValueError; 
      __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_mstate_global->__pyx_n_u_Errors); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 191, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_mstate_global->__pyx_n_u_E134); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 191, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_14 = __pyx_t_9;
      __Pyx_INCREF(__pyx_t_14);
      __pyx_t_11 = 0;
      {
        PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_14, NULL};
        __pyx_t_13 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_entity, __pyx_v_entity, __pyx_t_13, __pyx_callargs+1, 0) < 0) __PYX_ERR(0, 191, __pyx_L1_error)
        __pyx_t_8 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_format, __pyx_callargs+__pyx_t_11, (1-__pyx_t_11) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_13);
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
      }
      __pyx_t_11 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_8};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 191, __pyx_L1_error)

      /* "spacy/kb/kb_in_memory.pyx":190
 *         for entity, prob in zip(entities, probabilities):
 *             entity_hash = self.vocab.strings[entity]
 *             if entity_hash not in self._entry_index:             # <<<<<<<<<<<<<<
 *                 raise ValueError(Errors.E134.format(entity=entity))
 * 
*/
    }

    /* "spacy/kb/kb_in_memory.pyx":193
 *                 raise ValueError(Errors.E134.format(entity=entity))
 * 
 *             entry_index = <int64_t>self._entry_index.get(entity_hash)             # <<<<<<<<<<<<<<
 *             entry_indices.push_back(int(entry_index))
 *             probs.push_back(float(prob))
*/
    __pyx_t_18 = __Pyx_PyLong_As_uint64_t(__pyx_v_entity_hash); if (unlikely((__pyx_t_18 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 193, __pyx_L1_error)
    __pyx_t_19 = ((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->_entry_index->__pyx_vtab)->get(__pyx_v_self->_entry_index, __pyx_t_18); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 193, __pyx_L1_error)
    __pyx_v_entry_index = ((int64_t)__pyx_t_19);

    /* "spacy/kb/kb_in_memory.pyx":194
 * 
 *             entry_index = <int64_t>self._entry_index.get(entity_hash)
 *             entry_indices.push_back(int(entry_index))             # <<<<<<<<<<<<<<
 *             probs.push_back(float(prob))
 * 
*/
    try {
      __pyx_v_entry_indices.push_back(((int64_t const )__pyx_v_entry_index));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 194, __pyx_L1_error)
    }

    /* "spacy/kb/kb_in_memory.pyx":195
 *             entry_index = <int64_t>self._entry_index.get(entity_hash)
 *             entry_indices.push_back(int(entry_index))
 *             probs.push_back(float(prob))             # <<<<<<<<<<<<<<
 * 
 *         new_index = self.c_add_aliases(
*/
    __pyx_t_20 = __Pyx_PyObject_AsDouble(__pyx_v_prob); if (unlikely(__pyx_t_20 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 195, __pyx_L1_error)
    try {
      __pyx_v_probs.push_back(__pyx_t_20);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 195, __pyx_L1_error)
    }

    /* "spacy/kb/kb_in_memory.pyx":188
 *         cdef vector[float] probs
 * 
 *         for entity, prob in zip(entities, probabilities):             # <<<<<<<<<<<<<<
 *             entity_hash = self.vocab.strings[entity]
 *             if entity_hash not in self._entry_index:
*/
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "spacy/kb/kb_in_memory.pyx":197
 *             probs.push_back(float(prob))
 * 
 *         new_index = self.c_add_aliases(             # <<<<<<<<<<<<<<
 *             alias_hash=alias_hash, entry_indices=entry_indices, probs=probs
 *         )
*/
  __pyx_t_21 = __pyx_f_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_c_add_aliases(__pyx_v_self, __pyx_v_alias_hash, __pyx_v_entry_indices, __pyx_v_probs); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 197, __pyx_L1_error)
  __pyx_v_new_index = __pyx_t_21;

  /* "spacy/kb/kb_in_memory.pyx":200
 *             alias_hash=alias_hash, entry_indices=entry_indices, probs=probs
 *         )
 *         self._alias_index[alias_hash] = new_index             # <<<<<<<<<<<<<<
 * 
 *         if previous_alias_nr + 1 != self.get_size_aliases():
*/
  __pyx_t_6 = __Pyx_PyLong_From_int64_t(__pyx_v_new_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (unlikely((__Pyx_SetItemInt(((PyObject *)__pyx_v_self->_alias_index), __pyx_v_alias_hash, __pyx_t_6, __pyx_t_5spacy_8typedefs_hash_t, 0, __Pyx_PyLong_From_uint64_t, 0, 0, 1) < 0))) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "spacy/kb/kb_in_memory.pyx":202
 *         self._alias_index[alias_hash] = new_index
 * 
 *         if previous_alias_nr + 1 != self.get_size_aliases():             # <<<<<<<<<<<<<<
 *             raise RuntimeError(Errors.E891.format(alias=alias))
 *         return alias_hash
*/
  __pyx_t_6 = __Pyx_PyLong_AddObjC(__pyx_v_previous_alias_nr, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = ((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_11 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_size_aliases, __pyx_callargs+__pyx_t_11, (1-__pyx_t_11) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_6, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "spacy/kb/kb_in_memory.pyx":203
 * 
 *         if previous_alias_nr + 1 != self.get_size_aliases():
 *             raise RuntimeError(Errors.E891.format(alias=alias))             # <<<<<<<<<<<<<<
 *         return alias_hash
 * 
*/
    __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_builtin_RuntimeError);
    __pyx_t_6 = __pyx_builtin_RuntimeError; 
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_Errors); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_E891); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_7 = __pyx_t_13;
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_11 = 0;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_7, NULL};
      __pyx_t_9 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_alias, __pyx_v_alias, __pyx_t_9, __pyx_callargs+1, 0) < 0) __PYX_ERR(0, 203, __pyx_L1_error)
      __pyx_t_8 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_format, __pyx_callargs+__pyx_t_11, (1-__pyx_t_11) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_9);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
    }
    __pyx_t_11 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_8};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 203, __pyx_L1_error)

    /* "spacy/kb/kb_in_memory.pyx":202
 *         self._alias_index[alias_hash] = new_index
 * 
 *         if previous_alias_nr + 1 != self.get_size_aliases():             # <<<<<<<<<<<<<<
 *             raise RuntimeError(Errors.E891.format(alias=alias))
 *         return alias_hash
*/
  }

  /* "spacy/kb/kb_in_memory.pyx":204
 *         if previous_alias_nr + 1 != self.get_size_aliases():
 *             raise RuntimeError(Errors.E891.format(alias=alias))
 *         return alias_hash             # <<<<<<<<<<<<<<
 * 
 *     def append_alias(
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyLong_From_uint64_t(__pyx_v_alias_hash); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pyx":154
 *         return alias_hash in self._alias_index
 * 
 *     def add_alias(self, str alias, entities, probabilities):             # <<<<<<<<<<<<<<
 *         """
 *         For a given alias, add its potential entities and prior probabilies to the KB.
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.add_alias", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_previous_alias_nr);
  __Pyx_XDECREF(__pyx_v_prob_sum);
  __Pyx_XDECREF(__pyx_v_entity);
  __Pyx_XDECREF(__pyx_v_prob);
  __Pyx_XDECREF(__pyx_v_entity_hash);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":206
 *         return alias_hash
 * 
 *     def append_alias(             # <<<<<<<<<<<<<<
 *         self, str alias, str entity, float prior_prob, ignore_warnings=False
 *     ):
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_31append_alias(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_30append_alias, "InMemoryLookupKB.append_alias(self, str alias, str entity, float prior_prob, ignore_warnings=False)\nFor an alias already existing in the KB, extend its potential entities\nwith one more.\nThrow a warning if either the alias or the entity is unknown,\nor when the combination is already previously recorded.\nThrow an error if this entity+prior prob would exceed the sum of 1.\nFor efficiency, it's best to use the method `add_alias` as much as\npossible instead of this one.");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_31append_alias = {"append_alias", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_31append_alias, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_30append_alias};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_31append_alias(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_alias = 0;
  PyObject *__pyx_v_entity = 0;
  float __pyx_v_prior_prob;
  PyObject *__pyx_v_ignore_warnings = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append_alias (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_alias,&__pyx_mstate_global->__pyx_n_u_entity,&__pyx_mstate_global->__pyx_n_u_prior_prob,&__pyx_mstate_global->__pyx_n_u_ignore_warnings,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 206, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 206, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 206, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 206, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 206, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "append_alias", 0) < 0) __PYX_ERR(0, 206, __pyx_L3_error)

      /* "spacy/kb/kb_in_memory.pyx":207
 * 
 *     def append_alias(
 *         self, str alias, str entity, float prior_prob, ignore_warnings=False             # <<<<<<<<<<<<<<
 *     ):
 *         """
*/
      if (!values[3]) values[3] = __Pyx_NewRef(((PyObject *)Py_False));
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("append_alias", 0, 3, 4, i); __PYX_ERR(0, 206, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 206, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 206, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 206, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 206, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[3]) values[3] = __Pyx_NewRef(((PyObject *)Py_False));
    }
    __pyx_v_alias = ((PyObject*)values[0]);
    __pyx_v_entity = ((PyObject*)values[1]);
    __pyx_v_prior_prob = __Pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_prior_prob == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 207, __pyx_L3_error)
    __pyx_v_ignore_warnings = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("append_alias", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 206, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.append_alias", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_alias), (&PyUnicode_Type), 1, "alias", 1))) __PYX_ERR(0, 207, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_entity), (&PyUnicode_Type), 1, "entity", 1))) __PYX_ERR(0, 207, __pyx_L1_error)
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_30append_alias(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self), __pyx_v_alias, __pyx_v_entity, __pyx_v_prior_prob, __pyx_v_ignore_warnings);

  /* "spacy/kb/kb_in_memory.pyx":206
 *         return alias_hash
 * 
 *     def append_alias(             # <<<<<<<<<<<<<<
 *         self, str alias, str entity, float prior_prob, ignore_warnings=False
 *     ):
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_30append_alias(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_alias, PyObject *__pyx_v_entity, float __pyx_v_prior_prob, PyObject *__pyx_v_ignore_warnings) {
  __pyx_t_5spacy_8typedefs_hash_t __pyx_v_alias_hash;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_v_entity_hash;
  int64_t __pyx_v_entry_index;
  int64_t __pyx_v_alias_index;
  struct __pyx_t_5spacy_7structs_AliasC __pyx_v_alias_entry;
  PyObject *__pyx_v_current_sum = NULL;
  PyObject *__pyx_v_new_sum = NULL;
  std::vector<int64_t>  __pyx_v_entry_indices;
  int __pyx_v_is_present;
  std::vector<int64_t> ::size_type __pyx_v_i;
  std::vector<float>  __pyx_v_probs;
  float __pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  void *__pyx_t_11;
  std::vector<float> ::iterator __pyx_t_12;
  float __pyx_t_13;
  std::vector<int64_t>  __pyx_t_14;
  std::vector<int64_t> ::size_type __pyx_t_15;
  std::vector<int64_t> ::size_type __pyx_t_16;
  std::vector<int64_t> ::size_type __pyx_t_17;
  int __pyx_t_18;
  std::vector<float>  __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_alias", 0);

  /* "spacy/kb/kb_in_memory.pyx":219
 *         """
 *         # Check if the alias exists in the KB
 *         cdef hash_t alias_hash = self.vocab.strings[alias]             # <<<<<<<<<<<<<<
 *         if alias_hash not in self._alias_index:
 *             raise ValueError(Errors.E176.format(alias=alias))
*/
  __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->__pyx_base.vocab->strings), __pyx_v_alias); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyLong_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_alias_hash = __pyx_t_2;

  /* "spacy/kb/kb_in_memory.pyx":220
 *         # Check if the alias exists in the KB
 *         cdef hash_t alias_hash = self.vocab.strings[alias]
 *         if alias_hash not in self._alias_index:             # <<<<<<<<<<<<<<
 *             raise ValueError(Errors.E176.format(alias=alias))
 * 
*/
  __pyx_t_1 = __Pyx_PyLong_From_uint64_t(__pyx_v_alias_hash); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, ((PyObject *)__pyx_v_self->_alias_index), Py_NE)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "spacy/kb/kb_in_memory.pyx":221
 *         cdef hash_t alias_hash = self.vocab.strings[alias]
 *         if alias_hash not in self._alias_index:
 *             raise ValueError(Errors.E176.format(alias=alias))             # <<<<<<<<<<<<<<
 * 
 *         # Check if the entity exists in the KB
*/
    __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_t_5 = __pyx_builtin_ValueError; 
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_Errors); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_E176); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_7 = __pyx_t_9;
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_10 = 0;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_7, NULL};
      __pyx_t_8 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 221, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_alias, __pyx_v_alias, __pyx_t_8, __pyx_callargs+1, 0) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
      __pyx_t_6 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_format, __pyx_callargs+__pyx_t_10, (1-__pyx_t_10) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 221, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
    }
    __pyx_t_10 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 221, __pyx_L1_error)

    /* "spacy/kb/kb_in_memory.pyx":220
 *         # Check if the alias exists in the KB
 *         cdef hash_t alias_hash = self.vocab.strings[alias]
 *         if alias_hash not in self._alias_index:             # <<<<<<<<<<<<<<
 *             raise ValueError(Errors.E176.format(alias=alias))
 * 
*/
  }

  /* "spacy/kb/kb_in_memory.pyx":224
 * 
 *         # Check if the entity exists in the KB
 *         cdef hash_t entity_hash = self.vocab.strings[entity]             # <<<<<<<<<<<<<<
 *         if entity_hash not in self._entry_index:
 *             raise ValueError(Errors.E134.format(entity=entity))
*/
  __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->__pyx_base.vocab->strings), __pyx_v_entity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyLong_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_entity_hash = __pyx_t_2;

  /* "spacy/kb/kb_in_memory.pyx":225
 *         # Check if the entity exists in the KB
 *         cdef hash_t entity_hash = self.vocab.strings[entity]
 *         if entity_hash not in self._entry_index:             # <<<<<<<<<<<<<<
 *             raise ValueError(Errors.E134.format(entity=entity))
 *         entry_index = <int64_t>self._entry_index.get(entity_hash)
*/
  __pyx_t_1 = __Pyx_PyLong_From_uint64_t(__pyx_v_entity_hash); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, ((PyObject *)__pyx_v_self->_entry_index), Py_NE)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "spacy/kb/kb_in_memory.pyx":226
 *         cdef hash_t entity_hash = self.vocab.strings[entity]
 *         if entity_hash not in self._entry_index:
 *             raise ValueError(Errors.E134.format(entity=entity))             # <<<<<<<<<<<<<<
 *         entry_index = <int64_t>self._entry_index.get(entity_hash)
 * 
*/
    __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_t_6 = __pyx_builtin_ValueError; 
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_Errors); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_E134); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_9 = __pyx_t_7;
    __Pyx_INCREF(__pyx_t_9);
    __pyx_t_10 = 0;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_9, NULL};
      __pyx_t_8 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_entity, __pyx_v_entity, __pyx_t_8, __pyx_callargs+1, 0) < 0) __PYX_ERR(0, 226, __pyx_L1_error)
      __pyx_t_4 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_format, __pyx_callargs+__pyx_t_10, (1-__pyx_t_10) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_8);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_t_10 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 226, __pyx_L1_error)

    /* "spacy/kb/kb_in_memory.pyx":225
 *         # Check if the entity exists in the KB
 *         cdef hash_t entity_hash = self.vocab.strings[entity]
 *         if entity_hash not in self._entry_index:             # <<<<<<<<<<<<<<
 *             raise ValueError(Errors.E134.format(entity=entity))
 *         entry_index = <int64_t>self._entry_index.get(entity_hash)
*/
  }

  /* "spacy/kb/kb_in_memory.pyx":227
 *         if entity_hash not in self._entry_index:
 *             raise ValueError(Errors.E134.format(entity=entity))
 *         entry_index = <int64_t>self._entry_index.get(entity_hash)             # <<<<<<<<<<<<<<
 * 
 *         # Throw an error if the prior probabilities (including the new one)
*/
  __pyx_t_11 = ((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->_entry_index->__pyx_vtab)->get(__pyx_v_self->_entry_index, __pyx_v_entity_hash); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 227, __pyx_L1_error)
  __pyx_v_entry_index = ((int64_t)__pyx_t_11);

  /* "spacy/kb/kb_in_memory.pyx":231
 *         # Throw an error if the prior probabilities (including the new one)
 *         # sum up to more than 1
 *         alias_index = <int64_t>self._alias_index.get(alias_hash)             # <<<<<<<<<<<<<<
 *         alias_entry = self._aliases_table[alias_index]
 *         current_sum = sum([p for p in alias_entry.probs])
*/
  __pyx_t_11 = ((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->_alias_index->__pyx_vtab)->get(__pyx_v_self->_alias_index, __pyx_v_alias_hash); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __pyx_v_alias_index = ((int64_t)__pyx_t_11);

  /* "spacy/kb/kb_in_memory.pyx":232
 *         # sum up to more than 1
 *         alias_index = <int64_t>self._alias_index.get(alias_hash)
 *         alias_entry = self._aliases_table[alias_index]             # <<<<<<<<<<<<<<
 *         current_sum = sum([p for p in alias_entry.probs])
 *         new_sum = current_sum + prior_prob
*/
  __pyx_v_alias_entry = (__pyx_v_self->_aliases_table[__pyx_v_alias_index]);

  /* "spacy/kb/kb_in_memory.pyx":233
 *         alias_index = <int64_t>self._alias_index.get(alias_hash)
 *         alias_entry = self._aliases_table[alias_index]
 *         current_sum = sum([p for p in alias_entry.probs])             # <<<<<<<<<<<<<<
 *         new_sum = current_sum + prior_prob
 * 
*/
  __pyx_t_6 = NULL;
  __Pyx_INCREF(__pyx_builtin_sum);
  __pyx_t_4 = __pyx_builtin_sum; 
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_12 = __pyx_v_alias_entry.probs.begin();
  for (; __pyx_t_12 != __pyx_v_alias_entry.probs.end(); ++__pyx_t_12) {
    __pyx_t_13 = *__pyx_t_12;
    __pyx_v_p = __pyx_t_13;
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_p); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_10 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_current_sum = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":234
 *         alias_entry = self._aliases_table[alias_index]
 *         current_sum = sum([p for p in alias_entry.probs])
 *         new_sum = current_sum + prior_prob             # <<<<<<<<<<<<<<
 * 
 *         if new_sum > 1.00001:
*/
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_prior_prob); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Add(__pyx_v_current_sum, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_new_sum = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "spacy/kb/kb_in_memory.pyx":236
 *         new_sum = current_sum + prior_prob
 * 
 *         if new_sum > 1.00001:             # <<<<<<<<<<<<<<
 *             raise ValueError(Errors.E133.format(alias=alias, sum=new_sum))
 * 
*/
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_new_sum, __pyx_mstate_global->__pyx_float_1_00001, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 236, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "spacy/kb/kb_in_memory.pyx":237
 * 
 *         if new_sum > 1.00001:
 *             raise ValueError(Errors.E133.format(alias=alias, sum=new_sum))             # <<<<<<<<<<<<<<
 * 
 *         entry_indices = alias_entry.entry_indices
*/
    __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_t_5 = __pyx_builtin_ValueError; 
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_Errors); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_E133); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_7 = __pyx_t_9;
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_10 = 0;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 2 : 0)] = {__pyx_t_7, NULL};
      __pyx_t_8 = __Pyx_MakeVectorcallBuilderKwds(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_alias, __pyx_v_alias, __pyx_t_8, __pyx_callargs+1, 0) < 0) __PYX_ERR(0, 237, __pyx_L1_error)
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_sum, __pyx_v_new_sum, __pyx_t_8, __pyx_callargs+1, 1) < 0) __PYX_ERR(0, 237, __pyx_L1_error)
      __pyx_t_6 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_format, __pyx_callargs+__pyx_t_10, (1-__pyx_t_10) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
    }
    __pyx_t_10 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_6};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 237, __pyx_L1_error)

    /* "spacy/kb/kb_in_memory.pyx":236
 *         new_sum = current_sum + prior_prob
 * 
 *         if new_sum > 1.00001:             # <<<<<<<<<<<<<<
 *             raise ValueError(Errors.E133.format(alias=alias, sum=new_sum))
 * 
*/
  }

  /* "spacy/kb/kb_in_memory.pyx":239
 *             raise ValueError(Errors.E133.format(alias=alias, sum=new_sum))
 * 
 *         entry_indices = alias_entry.entry_indices             # <<<<<<<<<<<<<<
 * 
 *         is_present = False
*/
  __pyx_t_14 = __pyx_v_alias_entry.entry_indices;
  __pyx_v_entry_indices = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_14);

  /* "spacy/kb/kb_in_memory.pyx":241
 *         entry_indices = alias_entry.entry_indices
 * 
 *         is_present = False             # <<<<<<<<<<<<<<
 *         for i in range(entry_indices.size()):
 *             if entry_indices[i] == int(entry_index):
*/
  __pyx_v_is_present = 0;

  /* "spacy/kb/kb_in_memory.pyx":242
 * 
 *         is_present = False
 *         for i in range(entry_indices.size()):             # <<<<<<<<<<<<<<
 *             if entry_indices[i] == int(entry_index):
 *                 is_present = True
*/
  __pyx_t_15 = __pyx_v_entry_indices.size();
  __pyx_t_16 = __pyx_t_15;
  for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
    __pyx_v_i = __pyx_t_17;

    /* "spacy/kb/kb_in_memory.pyx":243
 *         is_present = False
 *         for i in range(entry_indices.size()):
 *             if entry_indices[i] == int(entry_index):             # <<<<<<<<<<<<<<
 *                 is_present = True
 * 
*/
    __pyx_t_4 = __Pyx_PyLong_From_int64_t((__pyx_v_entry_indices[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    __Pyx_INCREF((PyObject *)(&PyLong_Type));
    __pyx_t_1 = ((PyObject *)(&PyLong_Type)); 
    __pyx_t_9 = __Pyx_PyLong_From_int64_t(__pyx_v_entry_index); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_9};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_3) {

      /* "spacy/kb/kb_in_memory.pyx":244
 *         for i in range(entry_indices.size()):
 *             if entry_indices[i] == int(entry_index):
 *                 is_present = True             # <<<<<<<<<<<<<<
 * 
 *         if is_present:
*/
      __pyx_v_is_present = 1;

      /* "spacy/kb/kb_in_memory.pyx":243
 *         is_present = False
 *         for i in range(entry_indices.size()):
 *             if entry_indices[i] == int(entry_index):             # <<<<<<<<<<<<<<
 *                 is_present = True
 * 
*/
    }
  }

  /* "spacy/kb/kb_in_memory.pyx":246
 *                 is_present = True
 * 
 *         if is_present:             # <<<<<<<<<<<<<<
 *             if not ignore_warnings:
 *                 warnings.warn(Warnings.W024.format(entity=entity, alias=alias))
*/
  if (__pyx_v_is_present) {

    /* "spacy/kb/kb_in_memory.pyx":247
 * 
 *         if is_present:
 *             if not ignore_warnings:             # <<<<<<<<<<<<<<
 *                 warnings.warn(Warnings.W024.format(entity=entity, alias=alias))
 *         else:
*/
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_ignore_warnings); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 247, __pyx_L1_error)
    __pyx_t_18 = (!__pyx_t_3);
    if (__pyx_t_18) {

      /* "spacy/kb/kb_in_memory.pyx":248
 *         if is_present:
 *             if not ignore_warnings:
 *                 warnings.warn(Warnings.W024.format(entity=entity, alias=alias))             # <<<<<<<<<<<<<<
 *         else:
 *             entry_indices.push_back(int(entry_index))
*/
      __pyx_t_5 = NULL;
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_warnings); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 248, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_warn); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 248, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_Warnings); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 248, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_W024); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 248, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_6 = __pyx_t_7;
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_10 = 0;
      {
        PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 2 : 0)] = {__pyx_t_6, NULL};
        __pyx_t_8 = __Pyx_MakeVectorcallBuilderKwds(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_entity, __pyx_v_entity, __pyx_t_8, __pyx_callargs+1, 0) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_alias, __pyx_v_alias, __pyx_t_8, __pyx_callargs+1, 1) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
        __pyx_t_4 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_format, __pyx_callargs+__pyx_t_10, (1-__pyx_t_10) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_8);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
      }
      __pyx_t_10 = 1;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
        assert(__pyx_t_5);
        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx__function);
        __Pyx_DECREF_SET(__pyx_t_9, __pyx__function);
        __pyx_t_10 = 0;
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "spacy/kb/kb_in_memory.pyx":247
 * 
 *         if is_present:
 *             if not ignore_warnings:             # <<<<<<<<<<<<<<
 *                 warnings.warn(Warnings.W024.format(entity=entity, alias=alias))
 *         else:
*/
    }

    /* "spacy/kb/kb_in_memory.pyx":246
 *                 is_present = True
 * 
 *         if is_present:             # <<<<<<<<<<<<<<
 *             if not ignore_warnings:
 *                 warnings.warn(Warnings.W024.format(entity=entity, alias=alias))
*/
    goto __pyx_L12;
  }

  /* "spacy/kb/kb_in_memory.pyx":250
 *                 warnings.warn(Warnings.W024.format(entity=entity, alias=alias))
 *         else:
 *             entry_indices.push_back(int(entry_index))             # <<<<<<<<<<<<<<
 *             alias_entry.entry_indices = entry_indices
 * 
*/
  /*else*/ {
    try {
      __pyx_v_entry_indices.push_back(((int64_t const )__pyx_v_entry_index));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 250, __pyx_L1_error)
    }

    /* "spacy/kb/kb_in_memory.pyx":251
 *         else:
 *             entry_indices.push_back(int(entry_index))
 *             alias_entry.entry_indices = entry_indices             # <<<<<<<<<<<<<<
 * 
 *             probs = alias_entry.probs
*/
    __pyx_v_alias_entry.entry_indices = __pyx_v_entry_indices;

    /* "spacy/kb/kb_in_memory.pyx":253
 *             alias_entry.entry_indices = entry_indices
 * 
 *             probs = alias_entry.probs             # <<<<<<<<<<<<<<
 *             probs.push_back(float(prior_prob))
 *             alias_entry.probs = probs
*/
    __pyx_t_19 = __pyx_v_alias_entry.probs;
    __pyx_v_probs = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_19);

    /* "spacy/kb/kb_in_memory.pyx":254
 * 
 *             probs = alias_entry.probs
 *             probs.push_back(float(prior_prob))             # <<<<<<<<<<<<<<
 *             alias_entry.probs = probs
 *             self._aliases_table[alias_index] = alias_entry
*/
    try {
      __pyx_v_probs.push_back(((double)__pyx_v_prior_prob));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 254, __pyx_L1_error)
    }

    /* "spacy/kb/kb_in_memory.pyx":255
 *             probs = alias_entry.probs
 *             probs.push_back(float(prior_prob))
 *             alias_entry.probs = probs             # <<<<<<<<<<<<<<
 *             self._aliases_table[alias_index] = alias_entry
 * 
*/
    __pyx_v_alias_entry.probs = __pyx_v_probs;

    /* "spacy/kb/kb_in_memory.pyx":256
 *             probs.push_back(float(prior_prob))
 *             alias_entry.probs = probs
 *             self._aliases_table[alias_index] = alias_entry             # <<<<<<<<<<<<<<
 * 
 *     def get_candidates(self, mention: Span) -> Iterable[Candidate]:
*/
    (__pyx_v_self->_aliases_table[__pyx_v_alias_index]) = __pyx_v_alias_entry;
  }
  __pyx_L12:;

  /* "spacy/kb/kb_in_memory.pyx":206
 *         return alias_hash
 * 
 *     def append_alias(             # <<<<<<<<<<<<<<
 *         self, str alias, str entity, float prior_prob, ignore_warnings=False
 *     ):
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.append_alias", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_current_sum);
  __Pyx_XDECREF(__pyx_v_new_sum);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":258
 *             self._aliases_table[alias_index] = alias_entry
 * 
 *     def get_candidates(self, mention: Span) -> Iterable[Candidate]:             # <<<<<<<<<<<<<<
 *         return self.get_alias_candidates(mention.text)  # type: ignore
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_33get_candidates(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_32get_candidates, "InMemoryLookupKB.get_candidates(self, mention: Span) -> Iterable[Candidate]");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_33get_candidates = {"get_candidates", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_33get_candidates, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_32get_candidates};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_33get_candidates(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_mention = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_candidates (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_mention,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 258, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 258, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "get_candidates", 0) < 0) __PYX_ERR(0, 258, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("get_candidates", 1, 1, 1, i); __PYX_ERR(0, 258, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 258, __pyx_L3_error)
    }
    __pyx_v_mention = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_candidates", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 258, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.get_candidates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_32get_candidates(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self), __pyx_v_mention);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_32get_candidates(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_mention) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_candidates", 0);

  /* "spacy/kb/kb_in_memory.pyx":259
 * 
 *     def get_candidates(self, mention: Span) -> Iterable[Candidate]:
 *         return self.get_alias_candidates(mention.text)  # type: ignore             # <<<<<<<<<<<<<<
 * 
 *     def get_alias_candidates(self, str alias) -> Iterable[Candidate]:
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_mention, __pyx_mstate_global->__pyx_n_u_text); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_alias_candidates, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pyx":258
 *             self._aliases_table[alias_index] = alias_entry
 * 
 *     def get_candidates(self, mention: Span) -> Iterable[Candidate]:             # <<<<<<<<<<<<<<
 *         return self.get_alias_candidates(mention.text)  # type: ignore
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.get_candidates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":261
 *         return self.get_alias_candidates(mention.text)  # type: ignore
 * 
 *     def get_alias_candidates(self, str alias) -> Iterable[Candidate]:             # <<<<<<<<<<<<<<
 *         """
 *         Return candidate entities for an alias. Each candidate defines the
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_35get_alias_candidates(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_34get_alias_candidates, "InMemoryLookupKB.get_alias_candidates(self, str alias) -> Iterable[Candidate]\nReturn candidate entities for an alias. Each candidate defines the\nentity, the original alias, and the prior probability of that alias\nresolving to that entity.\nIf the alias is not known in the KB, and empty list is returned.");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_35get_alias_candidates = {"get_alias_candidates", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_35get_alias_candidates, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_34get_alias_candidates};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_35get_alias_candidates(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_alias = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_alias_candidates (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_alias,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 261, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 261, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "get_alias_candidates", 0) < 0) __PYX_ERR(0, 261, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("get_alias_candidates", 1, 1, 1, i); __PYX_ERR(0, 261, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 261, __pyx_L3_error)
    }
    __pyx_v_alias = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_alias_candidates", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 261, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.get_alias_candidates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_alias), (&PyUnicode_Type), 1, "alias", 1))) __PYX_ERR(0, 261, __pyx_L1_error)
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_34get_alias_candidates(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self), __pyx_v_alias);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_34get_alias_candidates(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_alias) {
  __pyx_t_5spacy_8typedefs_hash_t __pyx_v_alias_hash;
  int64_t __pyx_v_alias_index;
  struct __pyx_t_5spacy_7structs_AliasC __pyx_v_alias_entry;
  PyObject *__pyx_v_entry_index = NULL;
  PyObject *__pyx_v_prior_prob = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_t_2;
  int __pyx_t_3;
  void *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *(*__pyx_t_13)(PyObject *);
  std::vector<struct __pyx_t_5spacy_7structs_KBEntryC> ::size_type __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_alias_candidates", 0);

  /* "spacy/kb/kb_in_memory.pyx":268
 *         If the alias is not known in the KB, and empty list is returned.
 *         """
 *         cdef hash_t alias_hash = self.vocab.strings[alias]             # <<<<<<<<<<<<<<
 *         if alias_hash not in self._alias_index:
 *             return []
*/
  __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->__pyx_base.vocab->strings), __pyx_v_alias); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyLong_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_alias_hash = __pyx_t_2;

  /* "spacy/kb/kb_in_memory.pyx":269
 *         """
 *         cdef hash_t alias_hash = self.vocab.strings[alias]
 *         if alias_hash not in self._alias_index:             # <<<<<<<<<<<<<<
 *             return []
 *         alias_index = <int64_t>self._alias_index.get(alias_hash)
*/
  __pyx_t_1 = __Pyx_PyLong_From_uint64_t(__pyx_v_alias_hash); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, ((PyObject *)__pyx_v_self->_alias_index), Py_NE)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "spacy/kb/kb_in_memory.pyx":270
 *         cdef hash_t alias_hash = self.vocab.strings[alias]
 *         if alias_hash not in self._alias_index:
 *             return []             # <<<<<<<<<<<<<<
 *         alias_index = <int64_t>self._alias_index.get(alias_hash)
 *         alias_entry = self._aliases_table[alias_index]
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "spacy/kb/kb_in_memory.pyx":269
 *         """
 *         cdef hash_t alias_hash = self.vocab.strings[alias]
 *         if alias_hash not in self._alias_index:             # <<<<<<<<<<<<<<
 *             return []
 *         alias_index = <int64_t>self._alias_index.get(alias_hash)
*/
  }

  /* "spacy/kb/kb_in_memory.pyx":271
 *         if alias_hash not in self._alias_index:
 *             return []
 *         alias_index = <int64_t>self._alias_index.get(alias_hash)             # <<<<<<<<<<<<<<
 *         alias_entry = self._aliases_table[alias_index]
 * 
*/
  __pyx_t_4 = ((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->_alias_index->__pyx_vtab)->get(__pyx_v_self->_alias_index, __pyx_v_alias_hash); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 271, __pyx_L1_error)
  __pyx_v_alias_index = ((int64_t)__pyx_t_4);

  /* "spacy/kb/kb_in_memory.pyx":272
 *             return []
 *         alias_index = <int64_t>self._alias_index.get(alias_hash)
 *         alias_entry = self._aliases_table[alias_index]             # <<<<<<<<<<<<<<
 * 
 *         return [Candidate(kb=self,
*/
  __pyx_v_alias_entry = (__pyx_v_self->_aliases_table[__pyx_v_alias_index]);

  /* "spacy/kb/kb_in_memory.pyx":274
 *         alias_entry = self._aliases_table[alias_index]
 * 
 *         return [Candidate(kb=self,             # <<<<<<<<<<<<<<
 *                           entity_hash=self._entries[entry_index].entity_hash,
 *                           entity_freq=self._entries[entry_index].freq,
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "spacy/kb/kb_in_memory.pyx":282
 *                           alias_hash=alias_hash,
 *                           prior_prob=prior_prob)
 *                 for (entry_index, prior_prob) in zip(             # <<<<<<<<<<<<<<
 *                     alias_entry.entry_indices, alias_entry.probs
 *                 )
*/
  __pyx_t_6 = NULL;
  __Pyx_INCREF(__pyx_builtin_zip);
  __pyx_t_7 = __pyx_builtin_zip; 

  /* "spacy/kb/kb_in_memory.pyx":283
 *                           prior_prob=prior_prob)
 *                 for (entry_index, prior_prob) in zip(
 *                     alias_entry.entry_indices, alias_entry.probs             # <<<<<<<<<<<<<<
 *                 )
 *                 if entry_index != 0]
*/
  __pyx_t_8 = __pyx_convert_vector_to_py_int64_t(__pyx_v_alias_entry.entry_indices); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __pyx_convert_vector_to_py_float(__pyx_v_alias_entry.probs); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = 1;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_t_8, __pyx_t_9};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_10, (3-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  }

  /* "spacy/kb/kb_in_memory.pyx":282
 *                           alias_hash=alias_hash,
 *                           prior_prob=prior_prob)
 *                 for (entry_index, prior_prob) in zip(             # <<<<<<<<<<<<<<
 *                     alias_entry.entry_indices, alias_entry.probs
 *                 )
*/
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_7 = __pyx_t_5; __Pyx_INCREF(__pyx_t_7);
    __pyx_t_11 = 0;
    __pyx_t_12 = NULL;
  } else {
    __pyx_t_11 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_7); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 282, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_12)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_7);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 282, __pyx_L1_error)
          #endif
          if (__pyx_t_11 >= __pyx_temp) break;
        }
        __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_7, __pyx_t_11);
        ++__pyx_t_11;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_7);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 282, __pyx_L1_error)
          #endif
          if (__pyx_t_11 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_11));
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_7, __pyx_t_11);
        #endif
        ++__pyx_t_11;
      }
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 282, __pyx_L1_error)
    } else {
      __pyx_t_5 = __pyx_t_12(__pyx_t_7);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 282, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_5);
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 282, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1);
        __Pyx_INCREF(__pyx_t_8);
      } else {
        __pyx_t_9 = __Pyx_PyList_GetItemRef(sequence, 0);
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 282, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_9);
        __pyx_t_8 = __Pyx_PyList_GetItemRef(sequence, 1);
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 282, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_8);
      }
      #else
      __pyx_t_9 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_13 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);
      index = 0; __pyx_t_9 = __pyx_t_13(__pyx_t_6); if (unlikely(!__pyx_t_9)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_8 = __pyx_t_13(__pyx_t_6); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_6), 2) < 0) __PYX_ERR(0, 282, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 282, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_entry_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_prior_prob, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "spacy/kb/kb_in_memory.pyx":285
 *                     alias_entry.entry_indices, alias_entry.probs
 *                 )
 *                 if entry_index != 0]             # <<<<<<<<<<<<<<
 * 
 *     def get_vector(self, str entity):
*/
    __pyx_t_3 = (__Pyx_PyLong_BoolNeObjC(__pyx_v_entry_index, __pyx_mstate_global->__pyx_int_0, 0, 0)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 285, __pyx_L1_error)
    if (__pyx_t_3) {

      /* "spacy/kb/kb_in_memory.pyx":274
 *         alias_entry = self._aliases_table[alias_index]
 * 
 *         return [Candidate(kb=self,             # <<<<<<<<<<<<<<
 *                           entity_hash=self._entries[entry_index].entity_hash,
 *                           entity_freq=self._entries[entry_index].freq,
*/
      __pyx_t_8 = NULL;
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_Candidate); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);

      /* "spacy/kb/kb_in_memory.pyx":275
 * 
 *         return [Candidate(kb=self,
 *                           entity_hash=self._entries[entry_index].entity_hash,             # <<<<<<<<<<<<<<
 *                           entity_freq=self._entries[entry_index].freq,
 *                           entity_vector=self._vectors_table[
*/
      __pyx_t_14 = __Pyx_PyLong_As_size_t(__pyx_v_entry_index); if (unlikely((__pyx_t_14 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L1_error)
      __pyx_t_6 = __Pyx_PyLong_From_uint64_t((__pyx_v_self->_entries[__pyx_t_14]).entity_hash); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 275, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "spacy/kb/kb_in_memory.pyx":276
 *         return [Candidate(kb=self,
 *                           entity_hash=self._entries[entry_index].entity_hash,
 *                           entity_freq=self._entries[entry_index].freq,             # <<<<<<<<<<<<<<
 *                           entity_vector=self._vectors_table[
 *                               self._entries[entry_index].vector_index
*/
      __pyx_t_14 = __Pyx_PyLong_As_size_t(__pyx_v_entry_index); if (unlikely((__pyx_t_14 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L1_error)
      __pyx_t_15 = PyFloat_FromDouble((__pyx_v_self->_entries[__pyx_t_14]).freq); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);

      /* "spacy/kb/kb_in_memory.pyx":278
 *                           entity_freq=self._entries[entry_index].freq,
 *                           entity_vector=self._vectors_table[
 *                               self._entries[entry_index].vector_index             # <<<<<<<<<<<<<<
 *                           ],
 *                           alias_hash=alias_hash,
*/
      __pyx_t_14 = __Pyx_PyLong_As_size_t(__pyx_v_entry_index); if (unlikely((__pyx_t_14 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L1_error)

      /* "spacy/kb/kb_in_memory.pyx":277
 *                           entity_hash=self._entries[entry_index].entity_hash,
 *                           entity_freq=self._entries[entry_index].freq,
 *                           entity_vector=self._vectors_table[             # <<<<<<<<<<<<<<
 *                               self._entries[entry_index].vector_index
 *                           ],
*/
      __pyx_t_16 = __pyx_convert_vector_to_py_float((__pyx_v_self->_vectors_table[(__pyx_v_self->_entries[__pyx_t_14]).vector_index])); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);

      /* "spacy/kb/kb_in_memory.pyx":280
 *                               self._entries[entry_index].vector_index
 *                           ],
 *                           alias_hash=alias_hash,             # <<<<<<<<<<<<<<
 *                           prior_prob=prior_prob)
 *                 for (entry_index, prior_prob) in zip(
*/
      __pyx_t_17 = __Pyx_PyLong_From_uint64_t(__pyx_v_alias_hash); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);

      /* "spacy/kb/kb_in_memory.pyx":281
 *                           ],
 *                           alias_hash=alias_hash,
 *                           prior_prob=prior_prob)             # <<<<<<<<<<<<<<
 *                 for (entry_index, prior_prob) in zip(
 *                     alias_entry.entry_indices, alias_entry.probs
*/
      __pyx_t_10 = 1;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
        assert(__pyx_t_8);
        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(__pyx__function);
        __Pyx_DECREF_SET(__pyx_t_9, __pyx__function);
        __pyx_t_10 = 0;
      }
      #endif
      {
        PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 6 : 0)] = {__pyx_t_8, NULL};
        __pyx_t_18 = __Pyx_MakeVectorcallBuilderKwds(6); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 274, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_kb, ((PyObject *)__pyx_v_self), __pyx_t_18, __pyx_callargs+1, 0) < 0) __PYX_ERR(0, 274, __pyx_L1_error)
        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_entity_hash, __pyx_t_6, __pyx_t_18, __pyx_callargs+1, 1) < 0) __PYX_ERR(0, 274, __pyx_L1_error)
        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_entity_freq, __pyx_t_15, __pyx_t_18, __pyx_callargs+1, 2) < 0) __PYX_ERR(0, 274, __pyx_L1_error)
        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_entity_vector, __pyx_t_16, __pyx_t_18, __pyx_callargs+1, 3) < 0) __PYX_ERR(0, 274, __pyx_L1_error)
        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_alias_hash, __pyx_t_17, __pyx_t_18, __pyx_callargs+1, 4) < 0) __PYX_ERR(0, 274, __pyx_L1_error)
        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_prior_prob, __pyx_v_prior_prob, __pyx_t_18, __pyx_callargs+1, 5) < 0) __PYX_ERR(0, 274, __pyx_L1_error)
        __pyx_t_5 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_9, __pyx_callargs+__pyx_t_10, (1-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_18);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "spacy/kb/kb_in_memory.pyx":285
 *                     alias_entry.entry_indices, alias_entry.probs
 *                 )
 *                 if entry_index != 0]             # <<<<<<<<<<<<<<
 * 
 *     def get_vector(self, str entity):
*/
    }

    /* "spacy/kb/kb_in_memory.pyx":282
 *                           alias_hash=alias_hash,
 *                           prior_prob=prior_prob)
 *                 for (entry_index, prior_prob) in zip(             # <<<<<<<<<<<<<<
 *                     alias_entry.entry_indices, alias_entry.probs
 *                 )
*/
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pyx":261
 *         return self.get_alias_candidates(mention.text)  # type: ignore
 * 
 *     def get_alias_candidates(self, str alias) -> Iterable[Candidate]:             # <<<<<<<<<<<<<<
 *         """
 *         Return candidate entities for an alias. Each candidate defines the
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.get_alias_candidates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_entry_index);
  __Pyx_XDECREF(__pyx_v_prior_prob);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":287
 *                 if entry_index != 0]
 * 
 *     def get_vector(self, str entity):             # <<<<<<<<<<<<<<
 *         cdef hash_t entity_hash = self.vocab.strings[entity]
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_37get_vector(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_36get_vector, "InMemoryLookupKB.get_vector(self, str entity)");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_37get_vector = {"get_vector", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_37get_vector, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_36get_vector};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_37get_vector(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_entity = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_vector (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_entity,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 287, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 287, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "get_vector", 0) < 0) __PYX_ERR(0, 287, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("get_vector", 1, 1, 1, i); __PYX_ERR(0, 287, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 287, __pyx_L3_error)
    }
    __pyx_v_entity = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_vector", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 287, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.get_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_entity), (&PyUnicode_Type), 1, "entity", 1))) __PYX_ERR(0, 287, __pyx_L1_error)
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_36get_vector(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self), __pyx_v_entity);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_36get_vector(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_entity) {
  __pyx_t_5spacy_8typedefs_hash_t __pyx_v_entity_hash;
  PyObject *__pyx_v_entry_index = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_t_2;
  int __pyx_t_3;
  std::vector<struct __pyx_t_5spacy_7structs_KBEntryC> ::size_type __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_vector", 0);

  /* "spacy/kb/kb_in_memory.pyx":288
 * 
 *     def get_vector(self, str entity):
 *         cdef hash_t entity_hash = self.vocab.strings[entity]             # <<<<<<<<<<<<<<
 * 
 *         # Return an empty list if this entity is unknown in this KB
*/
  __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->__pyx_base.vocab->strings), __pyx_v_entity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyLong_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_entity_hash = __pyx_t_2;

  /* "spacy/kb/kb_in_memory.pyx":291
 * 
 *         # Return an empty list if this entity is unknown in this KB
 *         if entity_hash not in self._entry_index:             # <<<<<<<<<<<<<<
 *             return [0] * self.entity_vector_length
 *         entry_index = self._entry_index[entity_hash]
*/
  __pyx_t_1 = __Pyx_PyLong_From_uint64_t(__pyx_v_entity_hash); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, ((PyObject *)__pyx_v_self->_entry_index), Py_NE)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "spacy/kb/kb_in_memory.pyx":292
 *         # Return an empty list if this entity is unknown in this KB
 *         if entity_hash not in self._entry_index:
 *             return [0] * self.entity_vector_length             # <<<<<<<<<<<<<<
 *         entry_index = self._entry_index[entity_hash]
 * 
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyList_New(1 * ((__pyx_v_self->__pyx_base.entity_vector_length<0) ? 0:__pyx_v_self->__pyx_base.entity_vector_length)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_self->__pyx_base.entity_vector_length; __pyx_temp++) {
        __Pyx_INCREF(__pyx_mstate_global->__pyx_int_0);
        __Pyx_GIVEREF(__pyx_mstate_global->__pyx_int_0);
        if (__Pyx_PyList_SET_ITEM(__pyx_t_1, __pyx_temp, __pyx_mstate_global->__pyx_int_0) != (0)) __PYX_ERR(0, 292, __pyx_L1_error);
      }
    }
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "spacy/kb/kb_in_memory.pyx":291
 * 
 *         # Return an empty list if this entity is unknown in this KB
 *         if entity_hash not in self._entry_index:             # <<<<<<<<<<<<<<
 *             return [0] * self.entity_vector_length
 *         entry_index = self._entry_index[entity_hash]
*/
  }

  /* "spacy/kb/kb_in_memory.pyx":293
 *         if entity_hash not in self._entry_index:
 *             return [0] * self.entity_vector_length
 *         entry_index = self._entry_index[entity_hash]             # <<<<<<<<<<<<<<
 * 
 *         return self._vectors_table[self._entries[entry_index].vector_index]
*/
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->_entry_index), __pyx_v_entity_hash, __pyx_t_5spacy_8typedefs_hash_t, 0, __Pyx_PyLong_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_entry_index = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":295
 *         entry_index = self._entry_index[entity_hash]
 * 
 *         return self._vectors_table[self._entries[entry_index].vector_index]             # <<<<<<<<<<<<<<
 * 
 *     def get_prior_prob(self, str entity, str alias):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyLong_As_size_t(__pyx_v_entry_index); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L1_error)
  __pyx_t_1 = __pyx_convert_vector_to_py_float((__pyx_v_self->_vectors_table[(__pyx_v_self->_entries[__pyx_t_4]).vector_index])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pyx":287
 *                 if entry_index != 0]
 * 
 *     def get_vector(self, str entity):             # <<<<<<<<<<<<<<
 *         cdef hash_t entity_hash = self.vocab.strings[entity]
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.get_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_entry_index);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":297
 *         return self._vectors_table[self._entries[entry_index].vector_index]
 * 
 *     def get_prior_prob(self, str entity, str alias):             # <<<<<<<<<<<<<<
 *         """ Return the prior probability of a given alias being linked to a
 *         given entity, or return 0.0 when this combination is not known in the
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_39get_prior_prob(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_38get_prior_prob, "InMemoryLookupKB.get_prior_prob(self, str entity, str alias)\nReturn the prior probability of a given alias being linked to a\ngiven entity, or return 0.0 when this combination is not known in the\nknowledge base.");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_39get_prior_prob = {"get_prior_prob", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_39get_prior_prob, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_38get_prior_prob};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_39get_prior_prob(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_entity = 0;
  PyObject *__pyx_v_alias = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_prior_prob (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_entity,&__pyx_mstate_global->__pyx_n_u_alias,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 297, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 297, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 297, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "get_prior_prob", 0) < 0) __PYX_ERR(0, 297, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("get_prior_prob", 1, 2, 2, i); __PYX_ERR(0, 297, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 297, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 297, __pyx_L3_error)
    }
    __pyx_v_entity = ((PyObject*)values[0]);
    __pyx_v_alias = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_prior_prob", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 297, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.get_prior_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_entity), (&PyUnicode_Type), 1, "entity", 1))) __PYX_ERR(0, 297, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_alias), (&PyUnicode_Type), 1, "alias", 1))) __PYX_ERR(0, 297, __pyx_L1_error)
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_38get_prior_prob(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self), __pyx_v_entity, __pyx_v_alias);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_38get_prior_prob(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, PyObject *__pyx_v_entity, PyObject *__pyx_v_alias) {
  __pyx_t_5spacy_8typedefs_hash_t __pyx_v_alias_hash;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_v_entity_hash;
  int64_t __pyx_v_alias_index;
  PyObject *__pyx_v_entry_index = NULL;
  struct __pyx_t_5spacy_7structs_AliasC __pyx_v_alias_entry;
  PyObject *__pyx_v_prior_prob = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  void *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *(*__pyx_t_13)(PyObject *);
  std::vector<struct __pyx_t_5spacy_7structs_KBEntryC> ::size_type __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_prior_prob", 0);

  /* "spacy/kb/kb_in_memory.pyx":301
 *         given entity, or return 0.0 when this combination is not known in the
 *         knowledge base."""
 *         cdef hash_t alias_hash = self.vocab.strings[alias]             # <<<<<<<<<<<<<<
 *         cdef hash_t entity_hash = self.vocab.strings[entity]
 * 
*/
  __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->__pyx_base.vocab->strings), __pyx_v_alias); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyLong_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_alias_hash = __pyx_t_2;

  /* "spacy/kb/kb_in_memory.pyx":302
 *         knowledge base."""
 *         cdef hash_t alias_hash = self.vocab.strings[alias]
 *         cdef hash_t entity_hash = self.vocab.strings[entity]             # <<<<<<<<<<<<<<
 * 
 *         if entity_hash not in self._entry_index or alias_hash not in self._alias_index:
*/
  __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self->__pyx_base.vocab->strings), __pyx_v_entity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyLong_As_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_entity_hash = __pyx_t_2;

  /* "spacy/kb/kb_in_memory.pyx":304
 *         cdef hash_t entity_hash = self.vocab.strings[entity]
 * 
 *         if entity_hash not in self._entry_index or alias_hash not in self._alias_index:             # <<<<<<<<<<<<<<
 *             return 0.0
 * 
*/
  __pyx_t_1 = __Pyx_PyLong_From_uint64_t(__pyx_v_entity_hash); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, ((PyObject *)__pyx_v_self->_entry_index), Py_NE)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyLong_From_uint64_t(__pyx_v_alias_hash); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, ((PyObject *)__pyx_v_self->_alias_index), Py_NE)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "spacy/kb/kb_in_memory.pyx":305
 * 
 *         if entity_hash not in self._entry_index or alias_hash not in self._alias_index:
 *             return 0.0             # <<<<<<<<<<<<<<
 * 
 *         alias_index = <int64_t>self._alias_index.get(alias_hash)
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_float_0_0);
    __pyx_r = __pyx_mstate_global->__pyx_float_0_0;
    goto __pyx_L0;

    /* "spacy/kb/kb_in_memory.pyx":304
 *         cdef hash_t entity_hash = self.vocab.strings[entity]
 * 
 *         if entity_hash not in self._entry_index or alias_hash not in self._alias_index:             # <<<<<<<<<<<<<<
 *             return 0.0
 * 
*/
  }

  /* "spacy/kb/kb_in_memory.pyx":307
 *             return 0.0
 * 
 *         alias_index = <int64_t>self._alias_index.get(alias_hash)             # <<<<<<<<<<<<<<
 *         entry_index = self._entry_index[entity_hash]
 * 
*/
  __pyx_t_5 = ((struct __pyx_vtabstruct_7preshed_4maps_PreshMap *)__pyx_v_self->_alias_index->__pyx_vtab)->get(__pyx_v_self->_alias_index, __pyx_v_alias_hash); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L1_error)
  __pyx_v_alias_index = ((int64_t)__pyx_t_5);

  /* "spacy/kb/kb_in_memory.pyx":308
 * 
 *         alias_index = <int64_t>self._alias_index.get(alias_hash)
 *         entry_index = self._entry_index[entity_hash]             # <<<<<<<<<<<<<<
 * 
 *         alias_entry = self._aliases_table[alias_index]
*/
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->_entry_index), __pyx_v_entity_hash, __pyx_t_5spacy_8typedefs_hash_t, 0, __Pyx_PyLong_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_entry_index = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":310
 *         entry_index = self._entry_index[entity_hash]
 * 
 *         alias_entry = self._aliases_table[alias_index]             # <<<<<<<<<<<<<<
 *         for (entry_index, prior_prob) in zip(
 *             alias_entry.entry_indices, alias_entry.probs
*/
  __pyx_v_alias_entry = (__pyx_v_self->_aliases_table[__pyx_v_alias_index]);

  /* "spacy/kb/kb_in_memory.pyx":311
 * 
 *         alias_entry = self._aliases_table[alias_index]
 *         for (entry_index, prior_prob) in zip(             # <<<<<<<<<<<<<<
 *             alias_entry.entry_indices, alias_entry.probs
 *         ):
*/
  __pyx_t_6 = NULL;
  __Pyx_INCREF(__pyx_builtin_zip);
  __pyx_t_7 = __pyx_builtin_zip; 

  /* "spacy/kb/kb_in_memory.pyx":312
 *         alias_entry = self._aliases_table[alias_index]
 *         for (entry_index, prior_prob) in zip(
 *             alias_entry.entry_indices, alias_entry.probs             # <<<<<<<<<<<<<<
 *         ):
 *             if self._entries[entry_index].entity_hash == entity_hash:
*/
  __pyx_t_8 = __pyx_convert_vector_to_py_int64_t(__pyx_v_alias_entry.entry_indices); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __pyx_convert_vector_to_py_float(__pyx_v_alias_entry.probs); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = 1;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_t_8, __pyx_t_9};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_10, (3-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }

  /* "spacy/kb/kb_in_memory.pyx":311
 * 
 *         alias_entry = self._aliases_table[alias_index]
 *         for (entry_index, prior_prob) in zip(             # <<<<<<<<<<<<<<
 *             alias_entry.entry_indices, alias_entry.probs
 *         ):
*/
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_7 = __pyx_t_1; __Pyx_INCREF(__pyx_t_7);
    __pyx_t_11 = 0;
    __pyx_t_12 = NULL;
  } else {
    __pyx_t_11 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_7); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 311, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_12)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_7);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 311, __pyx_L1_error)
          #endif
          if (__pyx_t_11 >= __pyx_temp) break;
        }
        __pyx_t_1 = __Pyx_PyList_GetItemRef(__pyx_t_7, __pyx_t_11);
        ++__pyx_t_11;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_7);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 311, __pyx_L1_error)
          #endif
          if (__pyx_t_11 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_11));
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_7, __pyx_t_11);
        #endif
        ++__pyx_t_11;
      }
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
    } else {
      __pyx_t_1 = __pyx_t_12(__pyx_t_7);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 311, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_1);
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 311, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1);
        __Pyx_INCREF(__pyx_t_8);
      } else {
        __pyx_t_9 = __Pyx_PyList_GetItemRef(sequence, 0);
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 311, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_9);
        __pyx_t_8 = __Pyx_PyList_GetItemRef(sequence, 1);
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 311, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_8);
      }
      #else
      __pyx_t_9 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 311, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 311, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 311, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_13 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);
      index = 0; __pyx_t_9 = __pyx_t_13(__pyx_t_6); if (unlikely(!__pyx_t_9)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_8 = __pyx_t_13(__pyx_t_6); if (unlikely(!__pyx_t_8)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_6), 2) < 0) __PYX_ERR(0, 311, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L9_unpacking_done;
      __pyx_L8_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 311, __pyx_L1_error)
      __pyx_L9_unpacking_done:;
    }
    __Pyx_DECREF_SET(__pyx_v_entry_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_prior_prob, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "spacy/kb/kb_in_memory.pyx":314
 *             alias_entry.entry_indices, alias_entry.probs
 *         ):
 *             if self._entries[entry_index].entity_hash == entity_hash:             # <<<<<<<<<<<<<<
 *                 return prior_prob
 * 
*/
    __pyx_t_14 = __Pyx_PyLong_As_size_t(__pyx_v_entry_index); if (unlikely((__pyx_t_14 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
    __pyx_t_3 = ((__pyx_v_self->_entries[__pyx_t_14]).entity_hash == __pyx_v_entity_hash);
    if (__pyx_t_3) {

      /* "spacy/kb/kb_in_memory.pyx":315
 *         ):
 *             if self._entries[entry_index].entity_hash == entity_hash:
 *                 return prior_prob             # <<<<<<<<<<<<<<
 * 
 *         return 0.0
*/
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_prior_prob);
      __pyx_r = __pyx_v_prior_prob;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L0;

      /* "spacy/kb/kb_in_memory.pyx":314
 *             alias_entry.entry_indices, alias_entry.probs
 *         ):
 *             if self._entries[entry_index].entity_hash == entity_hash:             # <<<<<<<<<<<<<<
 *                 return prior_prob
 * 
*/
    }

    /* "spacy/kb/kb_in_memory.pyx":311
 * 
 *         alias_entry = self._aliases_table[alias_index]
 *         for (entry_index, prior_prob) in zip(             # <<<<<<<<<<<<<<
 *             alias_entry.entry_indices, alias_entry.probs
 *         ):
*/
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "spacy/kb/kb_in_memory.pyx":317
 *                 return prior_prob
 * 
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 *     def to_bytes(self, **kwargs):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_mstate_global->__pyx_float_0_0);
  __pyx_r = __pyx_mstate_global->__pyx_float_0_0;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pyx":297
 *         return self._vectors_table[self._entries[entry_index].vector_index]
 * 
 *     def get_prior_prob(self, str entity, str alias):             # <<<<<<<<<<<<<<
 *         """ Return the prior probability of a given alias being linked to a
 *         given entity, or return 0.0 when this combination is not known in the
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.get_prior_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_entry_index);
  __Pyx_XDECREF(__pyx_v_prior_prob);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":319
 *         return 0.0
 * 
 *     def to_bytes(self, **kwargs):             # <<<<<<<<<<<<<<
 *         """Serialize the current state to a binary string.
 *         """
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_41to_bytes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_40to_bytes, "InMemoryLookupKB.to_bytes(self, **kwargs)\nSerialize the current state to a binary string.\n        ");
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_41to_bytes = {"to_bytes", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_41to_bytes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_40to_bytes};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_41to_bytes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_bytes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("to_bytes", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (__pyx_kwds_len > 0) {
    if (unlikely(__Pyx_CheckKeywordStrings("to_bytes", __pyx_kwds) == -1)) return NULL;
  }
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_40to_bytes(((struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":322
 *         """Serialize the current state to a binary string.
 *         """
 *         def serialize_header():             # <<<<<<<<<<<<<<
 *             header = (
 *                 self.get_size_entities(),
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_1serialize_header(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_1serialize_header = {"serialize_header", (PyCFunction)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_1serialize_header, METH_NOARGS, 0};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_1serialize_header(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("serialize_header (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_serialize_header(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_serialize_header(PyObject *__pyx_self) {
  struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes *__pyx_cur_scope;
  struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes *__pyx_outer_scope;
  PyObject *__pyx_v_header = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("serialize_header", 0);
  __pyx_outer_scope = (struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "spacy/kb/kb_in_memory.pyx":324
 *         def serialize_header():
 *             header = (
 *                 self.get_size_entities(),             # <<<<<<<<<<<<<<
 *                 self.get_size_aliases(),
 *                 self.entity_vector_length
*/
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 324, __pyx_L1_error) }
  __pyx_t_2 = ((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_size_entities, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }

  /* "spacy/kb/kb_in_memory.pyx":325
 *             header = (
 *                 self.get_size_entities(),
 *                 self.get_size_aliases(),             # <<<<<<<<<<<<<<
 *                 self.entity_vector_length
 *             )
*/
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 325, __pyx_L1_error) }
  __pyx_t_4 = ((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_size_aliases, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }

  /* "spacy/kb/kb_in_memory.pyx":326
 *                 self.get_size_entities(),
 *                 self.get_size_aliases(),
 *                 self.entity_vector_length             # <<<<<<<<<<<<<<
 *             )
 *             return srsly.json_dumps(header)
*/
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 326, __pyx_L1_error) }
  __pyx_t_4 = __Pyx_PyLong_From_int64_t(__pyx_cur_scope->__pyx_v_self->__pyx_base.entity_vector_length); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "spacy/kb/kb_in_memory.pyx":324
 *         def serialize_header():
 *             header = (
 *                 self.get_size_entities(),             # <<<<<<<<<<<<<<
 *                 self.get_size_aliases(),
 *                 self.entity_vector_length
*/
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1) != (0)) __PYX_ERR(0, 324, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2) != (0)) __PYX_ERR(0, 324, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4) != (0)) __PYX_ERR(0, 324, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_v_header = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "spacy/kb/kb_in_memory.pyx":328
 *                 self.entity_vector_length
 *             )
 *             return srsly.json_dumps(header)             # <<<<<<<<<<<<<<
 * 
 *         def serialize_entries():
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_srsly); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_json_dumps); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    assert(__pyx_t_4);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_1, __pyx__function);
    __pyx_t_3 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_header};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  }
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pyx":322
 *         """Serialize the current state to a binary string.
 *         """
 *         def serialize_header():             # <<<<<<<<<<<<<<
 *             header = (
 *                 self.get_size_entities(),
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.to_bytes.serialize_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_header);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":330
 *             return srsly.json_dumps(header)
 * 
 *         def serialize_entries():             # <<<<<<<<<<<<<<
 *             i = 1
 *             tuples = []
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_3serialize_entries(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_3serialize_entries = {"serialize_entries", (PyCFunction)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_3serialize_entries, METH_NOARGS, 0};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_3serialize_entries(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("serialize_entries (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_2serialize_entries(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":334
 *             tuples = []
 *             for entry_hash, entry_index in sorted(
 *                 self._entry_index.items(), key=lambda x: x[1]             # <<<<<<<<<<<<<<
 *             ):
 *                 entry = self._entries[entry_index]
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_17serialize_entries_lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_17serialize_entries_lambda = {"lambda", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_17serialize_entries_lambda, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_17serialize_entries_lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_x = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_x,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 334, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 334, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "lambda", 0) < 0) __PYX_ERR(0, 334, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("lambda", 1, 1, 1, i); __PYX_ERR(0, 334, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 334, __pyx_L3_error)
    }
    __pyx_v_x = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 334, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.to_bytes.serialize_entries.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, __pyx_v_x);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.to_bytes.serialize_entries.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":330
 *             return srsly.json_dumps(header)
 * 
 *         def serialize_entries():             # <<<<<<<<<<<<<<
 *             i = 1
 *             tuples = []
*/

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_2serialize_entries(PyObject *__pyx_self) {
  struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes *__pyx_cur_scope;
  struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes *__pyx_outer_scope;
  long __pyx_v_i;
  PyObject *__pyx_v_tuples = NULL;
  PyObject *__pyx_v_entry_hash = NULL;
  PyObject *__pyx_v_entry_index = NULL;
  struct __pyx_t_5spacy_7structs_KBEntryC __pyx_v_entry;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *(*__pyx_t_10)(PyObject *);
  std::vector<struct __pyx_t_5spacy_7structs_KBEntryC> ::size_type __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("serialize_entries", 0);
  __pyx_outer_scope = (struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "spacy/kb/kb_in_memory.pyx":331
 * 
 *         def serialize_entries():
 *             i = 1             # <<<<<<<<<<<<<<
 *             tuples = []
 *             for entry_hash, entry_index in sorted(
*/
  __pyx_v_i = 1;

  /* "spacy/kb/kb_in_memory.pyx":332
 *         def serialize_entries():
 *             i = 1
 *             tuples = []             # <<<<<<<<<<<<<<
 *             for entry_hash, entry_index in sorted(
 *                 self._entry_index.items(), key=lambda x: x[1]
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tuples = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":333
 *             i = 1
 *             tuples = []
 *             for entry_hash, entry_index in sorted(             # <<<<<<<<<<<<<<
 *                 self._entry_index.items(), key=lambda x: x[1]
 *             ):
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF(__pyx_builtin_sorted);
  __pyx_t_3 = __pyx_builtin_sorted; 

  /* "spacy/kb/kb_in_memory.pyx":334
 *             tuples = []
 *             for entry_hash, entry_index in sorted(
 *                 self._entry_index.items(), key=lambda x: x[1]             # <<<<<<<<<<<<<<
 *             ):
 *                 entry = self._entries[entry_index]
*/
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 334, __pyx_L1_error) }
  __pyx_t_5 = ((PyObject *)__pyx_cur_scope->__pyx_v_self->_entry_index);
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_6 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_items, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_17serialize_entries_lambda, 0, __pyx_mstate_global->__pyx_n_u_to_bytes_locals_serialize_entrie, NULL, __pyx_mstate_global->__pyx_n_u_spacy_kb_kb_in_memory, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = 1;
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, __pyx_t_4};
    __pyx_t_7 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_key, __pyx_t_5, __pyx_t_7, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_3, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }

  /* "spacy/kb/kb_in_memory.pyx":333
 *             i = 1
 *             tuples = []
 *             for entry_hash, entry_index in sorted(             # <<<<<<<<<<<<<<
 *                 self._entry_index.items(), key=lambda x: x[1]
 *             ):
*/
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 333, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 333, __pyx_L1_error)
          #endif
          if (__pyx_t_8 >= __pyx_temp) break;
        }
        __pyx_t_1 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_8);
        ++__pyx_t_8;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 333, __pyx_L1_error)
          #endif
          if (__pyx_t_8 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_8));
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_8);
        #endif
        ++__pyx_t_8;
      }
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
    } else {
      __pyx_t_1 = __pyx_t_9(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 333, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_1);
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 333, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0);
        __Pyx_INCREF(__pyx_t_7);
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1);
        __Pyx_INCREF(__pyx_t_5);
      } else {
        __pyx_t_7 = __Pyx_PyList_GetItemRef(sequence, 0);
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 333, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_7);
        __pyx_t_5 = __Pyx_PyList_GetItemRef(sequence, 1);
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 333, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_5);
      }
      #else
      __pyx_t_7 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 333, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 333, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 333, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_10 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4);
      index = 0; __pyx_t_7 = __pyx_t_10(__pyx_t_4); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_5 = __pyx_t_10(__pyx_t_4); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_4), 2) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 333, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_entry_hash, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_entry_index, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "spacy/kb/kb_in_memory.pyx":336
 *                 self._entry_index.items(), key=lambda x: x[1]
 *             ):
 *                 entry = self._entries[entry_index]             # <<<<<<<<<<<<<<
 *                 assert entry.entity_hash == entry_hash
 *                 assert entry_index == i
*/
    if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 336, __pyx_L1_error) }
    __pyx_t_11 = __Pyx_PyLong_As_size_t(__pyx_v_entry_index); if (unlikely((__pyx_t_11 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
    __pyx_v_entry = (__pyx_cur_scope->__pyx_v_self->_entries[__pyx_t_11]);

    /* "spacy/kb/kb_in_memory.pyx":337
 *             ):
 *                 entry = self._entries[entry_index]
 *                 assert entry.entity_hash == entry_hash             # <<<<<<<<<<<<<<
 *                 assert entry_index == i
 *                 tuples.append((entry.entity_hash, entry.freq, entry.vector_index))
*/
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(__pyx_assertions_enabled())) {
      __pyx_t_1 = __Pyx_PyLong_From_uint64_t(__pyx_v_entry.entity_hash); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_v_entry_hash, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_12)) {
        __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
        __PYX_ERR(0, 337, __pyx_L1_error)
      }
    }
    #else
    if ((1)); else __PYX_ERR(0, 337, __pyx_L1_error)
    #endif

    /* "spacy/kb/kb_in_memory.pyx":338
 *                 entry = self._entries[entry_index]
 *                 assert entry.entity_hash == entry_hash
 *                 assert entry_index == i             # <<<<<<<<<<<<<<
 *                 tuples.append((entry.entity_hash, entry.freq, entry.vector_index))
 *                 i = i + 1
*/
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(__pyx_assertions_enabled())) {
      __pyx_t_5 = __Pyx_PyLong_From_long(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = PyObject_RichCompare(__pyx_v_entry_index, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_12)) {
        __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
        __PYX_ERR(0, 338, __pyx_L1_error)
      }
    }
    #else
    if ((1)); else __PYX_ERR(0, 338, __pyx_L1_error)
    #endif

    /* "spacy/kb/kb_in_memory.pyx":339
 *                 assert entry.entity_hash == entry_hash
 *                 assert entry_index == i
 *                 tuples.append((entry.entity_hash, entry.freq, entry.vector_index))             # <<<<<<<<<<<<<<
 *                 i = i + 1
 *             return srsly.json_dumps(tuples)
*/
    __pyx_t_1 = __Pyx_PyLong_From_uint64_t(__pyx_v_entry.entity_hash); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_entry.freq); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyLong_From_int32_t(__pyx_v_entry.vector_index); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1) != (0)) __PYX_ERR(0, 339, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5) != (0)) __PYX_ERR(0, 339, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_7);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_7) != (0)) __PYX_ERR(0, 339, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_t_7 = 0;
    __pyx_t_13 = __Pyx_PyList_Append(__pyx_v_tuples, __pyx_t_4); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "spacy/kb/kb_in_memory.pyx":340
 *                 assert entry_index == i
 *                 tuples.append((entry.entity_hash, entry.freq, entry.vector_index))
 *                 i = i + 1             # <<<<<<<<<<<<<<
 *             return srsly.json_dumps(tuples)
 * 
*/
    __pyx_v_i = (__pyx_v_i + 1);

    /* "spacy/kb/kb_in_memory.pyx":333
 *             i = 1
 *             tuples = []
 *             for entry_hash, entry_index in sorted(             # <<<<<<<<<<<<<<
 *                 self._entry_index.items(), key=lambda x: x[1]
 *             ):
*/
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "spacy/kb/kb_in_memory.pyx":341
 *                 tuples.append((entry.entity_hash, entry.freq, entry.vector_index))
 *                 i = i + 1
 *             return srsly.json_dumps(tuples)             # <<<<<<<<<<<<<<
 * 
 *         def serialize_aliases():
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_srsly); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_json_dumps); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_6 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    assert(__pyx_t_4);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
    __pyx_t_6 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_tuples};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pyx":330
 *             return srsly.json_dumps(header)
 * 
 *         def serialize_entries():             # <<<<<<<<<<<<<<
 *             i = 1
 *             tuples = []
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.to_bytes.serialize_entries", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tuples);
  __Pyx_XDECREF(__pyx_v_entry_hash);
  __Pyx_XDECREF(__pyx_v_entry_index);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":343
 *             return srsly.json_dumps(tuples)
 * 
 *         def serialize_aliases():             # <<<<<<<<<<<<<<
 *             i = 1
 *             headers = []
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_5serialize_aliases(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_5serialize_aliases = {"serialize_aliases", (PyCFunction)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_5serialize_aliases, METH_NOARGS, 0};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_5serialize_aliases(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("serialize_aliases (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_4serialize_aliases(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":349
 *             probs_lists = []
 *             for alias_hash, alias_index in sorted(
 *                 self._alias_index.items(), key=lambda x: x[1]             # <<<<<<<<<<<<<<
 *             ):
 *                 alias = self._aliases_table[alias_index]
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_17serialize_aliases_lambda1(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_17serialize_aliases_lambda1 = {"lambda1", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_17serialize_aliases_lambda1, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_17serialize_aliases_lambda1(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_x = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_x,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 349, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 349, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "lambda1", 0) < 0) __PYX_ERR(0, 349, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("lambda1", 1, 1, 1, i); __PYX_ERR(0, 349, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 349, __pyx_L3_error)
    }
    __pyx_v_x = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda1", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 349, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.to_bytes.serialize_aliases.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda1(__pyx_self, __pyx_v_x);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda1", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.to_bytes.serialize_aliases.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":343
 *             return srsly.json_dumps(tuples)
 * 
 *         def serialize_aliases():             # <<<<<<<<<<<<<<
 *             i = 1
 *             headers = []
*/

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_4serialize_aliases(PyObject *__pyx_self) {
  struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes *__pyx_cur_scope;
  struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes *__pyx_outer_scope;
  long __pyx_v_i;
  PyObject *__pyx_v_headers = NULL;
  PyObject *__pyx_v_indices_lists = NULL;
  PyObject *__pyx_v_probs_lists = NULL;
  PyObject *__pyx_v_alias_hash = NULL;
  PyObject *__pyx_v_alias_index = NULL;
  struct __pyx_t_5spacy_7structs_AliasC __pyx_v_alias;
  Py_ssize_t __pyx_v_candidate_length;
  PyObject *__pyx_v_headers_dump = NULL;
  PyObject *__pyx_v_indices_dump = NULL;
  PyObject *__pyx_v_probs_dump = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *(*__pyx_t_10)(PyObject *);
  std::vector<struct __pyx_t_5spacy_7structs_AliasC> ::size_type __pyx_t_11;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("serialize_aliases", 0);
  __pyx_outer_scope = (struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "spacy/kb/kb_in_memory.pyx":344
 * 
 *         def serialize_aliases():
 *             i = 1             # <<<<<<<<<<<<<<
 *             headers = []
 *             indices_lists = []
*/
  __pyx_v_i = 1;

  /* "spacy/kb/kb_in_memory.pyx":345
 *         def serialize_aliases():
 *             i = 1
 *             headers = []             # <<<<<<<<<<<<<<
 *             indices_lists = []
 *             probs_lists = []
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_headers = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":346
 *             i = 1
 *             headers = []
 *             indices_lists = []             # <<<<<<<<<<<<<<
 *             probs_lists = []
 *             for alias_hash, alias_index in sorted(
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_indices_lists = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":347
 *             headers = []
 *             indices_lists = []
 *             probs_lists = []             # <<<<<<<<<<<<<<
 *             for alias_hash, alias_index in sorted(
 *                 self._alias_index.items(), key=lambda x: x[1]
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_probs_lists = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":348
 *             indices_lists = []
 *             probs_lists = []
 *             for alias_hash, alias_index in sorted(             # <<<<<<<<<<<<<<
 *                 self._alias_index.items(), key=lambda x: x[1]
 *             ):
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF(__pyx_builtin_sorted);
  __pyx_t_3 = __pyx_builtin_sorted; 

  /* "spacy/kb/kb_in_memory.pyx":349
 *             probs_lists = []
 *             for alias_hash, alias_index in sorted(
 *                 self._alias_index.items(), key=lambda x: x[1]             # <<<<<<<<<<<<<<
 *             ):
 *                 alias = self._aliases_table[alias_index]
*/
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 349, __pyx_L1_error) }
  __pyx_t_5 = ((PyObject *)__pyx_cur_scope->__pyx_v_self->_alias_index);
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_6 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_items, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_17serialize_aliases_lambda1, 0, __pyx_mstate_global->__pyx_n_u_to_bytes_locals_serialize_aliase, NULL, __pyx_mstate_global->__pyx_n_u_spacy_kb_kb_in_memory, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[1])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = 1;
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, __pyx_t_4};
    __pyx_t_7 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_key, __pyx_t_5, __pyx_t_7, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 348, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_3, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }

  /* "spacy/kb/kb_in_memory.pyx":348
 *             indices_lists = []
 *             probs_lists = []
 *             for alias_hash, alias_index in sorted(             # <<<<<<<<<<<<<<
 *                 self._alias_index.items(), key=lambda x: x[1]
 *             ):
*/
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 348, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 348, __pyx_L1_error)
          #endif
          if (__pyx_t_8 >= __pyx_temp) break;
        }
        __pyx_t_1 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_8);
        ++__pyx_t_8;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 348, __pyx_L1_error)
          #endif
          if (__pyx_t_8 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_8));
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_8);
        #endif
        ++__pyx_t_8;
      }
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
    } else {
      __pyx_t_1 = __pyx_t_9(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 348, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_1);
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 348, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0);
        __Pyx_INCREF(__pyx_t_7);
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1);
        __Pyx_INCREF(__pyx_t_5);
      } else {
        __pyx_t_7 = __Pyx_PyList_GetItemRef(sequence, 0);
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 348, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_7);
        __pyx_t_5 = __Pyx_PyList_GetItemRef(sequence, 1);
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 348, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_5);
      }
      #else
      __pyx_t_7 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_10 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4);
      index = 0; __pyx_t_7 = __pyx_t_10(__pyx_t_4); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_5 = __pyx_t_10(__pyx_t_4); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_4), 2) < 0) __PYX_ERR(0, 348, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 348, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_alias_hash, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_alias_index, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "spacy/kb/kb_in_memory.pyx":351
 *                 self._alias_index.items(), key=lambda x: x[1]
 *             ):
 *                 alias = self._aliases_table[alias_index]             # <<<<<<<<<<<<<<
 *                 assert alias_index == i
 *                 candidate_length = len(alias.entry_indices)
*/
    if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 351, __pyx_L1_error) }
    __pyx_t_11 = __Pyx_PyLong_As_size_t(__pyx_v_alias_index); if (unlikely((__pyx_t_11 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 351, __pyx_L1_error)
    __pyx_v_alias = (__pyx_cur_scope->__pyx_v_self->_aliases_table[__pyx_t_11]);

    /* "spacy/kb/kb_in_memory.pyx":352
 *             ):
 *                 alias = self._aliases_table[alias_index]
 *                 assert alias_index == i             # <<<<<<<<<<<<<<
 *                 candidate_length = len(alias.entry_indices)
 *                 headers.append((alias_hash, candidate_length))
*/
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(__pyx_assertions_enabled())) {
      __pyx_t_1 = __Pyx_PyLong_From_long(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_alias_index, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_12)) {
        __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
        __PYX_ERR(0, 352, __pyx_L1_error)
      }
    }
    #else
    if ((1)); else __PYX_ERR(0, 352, __pyx_L1_error)
    #endif

    /* "spacy/kb/kb_in_memory.pyx":353
 *                 alias = self._aliases_table[alias_index]
 *                 assert alias_index == i
 *                 candidate_length = len(alias.entry_indices)             # <<<<<<<<<<<<<<
 *                 headers.append((alias_hash, candidate_length))
 *                 indices_lists.append(alias.entry_indices)
*/
    __pyx_t_5 = __pyx_convert_vector_to_py_int64_t(__pyx_v_alias.entry_indices); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_13 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_candidate_length = __pyx_t_13;

    /* "spacy/kb/kb_in_memory.pyx":354
 *                 assert alias_index == i
 *                 candidate_length = len(alias.entry_indices)
 *                 headers.append((alias_hash, candidate_length))             # <<<<<<<<<<<<<<
 *                 indices_lists.append(alias.entry_indices)
 *                 probs_lists.append(alias.probs)
*/
    __pyx_t_5 = PyLong_FromSsize_t(__pyx_v_candidate_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_alias_hash);
    __Pyx_GIVEREF(__pyx_v_alias_hash);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_alias_hash) != (0)) __PYX_ERR(0, 354, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5) != (0)) __PYX_ERR(0, 354, __pyx_L1_error);
    __pyx_t_5 = 0;
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_headers, __pyx_t_1); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/kb/kb_in_memory.pyx":355
 *                 candidate_length = len(alias.entry_indices)
 *                 headers.append((alias_hash, candidate_length))
 *                 indices_lists.append(alias.entry_indices)             # <<<<<<<<<<<<<<
 *                 probs_lists.append(alias.probs)
 *                 i = i + 1
*/
    __pyx_t_1 = __pyx_convert_vector_to_py_int64_t(__pyx_v_alias.entry_indices); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_indices_lists, __pyx_t_1); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/kb/kb_in_memory.pyx":356
 *                 headers.append((alias_hash, candidate_length))
 *                 indices_lists.append(alias.entry_indices)
 *                 probs_lists.append(alias.probs)             # <<<<<<<<<<<<<<
 *                 i = i + 1
 *             headers_dump = srsly.json_dumps(headers)
*/
    __pyx_t_1 = __pyx_convert_vector_to_py_float(__pyx_v_alias.probs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_probs_lists, __pyx_t_1); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "spacy/kb/kb_in_memory.pyx":357
 *                 indices_lists.append(alias.entry_indices)
 *                 probs_lists.append(alias.probs)
 *                 i = i + 1             # <<<<<<<<<<<<<<
 *             headers_dump = srsly.json_dumps(headers)
 *             indices_dump = srsly.json_dumps(indices_lists)
*/
    __pyx_v_i = (__pyx_v_i + 1);

    /* "spacy/kb/kb_in_memory.pyx":348
 *             indices_lists = []
 *             probs_lists = []
 *             for alias_hash, alias_index in sorted(             # <<<<<<<<<<<<<<
 *                 self._alias_index.items(), key=lambda x: x[1]
 *             ):
*/
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "spacy/kb/kb_in_memory.pyx":358
 *                 probs_lists.append(alias.probs)
 *                 i = i + 1
 *             headers_dump = srsly.json_dumps(headers)             # <<<<<<<<<<<<<<
 *             indices_dump = srsly.json_dumps(indices_lists)
 *             probs_dump = srsly.json_dumps(probs_lists)
*/
  __pyx_t_1 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_srsly); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_json_dumps); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    assert(__pyx_t_1);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_7, __pyx__function);
    __pyx_t_6 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_headers};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_v_headers_dump = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "spacy/kb/kb_in_memory.pyx":359
 *                 i = i + 1
 *             headers_dump = srsly.json_dumps(headers)
 *             indices_dump = srsly.json_dumps(indices_lists)             # <<<<<<<<<<<<<<
 *             probs_dump = srsly.json_dumps(probs_lists)
 *             return srsly.json_dumps((headers_dump, indices_dump, probs_dump))
*/
  __pyx_t_7 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_srsly); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_json_dumps); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    assert(__pyx_t_7);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
    __pyx_t_6 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_indices_lists};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_v_indices_dump = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "spacy/kb/kb_in_memory.pyx":360
 *             headers_dump = srsly.json_dumps(headers)
 *             indices_dump = srsly.json_dumps(indices_lists)
 *             probs_dump = srsly.json_dumps(probs_lists)             # <<<<<<<<<<<<<<
 *             return srsly.json_dumps((headers_dump, indices_dump, probs_dump))
 * 
*/
  __pyx_t_5 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_srsly); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_json_dumps); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_6 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    assert(__pyx_t_5);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_1, __pyx__function);
    __pyx_t_6 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_probs_lists};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_v_probs_dump = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "spacy/kb/kb_in_memory.pyx":361
 *             indices_dump = srsly.json_dumps(indices_lists)
 *             probs_dump = srsly.json_dumps(probs_lists)
 *             return srsly.json_dumps((headers_dump, indices_dump, probs_dump))             # <<<<<<<<<<<<<<
 * 
 *         serializers = {
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_srsly); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_json_dumps); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_headers_dump);
  __Pyx_GIVEREF(__pyx_v_headers_dump);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_headers_dump) != (0)) __PYX_ERR(0, 361, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_indices_dump);
  __Pyx_GIVEREF(__pyx_v_indices_dump);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_indices_dump) != (0)) __PYX_ERR(0, 361, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_probs_dump);
  __Pyx_GIVEREF(__pyx_v_probs_dump);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_probs_dump) != (0)) __PYX_ERR(0, 361, __pyx_L1_error);
  __pyx_t_6 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    assert(__pyx_t_1);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_7, __pyx__function);
    __pyx_t_6 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_5};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "spacy/kb/kb_in_memory.pyx":343
 *             return srsly.json_dumps(tuples)
 * 
 *         def serialize_aliases():             # <<<<<<<<<<<<<<
 *             i = 1
 *             headers = []
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.to_bytes.serialize_aliases", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_headers);
  __Pyx_XDECREF(__pyx_v_indices_lists);
  __Pyx_XDECREF(__pyx_v_probs_lists);
  __Pyx_XDECREF(__pyx_v_alias_hash);
  __Pyx_XDECREF(__pyx_v_alias_index);
  __Pyx_XDECREF(__pyx_v_headers_dump);
  __Pyx_XDECREF(__pyx_v_indices_dump);
  __Pyx_XDECREF(__pyx_v_probs_dump);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":365
 *         serializers = {
 *             "header": serialize_header,
 *             "entity_vectors": lambda: srsly.json_dumps(self._vectors_table),             # <<<<<<<<<<<<<<
 *             "entries": serialize_entries,
 *             "aliases": serialize_aliases,
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_6lambda2(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_6lambda2 = {"lambda2", (PyCFunction)__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_6lambda2, METH_NOARGS, 0};
static PyObject *__pyx_pw_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_6lambda2(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda2 (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_lambda_funcdef_lambda2(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda2(PyObject *__pyx_self) {
  struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes *__pyx_cur_scope;
  struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda2", 0);
  __pyx_outer_scope = (struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_srsly); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_json_dumps); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 365, __pyx_L1_error) }
  __pyx_t_3 = __pyx_convert_vector_to_py___pyx_t_5spacy_2kb_12kb_in_memory_float_vec(__pyx_cur_scope->__pyx_v_self->_vectors_table); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("spacy.kb.kb_in_memory.InMemoryLookupKB.to_bytes.lambda2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/kb/kb_in_memory.pyx":319
 *         return 0.0
 * 
 *     def to_bytes(self, **kwargs):             # <<<<<<<<<<<<<<
 *         """Serialize the current state to a binary string.
 *         """
*/

static PyObject *__pyx_pf_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_40to_bytes(struct __pyx_obj_5spacy_2kb_12kb_in_memory_InMemoryLookupKB *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes *__pyx_cur_scope;
  PyObject *__pyx_v_serialize_header = 0;
  PyObject *__pyx_v_serialize_entries = 0;
  PyObject *__pyx_v_serialize_aliases = 0;
  PyObject *__pyx_v_serializers = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_bytes", 0);
  __pyx_cur_scope = (struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes *)__pyx_tp_new_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes(__pyx_mstate_global->__pyx_ptype_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes, __pyx_mstate_global->__pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5spacy_2kb_12kb_in_memory___pyx_scope_struct__to_bytes *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 319, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "spacy/kb/kb_in_memory.pyx":322
 *         """Serialize the current state to a binary string.
 *         """
 *         def serialize_header():             # <<<<<<<<<<<<<<
 *             header = (
 *                 self.get_size_entities(),
*/
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_1serialize_header, 0, __pyx_mstate_global->__pyx_n_u_to_bytes_locals_serialize_header, ((PyObject*)__pyx_cur_scope), __pyx_mstate_global->__pyx_n_u_spacy_kb_kb_in_memory, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[2])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_serialize_header = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":330
 *             return srsly.json_dumps(header)
 * 
 *         def serialize_entries():             # <<<<<<<<<<<<<<
 *             i = 1
 *             tuples = []
*/
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_3serialize_entries, 0, __pyx_mstate_global->__pyx_n_u_to_bytes_locals_serialize_entrie_2, ((PyObject*)__pyx_cur_scope), __pyx_mstate_global->__pyx_n_u_spacy_kb_kb_in_memory, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[3])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_serialize_entries = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":343
 *             return srsly.json_dumps(tuples)
 * 
 *         def serialize_aliases():             # <<<<<<<<<<<<<<
 *             i = 1
 *             headers = []
*/
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_5serialize_aliases, 0, __pyx_mstate_global->__pyx_n_u_to_bytes_locals_serialize_aliase_2, ((PyObject*)__pyx_cur_scope), __pyx_mstate_global->__pyx_n_u_spacy_kb_kb_in_memory, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[4])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_serialize_aliases = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":364
 * 
 *         serializers = {
 *             "header": serialize_header,             # <<<<<<<<<<<<<<
 *             "entity_vectors": lambda: srsly.json_dumps(self._vectors_table),
 *             "entries": serialize_entries,
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_header, __pyx_v_serialize_header) < 0) __PYX_ERR(0, 364, __pyx_L1_error)

  /* "spacy/kb/kb_in_memory.pyx":365
 *         serializers = {
 *             "header": serialize_header,
 *             "entity_vectors": lambda: srsly.json_dumps(self._vectors_table),             # <<<<<<<<<<<<<<
 *             "entries": serialize_entries,
 *             "aliases": serialize_aliases,
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5spacy_2kb_12kb_in_memory_16InMemoryLookupKB_8to_bytes_6lambda2, 0, __pyx_mstate_global->__pyx_n_u_to_bytes_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_mstate_global->__pyx_n_u_spacy_kb_kb_in_memory, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[5])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_entity_vectors, __pyx_t_2) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "spacy/kb/kb_in_memory.pyx":366
 *             "header": serialize_header,
 *             "entity_vectors": lambda: srsly.json_dumps(self._vectors_table),
 *             "entries": serialize_entries,             # <<<<<<<<<<<<<<
 *             "aliases": serialize_aliases,
 *         }
*/
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_entries, __pyx_v_serialize_entries) < 0) __PYX_ERR(0, 364, __pyx_L1_error)

  /* "spacy/kb/kb_in_memory.pyx":367
 *             "entity_vectors": lambda: srsly.json_dumps(self._vectors_table),
 *             "entries": serialize_entries,
 *             "aliases": serialize_aliases,             # <<<<<<<<<<<<<<
 *         }
 *         return util.to_bytes(serializers, [])
*/
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_aliases, __pyx_v_serialize_aliases) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
  __pyx_v_serializers = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/kb/kb_in_memory.pyx":369
 *             "aliases": serialize_aliases,
 *         }
 *         return util.to_bytes(serializers, [])             # <<<<<<<<<<<<<<
 * 
 *     def from_bytes(self, bytes_data, *, exclude=tuple()):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_util); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_to_bytes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_