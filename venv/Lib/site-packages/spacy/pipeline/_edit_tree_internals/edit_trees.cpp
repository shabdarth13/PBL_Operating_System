/* Generated by Cython 3.1.1 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "extra_compile_args": [
            "-std=c++11"
        ],
        "include_dirs": [
            "C:\\Users\\runneradmin\\AppData\\Local\\Temp\\pip-build-env-1xodcuc8\\overlay\\Lib\\site-packages\\numpy\\_core\\include",
            "C:\\Users\\runneradmin\\AppData\\Local\\pypa\\cibuildwheel\\Cache\\nuget-cpython\\python.3.13.0\\tools\\Include"
        ],
        "language": "c++",
        "name": "spacy.pipeline._edit_tree_internals.edit_trees",
        "sources": [
            "spacy/pipeline/_edit_tree_internals/edit_trees.pyx"
        ]
    },
    "module_name": "spacy.pipeline._edit_tree_internals.edit_trees"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
/* InitLimitedAPI */
#if defined(Py_LIMITED_API) && !defined(CYTHON_LIMITED_API)
  #define CYTHON_LIMITED_API 1
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x03080000
    #error Cython requires Python 3.8+.
#else
#define __PYX_ABI_VERSION "3_1_1"
#define CYTHON_HEX_VERSION 0x030101F0
#define CYTHON_FUTURE_DIVISION 0
/* CModulePreamble */
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_ASSUME_SAFE_SIZE
  #define CYTHON_ASSUME_SAFE_SIZE 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_AM_SEND
  #define CYTHON_USE_AM_SEND 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 1
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 1
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #ifndef CYTHON_ASSUME_SAFE_SIZE
    #define CYTHON_ASSUME_SAFE_SIZE 1
  #endif
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PYPY_VERSION_NUM >= 0x07030C00)
  #endif
  #undef CYTHON_USE_AM_SEND
  #define CYTHON_USE_AM_SEND 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_NUM >= 0x07031100)
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_ASSUME_SAFE_SIZE
  #define CYTHON_ASSUME_SAFE_SIZE 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #ifndef CYTHON_USE_AM_SEND
    #define CYTHON_USE_AM_SEND (__PYX_LIMITED_VERSION_HEX >= 0x030A0000)
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #ifdef Py_GIL_DISABLED
    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 1
  #else
    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #endif
  #if PY_VERSION_HEX < 0x030A0000
    #undef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #elif !defined(CYTHON_USE_TYPE_SLOTS)
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLIST_INTERNALS)
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #elif !defined(CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS)
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_ASSUME_SAFE_SIZE
    #define CYTHON_ASSUME_SAFE_SIZE 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL 0
  #elif !defined(CYTHON_FAST_GIL)
    #define CYTHON_FAST_GIL (PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_SYS_MONITORING
    #define CYTHON_USE_SYS_MONITORING (PY_VERSION_HEX >= 0x030d00B1)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #ifndef CYTHON_USE_AM_SEND
    #define CYTHON_USE_AM_SEND 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5 && !CYTHON_USE_MODULE_STATE)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS (!CYTHON_COMPILING_IN_CPYTHON_FREETHREADING)
  #endif
#endif
#ifndef CYTHON_FAST_PYCCALL
#define CYTHON_FAST_PYCCALL  CYTHON_FAST_PYCALL
#endif
#ifndef CYTHON_VECTORCALL
#if CYTHON_COMPILING_IN_LIMITED_API
#define CYTHON_VECTORCALL  (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)
#else
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifndef Py_UNREACHABLE
  #define Py_UNREACHABLE()  assert(0); abort()
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

/* CppInitCode */
#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

/* PythonCompatibility */
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#define __Pyx_BUILTIN_MODULE_NAME "builtins"
#define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    #ifndef CO_OPTIMIZED
    static int CO_OPTIMIZED;
    #endif
    #ifndef CO_NEWLOCALS
    static int CO_NEWLOCALS;
    #endif
    #ifndef CO_VARARGS
    static int CO_VARARGS;
    #endif
    #ifndef CO_VARKEYWORDS
    static int CO_VARKEYWORDS;
    #endif
    #ifndef CO_ASYNC_GENERATOR
    static int CO_ASYNC_GENERATOR;
    #endif
    #ifndef CO_GENERATOR
    static int CO_GENERATOR;
    #endif
    #ifndef CO_COROUTINE
    static int CO_COROUTINE;
    #endif
#else
    #ifndef CO_COROUTINE
      #define CO_COROUTINE 0x80
    #endif
    #ifndef CO_ASYNC_GENERATOR
      #define CO_ASYNC_GENERATOR 0x200
    #endif
#endif
static int __Pyx_init_co_variables(void);
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#ifndef METH_FASTCALL
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_VERSION_HEX >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void (*cfunc)(void)) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x03090000
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#elif CYTHON_COMPILING_IN_GRAAL
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) _PyFrame_SetLineNumber((frame), (lineno))
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#endif
#if CYTHON_USE_MODULE_STATE
static CYTHON_INLINE void *__Pyx__PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#define __Pyx_PyModule_GetState(o) (__pyx_mstatetype *)__Pyx__PyModule_GetState(o)
#else
#define __Pyx_PyModule_GetState(op) ((void)op,__pyx_mstate_global)
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE((PyObject *) obj), name, func_ctype)
#define __Pyx_PyObject_TryGetSlot(obj, name, func_ctype) __Pyx_PyType_TryGetSlot(Py_TYPE(obj), name, func_ctype)
#define __Pyx_PyObject_GetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_GetSubSlot(Py_TYPE(obj), sub, name, func_ctype)
#define __Pyx_PyObject_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSubSlot(Py_TYPE(obj), sub, name, func_ctype)
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype) __Pyx_PyType_GetSlot(type, name, func_ctype)
  #define __Pyx_PyType_GetSubSlot(type, sub, name, func_ctype) (((type)->sub) ? ((type)->sub->name) : NULL)
  #define __Pyx_PyType_TryGetSubSlot(type, sub, name, func_ctype) __Pyx_PyType_GetSubSlot(type, sub, name, func_ctype)
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype)\
    ((__PYX_LIMITED_VERSION_HEX >= 0x030A0000 ||\
     (PyType_GetFlags(type) & Py_TPFLAGS_HEAPTYPE) || __Pyx_get_runtime_version() >= 0x030A0000) ?\
     __Pyx_PyType_GetSlot(type, name, func_ctype) : NULL)
  #define __Pyx_PyType_GetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_GetSlot(obj, name, func_ctype)
  #define __Pyx_PyType_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSlot(obj, name, func_ctype)
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
#define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif !CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
#endif
#define __Pyx_PyObject_GetIterNextFunc(iterator)  __Pyx_PyObject_GetSlot(iterator, tp_iternext, iternextfunc)
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#else
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains)
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS || !CYTHON_ASSUME_SAFE_MACROS
  #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    #define __Pyx_PyList_GetItemRef(o, i) PyList_GetItemRef(o, i)
  #else
    #define __Pyx_PyList_GetItemRef(o, i) PySequence_GetItem(o, i)
  #endif
#else
  #define __Pyx_PyList_GetItemRef(o, i) __Pyx_NewRef(PyList_GET_ITEM(o, i))
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
#define __Pyx_PyDict_GetItemRef(dict, key, result) PyDict_GetItemRef(dict, key, result)
#elif CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
static CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {
  *result = PyObject_GetItem(dict, key);
  if (*result == NULL) {
    if (PyErr_ExceptionMatches(PyExc_KeyError)) {
      PyErr_Clear();
      return 0;
    }
    return -1;
  }
  return 1;
}
#else
static CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {
  *result = PyDict_GetItemWithError(dict, key);
  if (*result == NULL) {
    return PyErr_Occurred() ? -1 : 0;
  }
  Py_INCREF(*result);
  return 1;
}
#endif
#if defined(CYTHON_DEBUG_VISIT_CONST) && CYTHON_DEBUG_VISIT_CONST
  #define __Pyx_VISIT_CONST(obj)  Py_VISIT(obj)
#else
  #define __Pyx_VISIT_CONST(obj)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GET_ITEM(o, i)
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GET_ITEM(o, i)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GetItem(o, i)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GetItem(o, i)
#endif
#if CYTHON_ASSUME_SAFE_SIZE
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GET_LENGTH(o)
#else
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GetLength(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_InternFromString)
  #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
#endif
#define __Pyx_PyLong_FromHash_t PyLong_FromSsize_t
#define __Pyx_PyLong_AsHash_t   __Pyx_PyIndex_AsSsize_t
#if __PYX_LIMITED_VERSION_HEX >= 0x030A0000
    #define __Pyx_PySendResult PySendResult
#else
    typedef enum {
        PYGEN_RETURN = 0,
        PYGEN_ERROR = -1,
        PYGEN_NEXT = 1,
    } __Pyx_PySendResult;
#endif
#if CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX < 0x030A00A3
  typedef __Pyx_PySendResult (*__Pyx_pyiter_sendfunc)(PyObject *iter, PyObject *value, PyObject **result);
#else
  #define __Pyx_pyiter_sendfunc sendfunc
#endif
#if !CYTHON_USE_AM_SEND
#define __PYX_HAS_PY_AM_SEND 0
#elif __PYX_LIMITED_VERSION_HEX >= 0x030A0000
#define __PYX_HAS_PY_AM_SEND 1
#else
#define __PYX_HAS_PY_AM_SEND 2  // our own backported implementation
#endif
#if __PYX_HAS_PY_AM_SEND < 2
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
        __Pyx_pyiter_sendfunc am_send;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_SlotTpAsAsync(s) ((PyAsyncMethods*)(s))
#endif
#if CYTHON_USE_AM_SEND && PY_VERSION_HEX < 0x030A00F0
    #define __Pyx_TPFLAGS_HAVE_AM_SEND (1UL << 21)
#else
    #define __Pyx_TPFLAGS_HAVE_AM_SEND (0)
#endif
#if PY_VERSION_HEX >= 0x03090000
#define __Pyx_PyInterpreterState_Get() PyInterpreterState_Get()
#else
#define __Pyx_PyInterpreterState_Get() PyThreadState_Get()->interp
#endif
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030A0000
#ifdef __cplusplus
extern "C"
#endif
PyAPI_FUNC(void *) PyMem_Calloc(size_t nelem, size_t elsize);
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_init_co_variable(PyObject *inspect, const char* name, int *write_to) {
    int value;
    PyObject *py_value = PyObject_GetAttrString(inspect, name);
    if (!py_value) return 0;
    value = (int) PyLong_AsLong(py_value);
    Py_DECREF(py_value);
    *write_to = value;
    return value != -1 || !PyErr_Occurred();
}
static int __Pyx_init_co_variables(void) {
    PyObject *inspect;
    int result;
    inspect = PyImport_ImportModule("inspect");
    result =
#if !defined(CO_OPTIMIZED)
        __Pyx_init_co_variable(inspect, "CO_OPTIMIZED", &CO_OPTIMIZED) &&
#endif
#if !defined(CO_NEWLOCALS)
        __Pyx_init_co_variable(inspect, "CO_NEWLOCALS", &CO_NEWLOCALS) &&
#endif
#if !defined(CO_VARARGS)
        __Pyx_init_co_variable(inspect, "CO_VARARGS", &CO_VARARGS) &&
#endif
#if !defined(CO_VARKEYWORDS)
        __Pyx_init_co_variable(inspect, "CO_VARKEYWORDS", &CO_VARKEYWORDS) &&
#endif
#if !defined(CO_ASYNC_GENERATOR)
        __Pyx_init_co_variable(inspect, "CO_ASYNC_GENERATOR", &CO_ASYNC_GENERATOR) &&
#endif
#if !defined(CO_GENERATOR)
        __Pyx_init_co_variable(inspect, "CO_GENERATOR", &CO_GENERATOR) &&
#endif
#if !defined(CO_COROUTINE)
        __Pyx_init_co_variable(inspect, "CO_COROUTINE", &CO_COROUTINE) &&
#endif
        1;
    Py_DECREF(inspect);
    return result ? 0 : -1;
}
#else
static int __Pyx_init_co_variables(void) {
    return 0;  // It's a limited API-only feature
}
#endif

/* MathInitCode */
#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #ifndef _USE_MATH_DEFINES
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#ifndef CYTHON_CLINE_IN_TRACEBACK_RUNTIME
#define CYTHON_CLINE_IN_TRACEBACK_RUNTIME 0
#endif
#ifndef CYTHON_CLINE_IN_TRACEBACK
#define CYTHON_CLINE_IN_TRACEBACK CYTHON_CLINE_IN_TRACEBACK_RUNTIME
#endif
#if CYTHON_CLINE_IN_TRACEBACK
#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; __pyx_clineno = __LINE__; (void) __pyx_clineno; }
#else
#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; (void) __pyx_clineno; }
#endif
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__spacy__pipeline___edit_tree_internals__edit_trees
#define __PYX_HAVE_API__spacy__pipeline___edit_tree_internals__edit_trees
/* Early includes */
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <unordered_map>
#include <vector>
#include <set>
#include <algorithm>
#include <string.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyByteArray_AsString(s) PyByteArray_AS_STRING(s)
#else
    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AsString(s))
    #define __Pyx_PyByteArray_AsString(s) PyByteArray_AsString(s)
#endif
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
static CYTHON_INLINE PyObject *__Pyx_NewRef(PyObject *obj) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_NewRef)
    return Py_NewRef(obj);
#else
    Py_INCREF(obj);
    return obj;
#endif
}
static CYTHON_INLINE PyObject *__Pyx_XNewRef(PyObject *obj) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_XNewRef)
    return Py_XNewRef(obj);
#else
    Py_XINCREF(obj);
    return obj;
#endif
}
static CYTHON_INLINE PyObject *__Pyx_Owned_Py_None(int b);
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Long(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyLong_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __Pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AS_DOUBLE(x)
#else
#define __Pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AsDouble(x)
#endif
#define __Pyx_PyFloat_AsFloat(x) ((float) __Pyx_PyFloat_AsDouble(x))
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#elif __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeASCII(c_str, size, NULL)
#else
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
/* PretendToInitialize */
#ifdef __cplusplus
#include <type_traits>
template <typename T>
static void __Pyx_pretend_to_initialize(T* ptr) {
#if __cplusplus > 201103L
    if ((std::is_trivially_default_constructible<T>::value))
#endif
        *ptr = T();
    (void)ptr;
}
#else
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }
#endif


#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * const __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char* const __pyx_f[] = {
  "spacy/pipeline/_edit_tree_internals/edit_trees.pyx",
  "<stringsource>",
  "spacy/pipeline/_edit_tree_internals/edit_trees.pxd",
  "cymem/cymem.pxd",
  "preshed/maps.pxd",
  "spacy/strings.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __PYX_CYTHON_ATOMICS_ENABLED() CYTHON_ATOMICS
#define __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING() CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#define __pyx_atomic_int_type int
#define __pyx_nonatomic_int_type int
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__))
    #include <stdatomic.h>
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)))
    #include <atomic>
#endif
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__) &&\
                       ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type atomic_int
    #define __pyx_atomic_ptr_type atomic_uintptr_t
    #define __pyx_nonatomic_ptr_type uintptr_t
    #define __pyx_atomic_incr_relaxed(value) atomic_fetch_add_explicit(value, 1, memory_order_relaxed)
    #define __pyx_atomic_incr_acq_rel(value) atomic_fetch_add_explicit(value, 1, memory_order_acq_rel)
    #define __pyx_atomic_decr_acq_rel(value) atomic_fetch_sub_explicit(value, 1, memory_order_acq_rel)
    #define __pyx_atomic_sub(value, arg) atomic_fetch_sub(value, arg)
    #define __pyx_atomic_int_cmp_exchange(value, expected, desired) atomic_compare_exchange_strong(value, expected, desired)
    #define __pyx_atomic_load(value) atomic_load(value)
    #define __pyx_atomic_store(value, new_value) atomic_store(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) atomic_load_explicit(value, memory_order_relaxed)
    #define __pyx_atomic_pointer_load_acquire(value) atomic_load_explicit(value, memory_order_acquire)
    #define __pyx_atomic_pointer_exchange(value, new_value) atomic_exchange(value, (__pyx_nonatomic_ptr_type)new_value)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C atomics"
    #endif
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)) &&\
                    ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type std::atomic_int
    #define __pyx_atomic_ptr_type std::atomic_uintptr_t
    #define __pyx_nonatomic_ptr_type uintptr_t
    #define __pyx_atomic_incr_relaxed(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_relaxed)
    #define __pyx_atomic_incr_acq_rel(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_acq_rel)
    #define __pyx_atomic_decr_acq_rel(value) std::atomic_fetch_sub_explicit(value, 1, std::memory_order_acq_rel)
    #define __pyx_atomic_sub(value, arg) std::atomic_fetch_sub(value, arg)
    #define __pyx_atomic_int_cmp_exchange(value, expected, desired) std::atomic_compare_exchange_strong(value, expected, desired)
    #define __pyx_atomic_load(value) std::atomic_load(value)
    #define __pyx_atomic_store(value, new_value) std::atomic_store(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) std::atomic_load_explicit(value, std::memory_order_relaxed)
    #define __pyx_atomic_pointer_load_acquire(value) std::atomic_load_explicit(value, std::memory_order_acquire)
    #define __pyx_atomic_pointer_exchange(value, new_value) std::atomic_exchange(value, (__pyx_nonatomic_ptr_type)new_value)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C++ atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C++ atomics"
    #endif
#elif CYTHON_ATOMICS && (__GNUC__ >= 5 || (__GNUC__ == 4 &&\
                    (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ >= 2))))
    #define __pyx_atomic_ptr_type void*
    #define __pyx_atomic_incr_relaxed(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_incr_acq_rel(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_acq_rel(value) __sync_fetch_and_sub(value, 1)
    #define __pyx_atomic_sub(value, arg) __sync_fetch_and_sub(value, arg)
    static CYTHON_INLINE int __pyx_atomic_int_cmp_exchange(__pyx_atomic_int_type* value, __pyx_nonatomic_int_type* expected, __pyx_nonatomic_int_type desired) {
        __pyx_nonatomic_int_type old = __sync_val_compare_and_swap(value, *expected, desired);
        int result = old == *expected;
        *expected = old;
        return result;
    }
    #define __pyx_atomic_load(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_store(value, new_value) __sync_lock_test_and_set(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_pointer_load_acquire(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_pointer_exchange(value, new_value) __sync_lock_test_and_set(value, (__pyx_atomic_ptr_type)new_value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER)
    #include <intrin.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type long
    #define __pyx_atomic_ptr_type void*
    #undef __pyx_nonatomic_int_type
    #define __pyx_nonatomic_int_type long
    #pragma intrinsic (_InterlockedExchangeAdd, _InterlockedExchange, _InterlockedCompareExchange, _InterlockedCompareExchangePointer, _InterlockedExchangePointer)
    #define __pyx_atomic_incr_relaxed(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_incr_acq_rel(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_decr_acq_rel(value) _InterlockedExchangeAdd(value, -1)
    #define __pyx_atomic_sub(value, arg) _InterlockedExchangeAdd(value, -arg)
    static CYTHON_INLINE int __pyx_atomic_int_cmp_exchange(__pyx_atomic_int_type* value, __pyx_nonatomic_int_type* expected, __pyx_nonatomic_int_type desired) {
        __pyx_nonatomic_int_type old = _InterlockedCompareExchange(value, desired, *expected);
        int result = old == *expected;
        *expected = old;
        return result;
    }
    #define __pyx_atomic_load(value) _InterlockedExchangeAdd(value, 0)
    #define __pyx_atomic_store(value, new_value) _InterlockedExchange(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) *(void * volatile *)value
    #define __pyx_atomic_pointer_load_acquire(value) _InterlockedCompareExchangePointer(value, 0, 0)
    #define __pyx_atomic_pointer_exchange(value, new_value) _InterlockedExchangePointer(value, (__pyx_atomic_ptr_type)new_value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_relaxed(__pyx_get_slice_count_pointer(memview))
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_acq_rel(__pyx_get_slice_count_pointer(memview))
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* CriticalSections.proto */
#if !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#define __Pyx_PyCriticalSection void*
#define __Pyx_PyCriticalSection2 void*
#define __Pyx_PyCriticalSection_Begin1(cs, arg) (void)cs
#define __Pyx_PyCriticalSection_Begin2(cs, arg1, arg2) (void)cs
#define __Pyx_PyCriticalSection_End1(cs)
#define __Pyx_PyCriticalSection_End2(cs)
#else
#define __Pyx_PyCriticalSection PyCriticalSection
#define __Pyx_PyCriticalSection2 PyCriticalSection2
#define __Pyx_PyCriticalSection_Begin1 PyCriticalSection_Begin
#define __Pyx_PyCriticalSection_Begin2 PyCriticalSection2_Begin
#define __Pyx_PyCriticalSection_End1 PyCriticalSection_End
#define __Pyx_PyCriticalSection_End2 PyCriticalSection2_End
#endif
#if PY_VERSION_HEX < 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_BEGIN_CRITICAL_SECTION(o) {
#define __Pyx_END_CRITICAL_SECTION() }
#else
#define __Pyx_BEGIN_CRITICAL_SECTION Py_BEGIN_CRITICAL_SECTION
#define __Pyx_END_CRITICAL_SECTION Py_END_CRITICAL_SECTION
#endif

/* #### Code section: numeric_typedefs ### */

/* "preshed/maps.pxd":5
 * 
 * 
 * ctypedef uint64_t key_t             # <<<<<<<<<<<<<<
 * 
 * 
*/
typedef uint64_t __pyx_t_7preshed_4maps_key_t;

/* "typedefs.pxd":3
 * from libc.stdint cimport int32_t, uint8_t, uint16_t, uint32_t, uint64_t, uintptr_t
 * 
 * ctypedef float weight_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t hash_t
 * ctypedef uint64_t class_t
*/
typedef float __pyx_t_5spacy_8typedefs_weight_t;

/* "typedefs.pxd":4
 * 
 * ctypedef float weight_t
 * ctypedef uint64_t hash_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t class_t
 * ctypedef uint64_t attr_t
*/
typedef uint64_t __pyx_t_5spacy_8typedefs_hash_t;

/* "typedefs.pxd":5
 * ctypedef float weight_t
 * ctypedef uint64_t hash_t
 * ctypedef uint64_t class_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t attr_t
 * ctypedef uint64_t flags_t
*/
typedef uint64_t __pyx_t_5spacy_8typedefs_class_t;

/* "typedefs.pxd":6
 * ctypedef uint64_t hash_t
 * ctypedef uint64_t class_t
 * ctypedef uint64_t attr_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t flags_t
 * ctypedef uint16_t len_t
*/
typedef uint64_t __pyx_t_5spacy_8typedefs_attr_t;

/* "typedefs.pxd":7
 * ctypedef uint64_t class_t
 * ctypedef uint64_t attr_t
 * ctypedef uint64_t flags_t             # <<<<<<<<<<<<<<
 * ctypedef uint16_t len_t
 * ctypedef uint16_t tag_t
*/
typedef uint64_t __pyx_t_5spacy_8typedefs_flags_t;

/* "typedefs.pxd":8
 * ctypedef uint64_t attr_t
 * ctypedef uint64_t flags_t
 * ctypedef uint16_t len_t             # <<<<<<<<<<<<<<
 * ctypedef uint16_t tag_t
*/
typedef uint16_t __pyx_t_5spacy_8typedefs_len_t;

/* "typedefs.pxd":9
 * ctypedef uint64_t flags_t
 * ctypedef uint16_t len_t
 * ctypedef uint16_t tag_t             # <<<<<<<<<<<<<<
*/
typedef uint16_t __pyx_t_5spacy_8typedefs_tag_t;
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_5cymem_5cymem_PyMalloc;
struct __pyx_obj_5cymem_5cymem_PyFree;
struct __pyx_obj_5cymem_5cymem_Pool;
struct __pyx_obj_5cymem_5cymem_Address;
struct __pyx_obj_7preshed_4maps_PreshMap;
struct __pyx_obj_7preshed_4maps_PreshMapArray;
struct __pyx_obj_5spacy_7strings_StringStore;
struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees;
struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes;
struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes;

/* "cymem/cymem.pxd":1
 * ctypedef void* (*malloc_t)(size_t n)             # <<<<<<<<<<<<<<
 * ctypedef void (*free_t)(void *p)
 * 
*/
typedef void *(*__pyx_t_5cymem_5cymem_malloc_t)(size_t);

/* "cymem/cymem.pxd":2
 * ctypedef void* (*malloc_t)(size_t n)
 * ctypedef void (*free_t)(void *p)             # <<<<<<<<<<<<<<
 * 
 * cdef class PyMalloc:
*/
typedef void (*__pyx_t_5cymem_5cymem_free_t)(void *);
struct __pyx_t_7preshed_4maps_Cell;
struct __pyx_t_7preshed_4maps_Result;
struct __pyx_t_7preshed_4maps_MapStruct;

/* "preshed/maps.pxd":8
 * 
 * 
 * cdef struct Cell:             # <<<<<<<<<<<<<<
 *     key_t key
 *     void* value
*/
struct __pyx_t_7preshed_4maps_Cell {
  __pyx_t_7preshed_4maps_key_t key;
  void *value;
};

/* "preshed/maps.pxd":13
 * 
 * 
 * cdef struct Result:             # <<<<<<<<<<<<<<
 *     int found
 *     void* value
*/
struct __pyx_t_7preshed_4maps_Result {
  int found;
  void *value;
};

/* "preshed/maps.pxd":18
 * 
 * 
 * cdef struct MapStruct:             # <<<<<<<<<<<<<<
 *     Cell* cells
 *     void* value_for_empty_key
*/
struct __pyx_t_7preshed_4maps_MapStruct {
  struct __pyx_t_7preshed_4maps_Cell *cells;
  void *value_for_empty_key;
  void *value_for_del_key;
  __pyx_t_7preshed_4maps_key_t length;
  __pyx_t_7preshed_4maps_key_t filled;
  int is_empty_key_set;
  int is_del_key_set;
};
union __pyx_t_5spacy_7strings_Utf8Str;
typedef union __pyx_t_5spacy_7strings_Utf8Str __pyx_t_5spacy_7strings_Utf8Str;

/* "strings.pxd":17
 * 
 * 
 * ctypedef union Utf8Str:             # <<<<<<<<<<<<<<
 *     unsigned char[8] s
 *     unsigned char* p
*/
union __pyx_t_5spacy_7strings_Utf8Str {
  unsigned char s[8];
  unsigned char *p;
};
struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC;
struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC;
union __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC;
struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC;
struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_LCS;

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":31
 * cdef uint32_t NULL_TREE_ID
 * 
 * cdef struct MatchNodeC:             # <<<<<<<<<<<<<<
 *     len_t prefix_len
 *     len_t suffix_len
*/
struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC {
  __pyx_t_5spacy_8typedefs_len_t prefix_len;
  __pyx_t_5spacy_8typedefs_len_t suffix_len;
  uint32_t prefix_tree;
  uint32_t suffix_tree;
};

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":37
 *     uint32_t suffix_tree
 * 
 * cdef struct SubstNodeC:             # <<<<<<<<<<<<<<
 *     attr_t orig
 *     attr_t subst
*/
struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC {
  __pyx_t_5spacy_8typedefs_attr_t orig;
  __pyx_t_5spacy_8typedefs_attr_t subst;
};

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":41
 *     attr_t subst
 * 
 * cdef union NodeC:             # <<<<<<<<<<<<<<
 *     MatchNodeC match_node
 *     SubstNodeC subst_node
*/
union __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC {
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC match_node;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC subst_node;
};

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":45
 *     SubstNodeC subst_node
 * 
 * cdef struct EditTreeC:             # <<<<<<<<<<<<<<
 *     bint is_match_node
 *     NodeC inner
*/
struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC {
  int is_match_node;
  union __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC inner;
};

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":81
 *         return hash((subst_node.orig, subst_node.subst))
 * 
 * cdef struct LCS:             # <<<<<<<<<<<<<<
 *     int source_begin
 *     int source_end
*/
struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_LCS {
  int source_begin;
  int source_end;
  int target_begin;
  int target_end;
};

/* "cymem/cymem.pxd":4
 * ctypedef void (*free_t)(void *p)
 * 
 * cdef class PyMalloc:             # <<<<<<<<<<<<<<
 *     cdef malloc_t malloc
 *     cdef void _set(self, malloc_t malloc)
*/
struct __pyx_obj_5cymem_5cymem_PyMalloc {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_PyMalloc *__pyx_vtab;
  __pyx_t_5cymem_5cymem_malloc_t malloc;
};


/* "cymem/cymem.pxd":10
 * cdef PyMalloc WrapMalloc(malloc_t malloc)
 * 
 * cdef class PyFree:             # <<<<<<<<<<<<<<
 *     cdef free_t free
 *     cdef void _set(self, free_t free)
*/
struct __pyx_obj_5cymem_5cymem_PyFree {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_PyFree *__pyx_vtab;
  __pyx_t_5cymem_5cymem_free_t free;
};


/* "cymem/cymem.pxd":16
 * cdef PyFree WrapFree(free_t free)
 * 
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
*/
struct __pyx_obj_5cymem_5cymem_Pool {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtab;
  size_t size;
  PyObject *addresses;
  PyObject *refs;
  struct __pyx_obj_5cymem_5cymem_PyMalloc *pymalloc;
  struct __pyx_obj_5cymem_5cymem_PyFree *pyfree;
};


/* "cymem/cymem.pxd":28
 * 
 * 
 * cdef class Address:             # <<<<<<<<<<<<<<
 *     cdef void* ptr
 *     cdef readonly PyMalloc pymalloc
*/
struct __pyx_obj_5cymem_5cymem_Address {
  PyObject_HEAD
  void *ptr;
  struct __pyx_obj_5cymem_5cymem_PyMalloc *pymalloc;
  struct __pyx_obj_5cymem_5cymem_PyFree *pyfree;
};


/* "preshed/maps.pxd":45
 * 
 * 
 * cdef class PreshMap:             # <<<<<<<<<<<<<<
 *     cdef MapStruct* c_map
 *     cdef Pool mem
*/
struct __pyx_obj_7preshed_4maps_PreshMap {
  PyObject_HEAD
  struct __pyx_vtabstruct_7preshed_4maps_PreshMap *__pyx_vtab;
  struct __pyx_t_7preshed_4maps_MapStruct *c_map;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
};


/* "preshed/maps.pxd":53
 * 
 * 
 * cdef class PreshMapArray:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef MapStruct* maps
*/
struct __pyx_obj_7preshed_4maps_PreshMapArray {
  PyObject_HEAD
  struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  struct __pyx_t_7preshed_4maps_MapStruct *maps;
  size_t length;
};


/* "strings.pxd":22
 * 
 * 
 * cdef class StringStore:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 * 
*/
struct __pyx_obj_5spacy_7strings_StringStore {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_7strings_StringStore *__pyx_vtab;
  struct __pyx_obj_5cymem_5cymem_Pool *mem;
  std::vector<__pyx_t_5spacy_8typedefs_hash_t>  keys;
  struct __pyx_obj_7preshed_4maps_PreshMap *_map;
  std::vector<__pyx_t_5spacy_8typedefs_hash_t>  _transient_keys;
  struct __pyx_obj_5cymem_5cymem_Pool *_non_temp_mem;
};


/* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":90
 *     return lcs.source_begin == 0 and lcs.source_end == 0 and lcs.target_begin == 0 and lcs.target_end == 0
 * 
 * cdef class EditTrees:             # <<<<<<<<<<<<<<
 *     cdef vector[EditTreeC] trees
 *     cdef unordered_map[hash_t, uint32_t] map
*/
struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees {
  PyObject_HEAD
  struct __pyx_vtabstruct_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_vtab;
  std::vector<struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC>  trees;
  std::unordered_map<__pyx_t_5spacy_8typedefs_hash_t,uint32_t>  map;
  struct __pyx_obj_5spacy_7strings_StringStore *strings;
};


/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":216
 *         self._rebuild_tree_map()
 * 
 *     def from_bytes(self, bytes_data: bytes, *) -> "EditTrees":             # <<<<<<<<<<<<<<
 *         def deserialize_trees(tree_dicts):
 *             cdef EditTreeC c_tree
*/
struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes {
  PyObject_HEAD
  PyObject *__pyx_v_deserialize_trees;
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self;
};


/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":231
 *         return self
 * 
 *     def to_bytes(self, **kwargs) -> bytes:             # <<<<<<<<<<<<<<
 *         tree_dicts = []
 *         for tree in self.trees:
*/
struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes {
  PyObject_HEAD
  PyObject *__pyx_v_tree_dicts;
};



/* "cymem/cymem.pxd":4
 * ctypedef void (*free_t)(void *p)
 * 
 * cdef class PyMalloc:             # <<<<<<<<<<<<<<
 *     cdef malloc_t malloc
 *     cdef void _set(self, malloc_t malloc)
*/

struct __pyx_vtabstruct_5cymem_5cymem_PyMalloc {
  void (*_set)(struct __pyx_obj_5cymem_5cymem_PyMalloc *, __pyx_t_5cymem_5cymem_malloc_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_PyMalloc *__pyx_vtabptr_5cymem_5cymem_PyMalloc;


/* "cymem/cymem.pxd":10
 * cdef PyMalloc WrapMalloc(malloc_t malloc)
 * 
 * cdef class PyFree:             # <<<<<<<<<<<<<<
 *     cdef free_t free
 *     cdef void _set(self, free_t free)
*/

struct __pyx_vtabstruct_5cymem_5cymem_PyFree {
  void (*_set)(struct __pyx_obj_5cymem_5cymem_PyFree *, __pyx_t_5cymem_5cymem_free_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_PyFree *__pyx_vtabptr_5cymem_5cymem_PyFree;


/* "cymem/cymem.pxd":16
 * cdef PyFree WrapFree(free_t free)
 * 
 * cdef class Pool:             # <<<<<<<<<<<<<<
 *     cdef readonly size_t size
 *     cdef readonly dict addresses
*/

struct __pyx_vtabstruct_5cymem_5cymem_Pool {
  void *(*alloc)(struct __pyx_obj_5cymem_5cymem_Pool *, size_t, size_t);
  void (*free)(struct __pyx_obj_5cymem_5cymem_Pool *, void *);
  void *(*realloc)(struct __pyx_obj_5cymem_5cymem_Pool *, void *, size_t);
};
static struct __pyx_vtabstruct_5cymem_5cymem_Pool *__pyx_vtabptr_5cymem_5cymem_Pool;


/* "preshed/maps.pxd":45
 * 
 * 
 * cdef class PreshMap:             # <<<<<<<<<<<<<<
 *     cdef MapStruct* c_map
 *     cdef Pool mem
*/

struct __pyx_vtabstruct_7preshed_4maps_PreshMap {
  void *(*get)(struct __pyx_obj_7preshed_4maps_PreshMap *, __pyx_t_7preshed_4maps_key_t);
  void (*set)(struct __pyx_obj_7preshed_4maps_PreshMap *, __pyx_t_7preshed_4maps_key_t, void *);
};
static struct __pyx_vtabstruct_7preshed_4maps_PreshMap *__pyx_vtabptr_7preshed_4maps_PreshMap;


/* "preshed/maps.pxd":53
 * 
 * 
 * cdef class PreshMapArray:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 *     cdef MapStruct* maps
*/

struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray {
  void *(*get)(struct __pyx_obj_7preshed_4maps_PreshMapArray *, size_t, __pyx_t_7preshed_4maps_key_t);
  void (*set)(struct __pyx_obj_7preshed_4maps_PreshMapArray *, size_t, __pyx_t_7preshed_4maps_key_t, void *);
};
static struct __pyx_vtabstruct_7preshed_4maps_PreshMapArray *__pyx_vtabptr_7preshed_4maps_PreshMapArray;


/* "strings.pxd":22
 * 
 * 
 * cdef class StringStore:             # <<<<<<<<<<<<<<
 *     cdef Pool mem
 * 
*/

struct __pyx_vtabstruct_5spacy_7strings_StringStore {
  __pyx_t_5spacy_7strings_Utf8Str const *(*intern_unicode)(struct __pyx_obj_5spacy_7strings_StringStore *, PyObject *, int);
  __pyx_t_5spacy_7strings_Utf8Str const *(*_intern_utf8)(struct __pyx_obj_5spacy_7strings_StringStore *, char *, int, __pyx_t_5spacy_8typedefs_hash_t *, int);
};
static struct __pyx_vtabstruct_5spacy_7strings_StringStore *__pyx_vtabptr_5spacy_7strings_StringStore;


/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":61
 *     return lcs
 * 
 * cdef class EditTrees:             # <<<<<<<<<<<<<<
 *     """Container for constructing and storing edit trees."""
 *     def __init__(self, strings: StringStore):
*/

struct __pyx_vtabstruct_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees {
  uint32_t (*add)(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*apply)(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *, uint32_t, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*tree_to_str)(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *, uint32_t, int __pyx_skip_dispatch);
  uint32_t (*_add)(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *, PyObject *, PyObject *);
  PyObject *(*_apply)(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *, uint32_t, PyObject *, PyObject *);
  uint32_t (*_tree_id)(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *, struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC);
};
static struct __pyx_vtabstruct_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_vtabptr_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* DictGetItem.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject *const *args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject * const*args, size_t nargs, PyObject *kwargs);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyUnicode_Unicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject** values, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* unicode_iter.proto */
static CYTHON_INLINE int __Pyx_init_unicode_iteration(
    PyObject* ustring, Py_ssize_t *length, void** data, int *kind);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
#endif
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_PySequence_ITEM(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_NewRef(__Pyx_PyTuple_GET_ITEM(args, i))
#else
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_XNewRef(PyTuple_GetItem(args, i))
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_ArgRef_FASTCALL(args, i) __Pyx_NewRef(args[i])
    #define __Pyx_NumKwargs_FASTCALL(kwds) __Pyx_PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
#else
    #define __Pyx_ArgRef_FASTCALL __Pyx_ArgRef_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#if CYTHON_METH_FASTCALL || (CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(args + start, stop - start)
#else
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static CYTHON_INLINE int __Pyx_ParseKeywords(
    PyObject *kwds, PyObject *const *kwvalues, PyObject ** const argnames[],
    PyObject *kwds2, PyObject *values[],
    Py_ssize_t num_pos_args, Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs
);

/* CallCFunction.proto */
#define __Pyx_CallCFunction(cfunc, self, args)\
    ((PyCFunction)(void(*)(void))(cfunc)->func)(self, args)
#define __Pyx_CallCFunctionWithKeywords(cfunc, self, args, kwargs)\
    ((PyCFunctionWithKeywords)(void(*)(void))(cfunc)->func)(self, args, kwargs)
#define __Pyx_CallCFunctionFast(cfunc, self, args, nargs)\
    ((__Pyx_PyCFunctionFast)(void(*)(void))(PyCFunction)(cfunc)->func)(self, args, nargs)
#define __Pyx_CallCFunctionFastWithKeywords(cfunc, self, args, nargs, kwnames)\
    ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))(PyCFunction)(cfunc)->func)(self, args, nargs, kwnames)

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS
    __pyx_atomic_int_type initialized;
#endif
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
static CYTHON_INLINE int __Pyx_CachedCFunction_GetAndSetInitializing(__Pyx_CachedCFunction *cfunc) {
#if !CYTHON_ATOMICS
    return 1;
#else
    __pyx_nonatomic_int_type expected = 0;
    if (__pyx_atomic_int_cmp_exchange(&cfunc->initialized, &expected, 1)) {
        return 0;
    }
    return expected;
#endif
}
static CYTHON_INLINE void __Pyx_CachedCFunction_SetFinishedInitializing(__Pyx_CachedCFunction *cfunc) {
#if CYTHON_ATOMICS
    __pyx_atomic_store(&cfunc->initialized, 2);
#endif
}
#else
#define __Pyx_CachedCFunction_GetAndSetInitializing(cfunc) 2
#define __Pyx_CachedCFunction_SetFinishedInitializing(cfunc)
#endif

/* CallUnboundCMethod2.proto */
CYTHON_UNUSED
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectFastCallMethod.proto */
#if CYTHON_VECTORCALL && PY_VERSION_HEX >= 0x03090000
#define __Pyx_PyObject_FastCallMethod(name, args, nargsf) PyObject_VectorcallMethod(name, args, nargsf, NULL)
#else
static PyObject *__Pyx_PyObject_FastCallMethod(PyObject *name, PyObject *const *args, size_t nargsf);
#endif

/* PyUnicode_Substring.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Substring(
            PyObject* text, Py_ssize_t start, Py_ssize_t stop);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_mstate_global->__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* AssertionsEnabled.proto */
#if CYTHON_COMPILING_IN_LIMITED_API  ||  (CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030C0000)
  static int __pyx_assertions_enabled_flag;
  #define __pyx_assertions_enabled() (__pyx_assertions_enabled_flag)
  static int __Pyx_init_assertions_enabled(void) {
    PyObject *builtins, *debug, *debug_str;
    int flag;
    builtins = PyEval_GetBuiltins();
    if (!builtins) goto bad;
    debug_str = PyUnicode_FromStringAndSize("__debug__", 9);
    if (!debug_str) goto bad;
    debug = PyObject_GetItem(builtins, debug_str);
    Py_DECREF(debug_str);
    if (!debug) goto bad;
    flag = PyObject_IsTrue(debug);
    Py_DECREF(debug);
    if (flag == -1) goto bad;
    __pyx_assertions_enabled_flag = flag;
    return 0;
  bad:
    __pyx_assertions_enabled_flag = 1;
    return -1;
  }
#else
  #define __Pyx_init_assertions_enabled()  (0)
  #define __pyx_assertions_enabled()  (!Py_OptimizeFlag)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* RaiseClosureNameError.proto */
static void __Pyx_RaiseClosureNameError(const char *varname);

/* FixUpExtensionType.proto */
static CYTHON_INLINE int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* dict_setdefault.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value, int is_safe_type);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);

/* CallTypeTraverse.proto */
#if !CYTHON_USE_TYPE_SPECS || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x03090000)
#define __Pyx_call_type_traverse(o, always_call, visit, arg) 0
#else
static int __Pyx_call_type_traverse(PyObject *o, int always_call, visitproc visit, void *arg);
#endif

/* PyMethodNew.proto */
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ);

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL ||\
        (CYTHON_COMPILING_IN_LIMITED_API && CYTHON_METH_FASTCALL)
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    PyObject *defaults;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_mstate_global->__pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_mstate_global->__pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_mstate_global->__pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void));
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE PyObject *__Pyx_CyFunction_InitDefaults(PyObject *func,
                                                         PyTypeObject *defaults_type);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(const char* function_name, PyObject *kw);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)
#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);
#else
#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* RaiseUnboundLocalError.proto */
static void __Pyx_RaiseUnboundLocalError(const char *varname);

/* RejectKeywords.proto */
static void __Pyx_RejectKeywords(const char* function_name, PyObject *kwds);

/* PyObjectVectorCallKwBuilder.proto */
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);
#if CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03090000
#define __Pyx_Object_Vectorcall_CallFromBuilder PyObject_Vectorcall
#else
#define __Pyx_Object_Vectorcall_CallFromBuilder _PyObject_Vectorcall
#endif
#define __Pyx_MakeVectorcallBuilderKwds(n) PyTuple_New(n)
static int __Pyx_VectorcallBuilder_AddArg(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);
static int __Pyx_VectorcallBuilder_AddArgStr(const char *key, PyObject *value, PyObject *builder, PyObject **args, int n);
#else
#define __Pyx_Object_Vectorcall_CallFromBuilder __Pyx_PyObject_FastCallDict
#define __Pyx_MakeVectorcallBuilderKwds(n) __Pyx_PyDict_NewPresized(n)
#define __Pyx_VectorcallBuilder_AddArg(key, value, builder, args, n) PyDict_SetItem(builder, key, value)
#define __Pyx_VectorcallBuilder_AddArgStr(key, value, builder, args, n) PyDict_SetItemString(builder, key, value)
#endif

/* PyObjectVectorCallMethodKwBuilder.proto */
#if CYTHON_VECTORCALL && PY_VERSION_HEX >= 0x03090000
#define __Pyx_Object_VectorcallMethod_CallFromBuilder PyObject_VectorcallMethod
#else
static PyObject *__Pyx_Object_VectorcallMethod_CallFromBuilder(PyObject *name, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#endif

/* DefaultPlacementNew.proto */
#include <new>
template<typename T>
void __Pyx_default_placement_construct(T* x) {
    new (static_cast<void*>(x)) T();
}

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
static int __Pyx_MergeVtables(PyTypeObject *type);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_1_1
#define __PYX_HAVE_RT_ImportType_proto_3_1_1
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_1_1(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_1_1(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_1_1 {
   __Pyx_ImportType_CheckSize_Error_3_1_1 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_1_1 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_1_1 = 2
};
static PyTypeObject *__Pyx_ImportType_3_1_1(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_1_1 check_size);
#endif

/* ListPack.proto */
static PyObject *__Pyx_PyList_Pack(Py_ssize_t n, ...);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* LimitedApiGetTypeDict.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_GetTypeDict(PyTypeObject *tp);
#endif

/* SetItemOnTypeDict.proto */
static int __Pyx__SetItemOnTypeDict(PyTypeObject *tp, PyObject *k, PyObject *v);
#define __Pyx_SetItemOnTypeDict(tp, k, v) __Pyx__SetItemOnTypeDict((PyTypeObject*)tp, k, v)

/* CLineInTraceback.proto */
#if CYTHON_CLINE_IN_TRACEBACK && CYTHON_CLINE_IN_TRACEBACK_RUNTIME
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#else
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#endif

/* CodeObjectCache.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject __Pyx_CachedCodeObjectType;
#else
typedef PyCodeObject __Pyx_CachedCodeObjectType;
#endif
typedef struct {
    __Pyx_CachedCodeObjectType* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_int_type accessor_count;
  #endif
};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static __Pyx_CachedCodeObjectType *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, __Pyx_CachedCodeObjectType* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC;
static PyObject* __pyx_convert__to_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC(struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC s);
struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC;
static PyObject* __pyx_convert__to_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC(struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC s);
union __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC;
static PyObject* __pyx_convert__to_py_union____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC(union __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC s);
/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* UnicodeAsUCS4.proto */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject*);

struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC;
static PyObject* __pyx_convert__to_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC(struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC s);
/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_uint16_t(uint16_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_uint32_t(uint32_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_uint64_t(uint64_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE uint32_t __Pyx_PyLong_As_uint32_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyLong_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint64_t __Pyx_PyLong_As_uint64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE uint16_t __Pyx_PyLong_As_uint16_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyLong_As_size_t(PyObject *);

/* ObjectAsUCS4.proto */
static Py_UCS4 __Pyx__PyObject_AsPy_UCS4(PyObject*);
static CYTHON_INLINE Py_UCS4 __Pyx_PyObject_AsPy_UCS4(PyObject *x) {
    return (likely(PyUnicode_Check(x)) ? __Pyx_PyUnicode_AsPy_UCS4(x) : __Pyx__PyObject_AsPy_UCS4(x));
}

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
#define __Pyx_PyType_GetFullyQualifiedName PyType_GetFullyQualifiedName
#else
static __Pyx_TypeName __Pyx_PyType_GetFullyQualifiedName(PyTypeObject* tp);
#endif
#else  // !LIMITED_API
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetFullyQualifiedName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyLong_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2) {
    return PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2);
}
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#ifdef PyExceptionInstance_Check
  #define __Pyx_PyBaseException_Check(obj) PyExceptionInstance_Check(obj)
#else
  #define __Pyx_PyBaseException_Check(obj) __Pyx_TypeCheck(obj, PyExc_BaseException)
#endif

/* GetRuntimeVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* PyObjectDelAttr.proto */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030d0000
#define __Pyx_PyObject_DelAttr(o, n) PyObject_SetAttr(o, n, NULL)
#else
#define __Pyx_PyObject_DelAttr(o, n) PyObject_DelAttr(o, n)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   __Pyx_PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* VoidPtrExport.proto */
static int __Pyx_ExportVoidPtr(PyObject *name, void *p, const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction_3_1_1(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* MultiPhaseInitModuleState.proto */
#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE
static PyObject *__Pyx_State_FindModule(void*);
static int __Pyx_State_AddModule(PyObject* module, void*);
static int __Pyx_State_RemoveModule(void*);
#elif CYTHON_USE_MODULE_STATE
#define __Pyx_State_FindModule PyState_FindModule
#define __Pyx_State_AddModule PyState_AddModule
#define __Pyx_State_RemoveModule PyState_RemoveModule
#endif

/* #### Code section: module_declarations ### */
/* CythonABIVersion.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
    #if CYTHON_METH_FASTCALL
        #define __PYX_FASTCALL_ABI_SUFFIX  "_fastcall"
    #else
        #define __PYX_FASTCALL_ABI_SUFFIX
    #endif
    #define __PYX_LIMITED_ABI_SUFFIX "limited" __PYX_FASTCALL_ABI_SUFFIX __PYX_AM_SEND_ABI_SUFFIX
#else
    #define __PYX_LIMITED_ABI_SUFFIX
#endif
#if __PYX_HAS_PY_AM_SEND == 1
    #define __PYX_AM_SEND_ABI_SUFFIX
#elif __PYX_HAS_PY_AM_SEND == 2
    #define __PYX_AM_SEND_ABI_SUFFIX "amsendbackport"
#else
    #define __PYX_AM_SEND_ABI_SUFFIX "noamsend"
#endif
#ifndef __PYX_MONITORING_ABI_SUFFIX
    #define __PYX_MONITORING_ABI_SUFFIX
#endif
#if CYTHON_USE_TP_FINALIZE
    #define __PYX_TP_FINALIZE_ABI_SUFFIX
#else
    #define __PYX_TP_FINALIZE_ABI_SUFFIX "nofinalize"
#endif
#if CYTHON_USE_FREELISTS || !defined(__Pyx_AsyncGen_USED)
    #define __PYX_FREELISTS_ABI_SUFFIX
#else
    #define __PYX_FREELISTS_ABI_SUFFIX "nofreelists"
#endif
#define CYTHON_ABI  __PYX_ABI_VERSION __PYX_LIMITED_ABI_SUFFIX __PYX_MONITORING_ABI_SUFFIX __PYX_TP_FINALIZE_ABI_SUFFIX __PYX_FREELISTS_ABI_SUFFIX __PYX_AM_SEND_ABI_SUFFIX
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."

static uint32_t __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_add(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, PyObject *__pyx_v_form, PyObject *__pyx_v_lemma, int __pyx_skip_dispatch); /* proto*/
static uint32_t __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees__add(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, PyObject *__pyx_v_form, PyObject *__pyx_v_lemma); /* proto*/
static uint32_t __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees__tree_id(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_v_tree); /* proto*/
static PyObject *__pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_apply(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, uint32_t __pyx_v_tree_id, PyObject *__pyx_v_form, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees__apply(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, uint32_t __pyx_v_tree_id, PyObject *__pyx_v_form_part, PyObject *__pyx_v_lemma_pieces); /* proto*/
static PyObject *__pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_tree_to_str(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, uint32_t __pyx_v_tree_id, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from "libc.stdint" */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.unordered_map" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "cymem.cymem" */

/* Module declarations from "libcpp.set" */

/* Module declarations from "murmurhash.mrmr" */
static uint64_t (*__pyx_f_10murmurhash_4mrmr_hash64)(void *, int, uint64_t); /*proto*/

/* Module declarations from "preshed.maps" */

/* Module declarations from "spacy.typedefs" */

/* Module declarations from "spacy.strings" */

/* Module declarations from "libc.string" */

/* Module declarations from "libcpp.pair" */

/* Module declarations from "spacy.pipeline._edit_tree_internals.edit_trees" */
static uint32_t __pyx_v_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NULL_TREE_ID;
static CYTHON_INLINE struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_edittree_new_match(__pyx_t_5spacy_8typedefs_len_t, __pyx_t_5spacy_8typedefs_len_t, uint32_t, uint32_t); /*proto*/
static CYTHON_INLINE struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_edittree_new_subst(__pyx_t_5spacy_8typedefs_attr_t, __pyx_t_5spacy_8typedefs_attr_t); /*proto*/
static CYTHON_INLINE uint64_t __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_edittree_hash(struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC); /*proto*/
static CYTHON_INLINE int __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_lcs_is_empty(struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_LCS); /*proto*/
static struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_LCS __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_find_lcs(PyObject *, PyObject *); /*proto*/
static struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC(PyObject *); /*proto*/
static struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC(PyObject *); /*proto*/
static union __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC __pyx_convert__from_py_union____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC(PyObject *); /*proto*/
static struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC(PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "spacy.pipeline._edit_tree_internals.edit_trees"
extern int __pyx_module_is_main_spacy__pipeline___edit_tree_internals__edit_trees;
int __pyx_module_is_main_spacy__pipeline___edit_tree_internals__edit_trees = 0;

/* Implementation of "spacy.pipeline._edit_tree_internals.edit_trees" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_KeyError;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = "";
static const char __pyx_k_m[] = "(m ";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_s[] = "(s '";
static const char __pyx_k_AQ[] = "\240\032\320+<\270A\270Q";
static const char __pyx_k__2[] = "' '";
static const char __pyx_k__3[] = "')";
static const char __pyx_k__4[] = "()";
static const char __pyx_k__5[] = " ";
static const char __pyx_k__6[] = ")";
static const char __pyx_k__7[] = "\n";
static const char __pyx_k__8[] = ".";
static const char __pyx_k__9[] = "?";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_rb[] = "rb";
static const char __pyx_k_wb[] = "wb";
static const char __pyx_k_xq[] = "\230x\240q";
static const char __pyx_k_9AX[] = "\200\001\330\004\013\2109\220A\220X\230[\250\001\250\021";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_file[] = "file_";
static const char __pyx_k_form[] = "form";
static const char __pyx_k_func[] = "__func__";
static const char __pyx_k_list[] = "list";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_orig[] = "orig";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_tree[] = "tree";
static const char __pyx_k_util[] = "util";
static const char __pyx_k_E1026[] = "E1026";
static const char __pyx_k_E1029[] = "E1029";
static const char __pyx_k_E1030[] = "E1030";
static const char __pyx_k_apply[] = "apply";
static const char __pyx_k_bytes[] = "bytes";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_inner[] = "inner";
static const char __pyx_k_lemma[] = "lemma";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_subst[] = "subst";
static const char __pyx_k_trees[] = "trees";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_A_T_4y[] = "\200A\330\010\020\320\020%\240T\250\032\2604\260y\300\001";
static const char __pyx_k_Errors[] = "Errors";
static const char __pyx_k_c_tree[] = "c_tree";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_errors[] = "errors";
static const char __pyx_k_exists[] = "exists";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_lambda[] = "<lambda>";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_return[] = "return";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_schemas[] = "schemas";
static const char __pyx_k_strings[] = "strings";
static const char __pyx_k_to_disk[] = "to_disk";
static const char __pyx_k_tree_id[] = "tree_id";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_add_note[] = "add_note";
static const char __pyx_k_pyx_capi[] = "__pyx_capi__";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_to_bytes[] = "to_bytes";
static const char __pyx_k_EditTrees[] = "EditTrees";
static const char __pyx_k_Q_1A_F_AQ[] = "\210\001\340\014\020\220\r\230Q\330\020\031\230\032\2401\240A\330\020\024\220F\230*\240A\240Q";
static const char __pyx_k_dict2tree[] = "_dict2tree";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_from_disk[] = "from_disk";
static const char __pyx_k_from_json[] = "from_json";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_tree2dict[] = "_tree2dict";
static const char __pyx_k_tree_dict[] = "tree_dict";
static const char __pyx_k_tree_hash[] = "tree_hash";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_bytes_data[] = "bytes_data";
static const char __pyx_k_from_bytes[] = "from_bytes";
static const char __pyx_k_match_node[] = "match_node";
static const char __pyx_k_prefix_len[] = "prefix_len";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_subst_node[] = "subst_node";
static const char __pyx_k_suffix_len[] = "suffix_len";
static const char __pyx_k_tree_dicts[] = "tree_dicts";
static const char __pyx_k_trees_data[] = "trees_data";
static const char __pyx_k_EditTrees_2[] = "'EditTrees'";
static const char __pyx_k_StringStore[] = "StringStore";
static const char __pyx_k_ensure_path[] = "ensure_path";
static const char __pyx_k_prefix_tree[] = "prefix_tree";
static const char __pyx_k_serializers[] = "serializers";
static const char __pyx_k_suffix_tree[] = "suffix_tree";
static const char __pyx_k_t_q_ay_q_IQ[] = "\320\004)\250\021\330\010\017\210t\220<\230q\240\001\330\r\021\220\025\220a\220y\240\001\330\014\021\220\026\220q\230\004\230I\240Q";
static const char __pyx_k_tree_to_str[] = "tree_to_str";
static const char __pyx_k_NULL_TREE_ID[] = "NULL_TREE_ID";
static const char __pyx_k_Qk_Kq_O1_a_q[] = "\320\004%\240]\260!\330\010\t\360\014\000\t\031\230\001\330\010\025\220Q\220k\240\021\330\010\014\210K\220q\230\014\240O\2601\340\010\014\320\014\036\230a\340\010\017\210q";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_EditTrees_add[] = "EditTrees.add";
static const char __pyx_k_deserializers[] = "deserializers";
static const char __pyx_k_is_match_node[] = "is_match_node";
static const char __pyx_k_y_F_HA_Qa_j_a[] = "\320\004\037\230y\250\001\330\010\014\210F\220&\230\001\340\010\014\210H\220A\330\014\023\220:\230Q\230a\330\014\020\220\006\220j\240\001\240\021\340\010\014\320\014\036\230a";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_and_match_node[] = "' and 'match_node'";
static const char __pyx_k_and_subst_node[] = "' and 'subst_node'";
static const char __pyx_k_EditTrees_apply[] = "EditTrees.apply";
static const char __pyx_k_rebuild_tree_map[] = "_rebuild_tree_map";
static const char __pyx_k_EditTrees_to_disk[] = "EditTrees.to_disk";
static const char __pyx_k_deserialize_trees[] = "deserialize_trees";
static const char __pyx_k_EditTrees___reduce[] = "EditTrees.__reduce__";
static const char __pyx_k_EditTrees_to_bytes[] = "EditTrees.to_bytes";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_t1A_t1HAQ_t1HAQ_4q[] = "\200\001\330\004\007\200t\2101\210A\330\010\017\210t\2201\220H\230A\230Q\340\010\017\210t\2201\220H\230A\230Q\330\004\013\2104\210q\220\001";
static const char __pyx_k_unpickle_edittrees[] = "unpickle_edittrees";
static const char __pyx_k_validate_edit_tree[] = "validate_edit_tree";
static const char __pyx_k_EditTrees_from_disk[] = "EditTrees.from_disk";
static const char __pyx_k_EditTrees_from_json[] = "EditTrees.from_json";
static const char __pyx_k_EditTrees_from_bytes[] = "EditTrees.from_bytes";
static const char __pyx_k_EditTrees_tree_to_str[] = "EditTrees.tree_to_str";
static const char __pyx_k_match_node_subst_node[] = "match_node, subst_node";
static const char __pyx_k_to_bytes_locals_lambda[] = "to_bytes.<locals>.<lambda>";
static const char __pyx_k_1_t_q_4wa_U_9A_uE_4_1_q[] = "\320\004+\2501\330\010\017\210t\220<\230q\240\001\330\010\013\2104\210w\220a\330\021\025\220U\230!\2309\240A\330\020\027\220u\230E\240\021\330\014\023\2204\220{\240!\2401\340\010\017\210q";
static const char __pyx_k_A_3avS_c_A_Qc_N_4y_t5_q[] = "\200A\360\026\000\t\014\2103\210a\210v\220S\230\002\230$\230c\240\021\240'\250\023\250A\330\014\023\320\023%\240Q\240c\250\023\250N\270!\330\014\023\2204\220y\240\001\240\021\340\010\017\210t\2205\230\001\230\026\230q";
static const char __pyx_k_A_Q_HD_Qa_gQa_a_1Kq_t9A[] = "\320\004$\240A\330\010\025\220Q\330\010\014\210H\220D\230\001\330\014\023\220:\230Q\230a\330\014\026\220g\230Q\230a\340\010\026\220a\330\010\023\2201\220K\230q\340\010\017\210t\2209\230A\230]\250!";
static const char __pyx_k_A_83d_Q_AV1_q_q_q_1_r_aq[] = "\200A\360\020\000\t\014\2108\2203\220d\230&\240\005\240Q\330\014\022\220*\230A\230V\2401\340\010\027\220q\330\010\t\330\014\020\220\007\220q\230\t\240\026\240q\330\017\020\330\014\023\2201\330\010\017\210r\220\025\220a\220q";
static const char __pyx_k_from_bytes_locals_lambda[] = "from_bytes.<locals>.<lambda>";
static const char __pyx_k_q_q_j_vWAWD_Qa_4q_Cq_z_q_1[] = "\200\001\330\004\r\320\r\037\230q\240\001\330\004\007\200q\330\010\016\210j\230\001\230\026\230v\240W\250A\250W\260D\270\005\270Q\270a\340\004\013\2104\210q\220\001\330\004\007\200}\220C\220q\330\010\020\320\020!\240\026\240z\260\036\270q\340\010\020\320\020!\240\027\250\n\260.\300\001\340\004\013\2101";
static const char __pyx_k_A_D_a_KuAT_uA_T_q_Qa_G5_2_a[] = "\200A\360\014\000\t\r\210D\220\006\220a\340\010\014\210K\220u\230A\230T\240\026\240u\250A\330\014\025\220T\230\026\230q\240\001\330\014\030\230\r\240Q\240a\330\014\020\220\004\220G\2305\320 2\260!\260;\270a";
static const char __pyx_k_EditTrees__rebuild_tree_map[] = "EditTrees._rebuild_tree_map";
static const char __pyx_k_A_83d_Q_AV1_d_4t1_V1_2XT_Kt81JVW[] = "\200A\360\036\000\t\014\2108\2203\220d\230&\240\005\240Q\330\014\022\220*\230A\230V\2401\340\010\036\230d\240&\250\001\250\021\360\006\000\t\014\2104\210t\2201\330\014\031\230\024\230V\2401\330\014\023\2202\220X\230T\240\030\250\021\250*\260K\270t\3008\3101\310J\320VW\340\010%\240T\250\026\250q\340\010\026\220a\330\010\013\210:\220]\240#\240Q\330\014\032\230$\230l\250!\250:\260Q\340\010\026\220a\330\010\013\210:\220]\240#\240Q\330\014\032\230$\230l\250!\250:\260Q\340\010\017\210r\220\027\230\n\240.\260\n\270.\310\016\320VW";
static const char __pyx_k_More_than_one_union_attribute_pa[] = "More than one union attribute passed: '";
static const char __pyx_k_No_value_specified_for_any_of_th[] = "No value specified for any of the union attributes (%s)";
static const char __pyx_k_No_value_specified_for_struct_at[] = "No value specified for struct attribute 'prefix_len'";
static const char __pyx_k_Note_that_Cython_is_deliberately[] = "Note that Cython is deliberately stricter than PEP-484 and rejects subclasses of builtin types. If you need to pass subclasses then set the 'annotation_typing' directive to False.";
static const char __pyx_k_from_bytes_locals_deserialize_tr[] = "from_bytes.<locals>.deserialize_trees";
static const char __pyx_k_spacy_pipeline__edit_tree_intern[] = "spacy.pipeline._edit_tree_internals.edit_trees";
static const char __pyx_k_No_value_specified_for_struct_at_2[] = "No value specified for struct attribute 'suffix_len'";
static const char __pyx_k_No_value_specified_for_struct_at_3[] = "No value specified for struct attribute 'prefix_tree'";
static const char __pyx_k_No_value_specified_for_struct_at_4[] = "No value specified for struct attribute 'suffix_tree'";
static const char __pyx_k_No_value_specified_for_struct_at_5[] = "No value specified for struct attribute 'orig'";
static const char __pyx_k_No_value_specified_for_struct_at_6[] = "No value specified for struct attribute 'subst'";
static const char __pyx_k_No_value_specified_for_struct_at_7[] = "No value specified for struct attribute 'is_match_node'";
static const char __pyx_k_No_value_specified_for_struct_at_8[] = "No value specified for struct attribute 'inner'";
static const char __pyx_k_spacy_pipeline__edit_tree_intern_2[] = "spacy/pipeline/_edit_tree_internals/edit_trees.pyx";
/* #### Code section: decls ### */
static int __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees___init__(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, PyObject *__pyx_v_strings); /* proto */
static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_2add(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, PyObject *__pyx_v_form, PyObject *__pyx_v_lemma); /* proto */
static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_4apply(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, uint32_t __pyx_v_tree_id, PyObject *__pyx_v_form); /* proto */
static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_6tree_to_str(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, uint32_t __pyx_v_tree_id); /* proto */
static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_8from_json(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, PyObject *__pyx_v_trees); /* proto */
static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes_deserialize_trees(PyObject *__pyx_self, PyObject *__pyx_v_tree_dicts); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, PyObject *__pyx_v_bytes_data); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_12to_bytes(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_14to_disk(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, PyObject *__pyx_v_path, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_16from_disk(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, PyObject *__pyx_v_path, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_18__getitem__(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, PyObject *__pyx_v_idx); /* proto */
static Py_ssize_t __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_20__len__(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_22_rebuild_tree_map(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_24__reduce__(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_unpickle_edittrees(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_strings, PyObject *__pyx_v_trees_data); /* proto */
static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_2_tree2dict(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_tree); /* proto */
static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_4_dict2tree(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_tree); /* proto */
static PyObject *__pyx_tp_new_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
/* SmallCodeConfig */
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  PyTypeObject *__pyx_ptype_5cymem_5cymem_PyMalloc;
  PyTypeObject *__pyx_ptype_5cymem_5cymem_PyFree;
  PyTypeObject *__pyx_ptype_5cymem_5cymem_Pool;
  PyTypeObject *__pyx_ptype_5cymem_5cymem_Address;
  PyTypeObject *__pyx_ptype_7preshed_4maps_PreshMap;
  PyTypeObject *__pyx_ptype_7preshed_4maps_PreshMapArray;
  PyTypeObject *__pyx_ptype_5spacy_7strings_StringStore;
  PyObject *__pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees;
  PyObject *__pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes;
  PyObject *__pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes;
  PyTypeObject *__pyx_ptype_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees;
  PyTypeObject *__pyx_ptype_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes;
  PyTypeObject *__pyx_ptype_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes;
  __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_pop;
  PyObject *__pyx_tuple[1];
  PyObject *__pyx_codeobj_tab[16];
  PyObject *__pyx_string_tab[136];
/* #### Code section: module_state_contents ### */
/* CachedMethodType.module_state_decls */
#if CYTHON_COMPILING_IN_LIMITED_API
PyObject *__Pyx_CachedMethodType;
#endif


#if CYTHON_USE_FREELISTS
struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes *__pyx_freelist_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes[8];
int __pyx_freecount_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes;
#endif

#if CYTHON_USE_FREELISTS
struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes *__pyx_freelist_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes[8];
int __pyx_freecount_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes;
#endif
/* CodeObjectCache.module_state_decls */
struct __Pyx_CodeObjectCache __pyx_code_cache;

/* #### Code section: module_state_end ### */
} __pyx_mstatetype;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate_global (__Pyx_PyModule_GetState(__Pyx_State_FindModule(&__pyx_moduledef)))

#define __pyx_m (__Pyx_State_FindModule(&__pyx_moduledef))
#else
static __pyx_mstatetype __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstatetype * const __pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: constant_name_defines ### */
#define __pyx_n_u_ __pyx_string_tab[0]
#define __pyx_kp_u_ __pyx_string_tab[1]
#define __pyx_n_u_AssertionError __pyx_string_tab[2]
#define __pyx_n_u_E1026 __pyx_string_tab[3]
#define __pyx_n_u_E1029 __pyx_string_tab[4]
#define __pyx_n_u_E1030 __pyx_string_tab[5]
#define __pyx_n_u_EditTrees __pyx_string_tab[6]
#define __pyx_kp_u_EditTrees_2 __pyx_string_tab[7]
#define __pyx_n_u_EditTrees___reduce __pyx_string_tab[8]
#define __pyx_n_u_EditTrees__rebuild_tree_map __pyx_string_tab[9]
#define __pyx_n_u_EditTrees_add __pyx_string_tab[10]
#define __pyx_n_u_EditTrees_apply __pyx_string_tab[11]
#define __pyx_n_u_EditTrees_from_bytes __pyx_string_tab[12]
#define __pyx_n_u_EditTrees_from_disk __pyx_string_tab[13]
#define __pyx_n_u_EditTrees_from_json __pyx_string_tab[14]
#define __pyx_n_u_EditTrees_to_bytes __pyx_string_tab[15]
#define __pyx_n_u_EditTrees_to_disk __pyx_string_tab[16]
#define __pyx_n_u_EditTrees_tree_to_str __pyx_string_tab[17]
#define __pyx_n_u_Errors __pyx_string_tab[18]
#define __pyx_n_u_IndexError __pyx_string_tab[19]
#define __pyx_n_u_KeyError __pyx_string_tab[20]
#define __pyx_kp_u_More_than_one_union_attribute_pa __pyx_string_tab[21]
#define __pyx_n_u_NULL_TREE_ID __pyx_string_tab[22]
#define __pyx_kp_u_No_value_specified_for_any_of_th __pyx_string_tab[23]
#define __pyx_kp_u_No_value_specified_for_struct_at __pyx_string_tab[24]
#define __pyx_kp_u_No_value_specified_for_struct_at_2 __pyx_string_tab[25]
#define __pyx_kp_u_No_value_specified_for_struct_at_3 __pyx_string_tab[26]
#define __pyx_kp_u_No_value_specified_for_struct_at_4 __pyx_string_tab[27]
#define __pyx_kp_u_No_value_specified_for_struct_at_5 __pyx_string_tab[28]
#define __pyx_kp_u_No_value_specified_for_struct_at_6 __pyx_string_tab[29]
#define __pyx_kp_u_No_value_specified_for_struct_at_7 __pyx_string_tab[30]
#define __pyx_kp_u_No_value_specified_for_struct_at_8 __pyx_string_tab[31]
#define __pyx_kp_u_None __pyx_string_tab[32]
#define __pyx_kp_u_Note_that_Cython_is_deliberately __pyx_string_tab[33]
#define __pyx_n_u_StringStore __pyx_string_tab[34]
#define __pyx_n_u_ValueError __pyx_string_tab[35]
#define __pyx_kp_u__2 __pyx_string_tab[36]
#define __pyx_kp_u__3 __pyx_string_tab[37]
#define __pyx_kp_u__4 __pyx_string_tab[38]
#define __pyx_kp_u__5 __pyx_string_tab[39]
#define __pyx_kp_u__6 __pyx_string_tab[40]
#define __pyx_kp_u__7 __pyx_string_tab[41]
#define __pyx_kp_u__8 __pyx_string_tab[42]
#define __pyx_kp_u__9 __pyx_string_tab[43]
#define __pyx_n_u_add __pyx_string_tab[44]
#define __pyx_kp_u_add_note __pyx_string_tab[45]
#define __pyx_kp_u_and_match_node __pyx_string_tab[46]
#define __pyx_kp_u_and_subst_node __pyx_string_tab[47]
#define __pyx_n_u_apply __pyx_string_tab[48]
#define __pyx_n_u_asyncio_coroutines __pyx_string_tab[49]
#define __pyx_n_u_bytes __pyx_string_tab[50]
#define __pyx_n_u_bytes_data __pyx_string_tab[51]
#define __pyx_n_u_c_tree __pyx_string_tab[52]
#define __pyx_n_u_cline_in_traceback __pyx_string_tab[53]
#define __pyx_n_u_data __pyx_string_tab[54]
#define __pyx_n_u_deserialize_trees __pyx_string_tab[55]
#define __pyx_n_u_deserializers __pyx_string_tab[56]
#define __pyx_n_u_dict2tree __pyx_string_tab[57]
#define __pyx_kp_u_disable __pyx_string_tab[58]
#define __pyx_kp_u_enable __pyx_string_tab[59]
#define __pyx_n_u_ensure_path __pyx_string_tab[60]
#define __pyx_n_u_enter __pyx_string_tab[61]
#define __pyx_n_u_enumerate __pyx_string_tab[62]
#define __pyx_n_u_errors __pyx_string_tab[63]
#define __pyx_n_u_exists __pyx_string_tab[64]
#define __pyx_n_u_exit __pyx_string_tab[65]
#define __pyx_n_u_file __pyx_string_tab[66]
#define __pyx_n_u_form __pyx_string_tab[67]
#define __pyx_n_u_format __pyx_string_tab[68]
#define __pyx_n_u_from_bytes __pyx_string_tab[69]
#define __pyx_n_u_from_bytes_locals_deserialize_tr __pyx_string_tab[70]
#define __pyx_n_u_from_bytes_locals_lambda __pyx_string_tab[71]
#define __pyx_n_u_from_disk __pyx_string_tab[72]
#define __pyx_n_u_from_json __pyx_string_tab[73]
#define __pyx_n_u_func __pyx_string_tab[74]
#define __pyx_kp_u_gc __pyx_string_tab[75]
#define __pyx_n_u_inner __pyx_string_tab[76]
#define __pyx_n_u_is_coroutine __pyx_string_tab[77]
#define __pyx_n_u_is_match_node __pyx_string_tab[78]
#define __pyx_kp_u_isenabled __pyx_string_tab[79]
#define __pyx_n_u_kwargs __pyx_string_tab[80]
#define __pyx_n_u_lambda __pyx_string_tab[81]
#define __pyx_n_u_lemma __pyx_string_tab[82]
#define __pyx_n_u_list __pyx_string_tab[83]
#define __pyx_kp_u_m __pyx_string_tab[84]
#define __pyx_n_u_main __pyx_string_tab[85]
#define __pyx_n_u_match_node __pyx_string_tab[86]
#define __pyx_kp_u_match_node_subst_node __pyx_string_tab[87]
#define __pyx_n_u_module __pyx_string_tab[88]
#define __pyx_n_u_n __pyx_string_tab[89]
#define __pyx_n_u_name __pyx_string_tab[90]
#define __pyx_n_u_open __pyx_string_tab[91]
#define __pyx_n_u_orig __pyx_string_tab[92]
#define __pyx_n_u_path __pyx_string_tab[93]
#define __pyx_n_u_pop __pyx_string_tab[94]
#define __pyx_n_u_prefix_len __pyx_string_tab[95]
#define __pyx_n_u_prefix_tree __pyx_string_tab[96]
#define __pyx_n_u_pyx_capi __pyx_string_tab[97]
#define __pyx_n_u_pyx_vtable __pyx_string_tab[98]
#define __pyx_n_u_qualname __pyx_string_tab[99]
#define __pyx_n_u_range __pyx_string_tab[100]
#define __pyx_n_u_rb __pyx_string_tab[101]
#define __pyx_n_u_read __pyx_string_tab[102]
#define __pyx_n_u_rebuild_tree_map __pyx_string_tab[103]
#define __pyx_n_u_reduce __pyx_string_tab[104]
#define __pyx_n_u_return __pyx_string_tab[105]
#define __pyx_kp_u_s __pyx_string_tab[106]
#define __pyx_n_u_schemas __pyx_string_tab[107]
#define __pyx_n_u_self __pyx_string_tab[108]
#define __pyx_n_u_serializers __pyx_string_tab[109]
#define __pyx_n_u_set_name __pyx_string_tab[110]
#define __pyx_n_u_spacy_pipeline__edit_tree_intern __pyx_string_tab[111]
#define __pyx_kp_u_spacy_pipeline__edit_tree_intern_2 __pyx_string_tab[112]
#define __pyx_n_u_strings __pyx_string_tab[113]
#define __pyx_n_u_subst __pyx_string_tab[114]
#define __pyx_n_u_subst_node __pyx_string_tab[115]
#define __pyx_n_u_suffix_len __pyx_string_tab[116]
#define __pyx_n_u_suffix_tree __pyx_string_tab[117]
#define __pyx_n_u_test __pyx_string_tab[118]
#define __pyx_n_u_to_bytes __pyx_string_tab[119]
#define __pyx_n_u_to_bytes_locals_lambda __pyx_string_tab[120]
#define __pyx_n_u_to_disk __pyx_string_tab[121]
#define __pyx_n_u_tree __pyx_string_tab[122]
#define __pyx_n_u_tree2dict __pyx_string_tab[123]
#define __pyx_n_u_tree_dict __pyx_string_tab[124]
#define __pyx_n_u_tree_dicts __pyx_string_tab[125]
#define __pyx_n_u_tree_hash __pyx_string_tab[126]
#define __pyx_n_u_tree_id __pyx_string_tab[127]
#define __pyx_n_u_tree_to_str __pyx_string_tab[128]
#define __pyx_n_u_trees __pyx_string_tab[129]
#define __pyx_n_u_trees_data __pyx_string_tab[130]
#define __pyx_n_u_unpickle_edittrees __pyx_string_tab[131]
#define __pyx_n_u_util __pyx_string_tab[132]
#define __pyx_n_u_validate_edit_tree __pyx_string_tab[133]
#define __pyx_n_u_wb __pyx_string_tab[134]
#define __pyx_n_u_write __pyx_string_tab[135]
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __pyx_m_clear(PyObject *m) {
  __pyx_mstatetype *clear_module_state = __Pyx_PyModule_GetState(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __Pyx_State_RemoveModule(NULL);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_5cymem_5cymem_PyMalloc);
  Py_CLEAR(clear_module_state->__pyx_ptype_5cymem_5cymem_PyFree);
  Py_CLEAR(clear_module_state->__pyx_ptype_5cymem_5cymem_Pool);
  Py_CLEAR(clear_module_state->__pyx_ptype_5cymem_5cymem_Address);
  Py_CLEAR(clear_module_state->__pyx_ptype_7preshed_4maps_PreshMap);
  Py_CLEAR(clear_module_state->__pyx_ptype_7preshed_4maps_PreshMapArray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5spacy_7strings_StringStore);
  Py_CLEAR(clear_module_state->__pyx_ptype_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees);
  Py_CLEAR(clear_module_state->__pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees);
  Py_CLEAR(clear_module_state->__pyx_ptype_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes);
  Py_CLEAR(clear_module_state->__pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes);
  Py_CLEAR(clear_module_state->__pyx_ptype_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes);
  Py_CLEAR(clear_module_state->__pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes);
  for (int i=0; i<1; ++i) { Py_CLEAR(clear_module_state->__pyx_tuple[i]); }
  for (int i=0; i<16; ++i) { Py_CLEAR(clear_module_state->__pyx_codeobj_tab[i]); }
  for (int i=0; i<136; ++i) { Py_CLEAR(clear_module_state->__pyx_string_tab[i]); }
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstatetype *traverse_module_state = __Pyx_PyModule_GetState(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_tuple);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_bytes);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_5cymem_5cymem_PyMalloc);
  Py_VISIT(traverse_module_state->__pyx_ptype_5cymem_5cymem_PyFree);
  Py_VISIT(traverse_module_state->__pyx_ptype_5cymem_5cymem_Pool);
  Py_VISIT(traverse_module_state->__pyx_ptype_5cymem_5cymem_Address);
  Py_VISIT(traverse_module_state->__pyx_ptype_7preshed_4maps_PreshMap);
  Py_VISIT(traverse_module_state->__pyx_ptype_7preshed_4maps_PreshMapArray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5spacy_7strings_StringStore);
  Py_VISIT(traverse_module_state->__pyx_ptype_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees);
  Py_VISIT(traverse_module_state->__pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees);
  Py_VISIT(traverse_module_state->__pyx_ptype_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes);
  Py_VISIT(traverse_module_state->__pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes);
  Py_VISIT(traverse_module_state->__pyx_ptype_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes);
  Py_VISIT(traverse_module_state->__pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes);
  for (int i=0; i<1; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_tuple[i]); }
  for (int i=0; i<16; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_codeobj_tab[i]); }
  for (int i=0; i<136; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_string_tab[i]); }
  return 0;
}
#endif
/* #### Code section: module_code ### */

/* "FromPyStructUtility":11
 *     int __Pyx_RaiseUnexpectedTypeError(const char *expected, object obj) except 0
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC")             # <<<<<<<<<<<<<<
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC(obj) except *:
 *     cdef struct_type result
*/

static struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC(PyObject *__pyx_v_obj) {
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC __pyx_v_result;
  PyObject *__pyx_v_value = NULL;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  size_t __pyx_t_12;
  __pyx_t_5spacy_8typedefs_len_t __pyx_t_13;
  uint32_t __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC", 0);

  /* "FromPyStructUtility":14
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
*/
  __pyx_t_1 = (!PyMapping_Check(__pyx_v_obj));
  if (__pyx_t_1) {

    /* "FromPyStructUtility":15
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)             # <<<<<<<<<<<<<<
 * 
 *     try:
*/
    __pyx_t_2 = __Pyx_RaiseUnexpectedTypeError(((char const *)"a mapping"), __pyx_v_obj); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 15, __pyx_L1_error)

    /* "FromPyStructUtility":14
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
*/
  }

  /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['prefix_len']
 *     except KeyError:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":18
 * 
 *     try:
 *         value = obj['prefix_len']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'prefix_len'")
*/
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_mstate_global->__pyx_n_u_prefix_len); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 18, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_v_value = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['prefix_len']
 *     except KeyError:
*/
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "FromPyStructUtility":19
 *     try:
 *         value = obj['prefix_len']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'prefix_len'")
 *     result.prefix_len = value
*/
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(1, 19, __pyx_L6_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);

      /* "FromPyStructUtility":20
 *         value = obj['prefix_len']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'prefix_len'")             # <<<<<<<<<<<<<<
 *     result.prefix_len = value
 *     try:
*/
      __pyx_t_10 = NULL;
      __Pyx_INCREF(__pyx_builtin_ValueError);
      __pyx_t_11 = __pyx_builtin_ValueError; 
      __pyx_t_12 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_mstate_global->__pyx_kp_u_No_value_specified_for_struct_at};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 20, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 20, __pyx_L6_except_error)
    }
    goto __pyx_L6_except_error;

    /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['prefix_len']
 *     except KeyError:
*/
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "FromPyStructUtility":21
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'prefix_len'")
 *     result.prefix_len = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['suffix_len']
*/
  __pyx_t_13 = __Pyx_PyLong_As_uint16_t(__pyx_v_value); if (unlikely((__pyx_t_13 == ((uint16_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 21, __pyx_L1_error)
  __pyx_v_result.prefix_len = __pyx_t_13;

  /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'prefix_len'")
 *     result.prefix_len = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['suffix_len']
 *     except KeyError:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":23
 *     result.prefix_len = value
 *     try:
 *         value = obj['suffix_len']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'suffix_len'")
*/
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_mstate_global->__pyx_n_u_suffix_len); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 23, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'prefix_len'")
 *     result.prefix_len = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['suffix_len']
 *     except KeyError:
*/
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L17_try_end;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":24
 *     try:
 *         value = obj['suffix_len']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'suffix_len'")
 *     result.suffix_len = value
*/
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_6) < 0) __PYX_ERR(1, 24, __pyx_L14_except_error)
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_6);

      /* "FromPyStructUtility":25
 *         value = obj['suffix_len']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'suffix_len'")             # <<<<<<<<<<<<<<
 *     result.suffix_len = value
 *     try:
*/
      __pyx_t_11 = NULL;
      __Pyx_INCREF(__pyx_builtin_ValueError);
      __pyx_t_10 = __pyx_builtin_ValueError; 
      __pyx_t_12 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_mstate_global->__pyx_kp_u_No_value_specified_for_struct_at_2};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 25, __pyx_L14_except_error)
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 25, __pyx_L14_except_error)
    }
    goto __pyx_L14_except_error;

    /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'prefix_len'")
 *     result.prefix_len = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['suffix_len']
 *     except KeyError:
*/
    __pyx_L14_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L17_try_end:;
  }

  /* "FromPyStructUtility":26
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'suffix_len'")
 *     result.suffix_len = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['prefix_tree']
*/
  __pyx_t_13 = __Pyx_PyLong_As_uint16_t(__pyx_v_value); if (unlikely((__pyx_t_13 == ((uint16_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 26, __pyx_L1_error)
  __pyx_v_result.suffix_len = __pyx_t_13;

  /* "FromPyStructUtility":27
 *         raise ValueError("No value specified for struct attribute 'suffix_len'")
 *     result.suffix_len = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['prefix_tree']
 *     except KeyError:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":28
 *     result.suffix_len = value
 *     try:
 *         value = obj['prefix_tree']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'prefix_tree'")
*/
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_mstate_global->__pyx_n_u_prefix_tree); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 28, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "FromPyStructUtility":27
 *         raise ValueError("No value specified for struct attribute 'suffix_len'")
 *     result.suffix_len = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['prefix_tree']
 *     except KeyError:
*/
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L25_try_end;
    __pyx_L20_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":29
 *     try:
 *         value = obj['prefix_tree']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'prefix_tree'")
 *     result.prefix_tree = value
*/
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(1, 29, __pyx_L22_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);

      /* "FromPyStructUtility":30
 *         value = obj['prefix_tree']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'prefix_tree'")             # <<<<<<<<<<<<<<
 *     result.prefix_tree = value
 *     try:
*/
      __pyx_t_10 = NULL;
      __Pyx_INCREF(__pyx_builtin_ValueError);
      __pyx_t_11 = __pyx_builtin_ValueError; 
      __pyx_t_12 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_mstate_global->__pyx_kp_u_No_value_specified_for_struct_at_3};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 30, __pyx_L22_except_error)
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 30, __pyx_L22_except_error)
    }
    goto __pyx_L22_except_error;

    /* "FromPyStructUtility":27
 *         raise ValueError("No value specified for struct attribute 'suffix_len'")
 *     result.suffix_len = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['prefix_tree']
 *     except KeyError:
*/
    __pyx_L22_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L25_try_end:;
  }

  /* "FromPyStructUtility":31
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'prefix_tree'")
 *     result.prefix_tree = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['suffix_tree']
*/
  __pyx_t_14 = __Pyx_PyLong_As_uint32_t(__pyx_v_value); if (unlikely((__pyx_t_14 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 31, __pyx_L1_error)
  __pyx_v_result.prefix_tree = __pyx_t_14;

  /* "FromPyStructUtility":32
 *         raise ValueError("No value specified for struct attribute 'prefix_tree'")
 *     result.prefix_tree = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['suffix_tree']
 *     except KeyError:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":33
 *     result.prefix_tree = value
 *     try:
 *         value = obj['suffix_tree']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'suffix_tree'")
*/
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_mstate_global->__pyx_n_u_suffix_tree); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 33, __pyx_L28_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":32
 *         raise ValueError("No value specified for struct attribute 'prefix_tree'")
 *     result.prefix_tree = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['suffix_tree']
 *     except KeyError:
*/
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L33_try_end;
    __pyx_L28_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":34
 *     try:
 *         value = obj['suffix_tree']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'suffix_tree'")
 *     result.suffix_tree = value
*/
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_6) < 0) __PYX_ERR(1, 34, __pyx_L30_except_error)
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_6);

      /* "FromPyStructUtility":35
 *         value = obj['suffix_tree']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'suffix_tree'")             # <<<<<<<<<<<<<<
 *     result.suffix_tree = value
 *     return result
*/
      __pyx_t_11 = NULL;
      __Pyx_INCREF(__pyx_builtin_ValueError);
      __pyx_t_10 = __pyx_builtin_ValueError; 
      __pyx_t_12 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_mstate_global->__pyx_kp_u_No_value_specified_for_struct_at_4};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 35, __pyx_L30_except_error)
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 35, __pyx_L30_except_error)
    }
    goto __pyx_L30_except_error;

    /* "FromPyStructUtility":32
 *         raise ValueError("No value specified for struct attribute 'prefix_tree'")
 *     result.prefix_tree = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['suffix_tree']
 *     except KeyError:
*/
    __pyx_L30_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L33_try_end:;
  }

  /* "FromPyStructUtility":36
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'suffix_tree'")
 *     result.suffix_tree = value             # <<<<<<<<<<<<<<
 *     return result
 * 
*/
  __pyx_t_14 = __Pyx_PyLong_As_uint32_t(__pyx_v_value); if (unlikely((__pyx_t_14 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 36, __pyx_L1_error)
  __pyx_v_result.suffix_tree = __pyx_t_14;

  /* "FromPyStructUtility":37
 *         raise ValueError("No value specified for struct attribute 'suffix_tree'")
 *     result.suffix_tree = value
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "FromPyStructUtility":11
 *     int __Pyx_RaiseUnexpectedTypeError(const char *expected, object obj) except 0
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC")             # <<<<<<<<<<<<<<
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC(obj) except *:
 *     cdef struct_type result
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC(PyObject *__pyx_v_obj) {
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC __pyx_v_result;
  PyObject *__pyx_v_value = NULL;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  size_t __pyx_t_12;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC", 0);

  /* "FromPyStructUtility":14
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
*/
  __pyx_t_1 = (!PyMapping_Check(__pyx_v_obj));
  if (__pyx_t_1) {

    /* "FromPyStructUtility":15
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)             # <<<<<<<<<<<<<<
 * 
 *     try:
*/
    __pyx_t_2 = __Pyx_RaiseUnexpectedTypeError(((char const *)"a mapping"), __pyx_v_obj); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 15, __pyx_L1_error)

    /* "FromPyStructUtility":14
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
*/
  }

  /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['orig']
 *     except KeyError:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":18
 * 
 *     try:
 *         value = obj['orig']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'orig'")
*/
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_mstate_global->__pyx_n_u_orig); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 18, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_v_value = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['orig']
 *     except KeyError:
*/
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "FromPyStructUtility":19
 *     try:
 *         value = obj['orig']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'orig'")
 *     result.orig = value
*/
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(1, 19, __pyx_L6_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);

      /* "FromPyStructUtility":20
 *         value = obj['orig']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'orig'")             # <<<<<<<<<<<<<<
 *     result.orig = value
 *     try:
*/
      __pyx_t_10 = NULL;
      __Pyx_INCREF(__pyx_builtin_ValueError);
      __pyx_t_11 = __pyx_builtin_ValueError; 
      __pyx_t_12 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_mstate_global->__pyx_kp_u_No_value_specified_for_struct_at_5};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 20, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 20, __pyx_L6_except_error)
    }
    goto __pyx_L6_except_error;

    /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['orig']
 *     except KeyError:
*/
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "FromPyStructUtility":21
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'orig'")
 *     result.orig = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['subst']
*/
  __pyx_t_13 = __Pyx_PyLong_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_13 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 21, __pyx_L1_error)
  __pyx_v_result.orig = __pyx_t_13;

  /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'orig'")
 *     result.orig = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['subst']
 *     except KeyError:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":23
 *     result.orig = value
 *     try:
 *         value = obj['subst']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'subst'")
*/
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_mstate_global->__pyx_n_u_subst); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 23, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'orig'")
 *     result.orig = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['subst']
 *     except KeyError:
*/
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L17_try_end;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":24
 *     try:
 *         value = obj['subst']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'subst'")
 *     result.subst = value
*/
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_6) < 0) __PYX_ERR(1, 24, __pyx_L14_except_error)
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_6);

      /* "FromPyStructUtility":25
 *         value = obj['subst']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'subst'")             # <<<<<<<<<<<<<<
 *     result.subst = value
 *     return result
*/
      __pyx_t_11 = NULL;
      __Pyx_INCREF(__pyx_builtin_ValueError);
      __pyx_t_10 = __pyx_builtin_ValueError; 
      __pyx_t_12 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_mstate_global->__pyx_kp_u_No_value_specified_for_struct_at_6};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 25, __pyx_L14_except_error)
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 25, __pyx_L14_except_error)
    }
    goto __pyx_L14_except_error;

    /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'orig'")
 *     result.orig = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['subst']
 *     except KeyError:
*/
    __pyx_L14_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L17_try_end:;
  }

  /* "FromPyStructUtility":26
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'subst'")
 *     result.subst = value             # <<<<<<<<<<<<<<
 *     return result
 * 
*/
  __pyx_t_13 = __Pyx_PyLong_As_uint64_t(__pyx_v_value); if (unlikely((__pyx_t_13 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 26, __pyx_L1_error)
  __pyx_v_result.subst = __pyx_t_13;

  /* "FromPyStructUtility":27
 *         raise ValueError("No value specified for struct attribute 'subst'")
 *     result.subst = value
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "FromPyStructUtility":11
 *     int __Pyx_RaiseUnexpectedTypeError(const char *expected, object obj) except 0
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC")             # <<<<<<<<<<<<<<
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC(obj) except *:
 *     cdef struct_type result
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "FromPyUnionUtility":37
 *     int __Pyx_RaiseUnexpectedTypeError(const char *expected, object obj) except 0
 * 
 * @cname("__pyx_convert__from_py_union____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC")             # <<<<<<<<<<<<<<
 * cdef struct_type __pyx_convert__from_py_union____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC(obj) except *:
 *     cdef struct_type result
*/

static union __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC __pyx_convert__from_py_union____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC(PyObject *__pyx_v_obj) {
  union __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC __pyx_v_result;
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_v_last_found = NULL;
  union __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8[3];
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC __pyx_t_11;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert__from_py_union____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC", 0);

  /* "FromPyUnionUtility":41
 *     cdef struct_type result
 *     cdef Py_ssize_t length
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
*/
  __pyx_t_1 = (!PyMapping_Check(__pyx_v_obj));
  if (__pyx_t_1) {

    /* "FromPyUnionUtility":42
 *     cdef Py_ssize_t length
 *     if not PyMapping_Check(obj):
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)             # <<<<<<<<<<<<<<
 * 
 *     last_found = None
*/
    __pyx_t_2 = __Pyx_RaiseUnexpectedTypeError(((char const *)"a mapping"), __pyx_v_obj); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 42, __pyx_L1_error)

    /* "FromPyUnionUtility":41
 *     cdef struct_type result
 *     cdef Py_ssize_t length
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
*/
  }

  /* "FromPyUnionUtility":44
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     last_found = None             # <<<<<<<<<<<<<<
 *     length = len(obj)
 *     if length:
*/
  __Pyx_INCREF(Py_None);
  __pyx_v_last_found = ((PyObject*)Py_None);

  /* "FromPyUnionUtility":45
 * 
 *     last_found = None
 *     length = len(obj)             # <<<<<<<<<<<<<<
 *     if length:
 *         if 'match_node' in obj:
*/
  __pyx_t_3 = PyObject_Length(__pyx_v_obj); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 45, __pyx_L1_error)
  __pyx_v_length = __pyx_t_3;

  /* "FromPyUnionUtility":46
 *     last_found = None
 *     length = len(obj)
 *     if length:             # <<<<<<<<<<<<<<
 *         if 'match_node' in obj:
 *             if last_found is not None:
*/
  __pyx_t_1 = (__pyx_v_length != 0);
  if (__pyx_t_1) {

    /* "FromPyUnionUtility":47
 *     length = len(obj)
 *     if length:
 *         if 'match_node' in obj:             # <<<<<<<<<<<<<<
 *             if last_found is not None:
 *                 raise ValueError("More than one union attribute passed: '%s' and '%s'" % (last_found, 'match_node'))
*/
    __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_n_u_match_node, __pyx_v_obj, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 47, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "FromPyUnionUtility":48
 *     if length:
 *         if 'match_node' in obj:
 *             if last_found is not None:             # <<<<<<<<<<<<<<
 *                 raise ValueError("More than one union attribute passed: '%s' and '%s'" % (last_found, 'match_node'))
 *             last_found = 'match_node'
*/
      __pyx_t_1 = (__pyx_v_last_found != ((PyObject*)Py_None));
      if (unlikely(__pyx_t_1)) {

        /* "FromPyUnionUtility":49
 *         if 'match_node' in obj:
 *             if last_found is not None:
 *                 raise ValueError("More than one union attribute passed: '%s' and '%s'" % (last_found, 'match_node'))             # <<<<<<<<<<<<<<
 *             last_found = 'match_node'
 *             result.match_node = obj['match_node']
*/
        __pyx_t_5 = NULL;
        __Pyx_INCREF(__pyx_builtin_ValueError);
        __pyx_t_6 = __pyx_builtin_ValueError; 
        __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_v_last_found); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 49, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8[0] = __pyx_mstate_global->__pyx_kp_u_More_than_one_union_attribute_pa;
        __pyx_t_8[1] = __pyx_t_7;
        __pyx_t_8[2] = __pyx_mstate_global->__pyx_kp_u_and_match_node;
        __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_8, 3, 39 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7) + 18, 127 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7));
        if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 49, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_10 = 1;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_9};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 49, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 49, __pyx_L1_error)

        /* "FromPyUnionUtility":48
 *     if length:
 *         if 'match_node' in obj:
 *             if last_found is not None:             # <<<<<<<<<<<<<<
 *                 raise ValueError("More than one union attribute passed: '%s' and '%s'" % (last_found, 'match_node'))
 *             last_found = 'match_node'
*/
      }

      /* "FromPyUnionUtility":50
 *             if last_found is not None:
 *                 raise ValueError("More than one union attribute passed: '%s' and '%s'" % (last_found, 'match_node'))
 *             last_found = 'match_node'             # <<<<<<<<<<<<<<
 *             result.match_node = obj['match_node']
 *             length -= 1
*/
      __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_match_node);
      __Pyx_DECREF_SET(__pyx_v_last_found, __pyx_mstate_global->__pyx_n_u_match_node);

      /* "FromPyUnionUtility":51
 *                 raise ValueError("More than one union attribute passed: '%s' and '%s'" % (last_found, 'match_node'))
 *             last_found = 'match_node'
 *             result.match_node = obj['match_node']             # <<<<<<<<<<<<<<
 *             length -= 1
 *             if not length:
*/
      __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_mstate_global->__pyx_n_u_match_node); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 51, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_result.match_node = __pyx_t_11;

      /* "FromPyUnionUtility":52
 *             last_found = 'match_node'
 *             result.match_node = obj['match_node']
 *             length -= 1             # <<<<<<<<<<<<<<
 *             if not length:
 *                 return result
*/
      __pyx_v_length = (__pyx_v_length - 1);

      /* "FromPyUnionUtility":53
 *             result.match_node = obj['match_node']
 *             length -= 1
 *             if not length:             # <<<<<<<<<<<<<<
 *                 return result
 *         if 'subst_node' in obj:
*/
      __pyx_t_1 = (!(__pyx_v_length != 0));
      if (__pyx_t_1) {

        /* "FromPyUnionUtility":54
 *             length -= 1
 *             if not length:
 *                 return result             # <<<<<<<<<<<<<<
 *         if 'subst_node' in obj:
 *             if last_found is not None:
*/
        __pyx_r = __pyx_v_result;
        goto __pyx_L0;

        /* "FromPyUnionUtility":53
 *             result.match_node = obj['match_node']
 *             length -= 1
 *             if not length:             # <<<<<<<<<<<<<<
 *                 return result
 *         if 'subst_node' in obj:
*/
      }

      /* "FromPyUnionUtility":47
 *     length = len(obj)
 *     if length:
 *         if 'match_node' in obj:             # <<<<<<<<<<<<<<
 *             if last_found is not None:
 *                 raise ValueError("More than one union attribute passed: '%s' and '%s'" % (last_found, 'match_node'))
*/
    }

    /* "FromPyUnionUtility":55
 *             if not length:
 *                 return result
 *         if 'subst_node' in obj:             # <<<<<<<<<<<<<<
 *             if last_found is not None:
 *                 raise ValueError("More than one union attribute passed: '%s' and '%s'" % (last_found, 'subst_node'))
*/
    __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_n_u_subst_node, __pyx_v_obj, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 55, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "FromPyUnionUtility":56
 *                 return result
 *         if 'subst_node' in obj:
 *             if last_found is not None:             # <<<<<<<<<<<<<<
 *                 raise ValueError("More than one union attribute passed: '%s' and '%s'" % (last_found, 'subst_node'))
 *             last_found = 'subst_node'
*/
      __pyx_t_1 = (__pyx_v_last_found != ((PyObject*)Py_None));
      if (unlikely(__pyx_t_1)) {

        /* "FromPyUnionUtility":57
 *         if 'subst_node' in obj:
 *             if last_found is not None:
 *                 raise ValueError("More than one union attribute passed: '%s' and '%s'" % (last_found, 'subst_node'))             # <<<<<<<<<<<<<<
 *             last_found = 'subst_node'
 *             result.subst_node = obj['subst_node']
*/
        __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_builtin_ValueError);
        __pyx_t_9 = __pyx_builtin_ValueError; 
        __pyx_t_5 = __Pyx_PyUnicode_Unicode(__pyx_v_last_found); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 57, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8[0] = __pyx_mstate_global->__pyx_kp_u_More_than_one_union_attribute_pa;
        __pyx_t_8[1] = __pyx_t_5;
        __pyx_t_8[2] = __pyx_mstate_global->__pyx_kp_u_and_subst_node;
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_8, 3, 39 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5) + 18, 127 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5));
        if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 57, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_10 = 1;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_7};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 57, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 57, __pyx_L1_error)

        /* "FromPyUnionUtility":56
 *                 return result
 *         if 'subst_node' in obj:
 *             if last_found is not None:             # <<<<<<<<<<<<<<
 *                 raise ValueError("More than one union attribute passed: '%s' and '%s'" % (last_found, 'subst_node'))
 *             last_found = 'subst_node'
*/
      }

      /* "FromPyUnionUtility":58
 *             if last_found is not None:
 *                 raise ValueError("More than one union attribute passed: '%s' and '%s'" % (last_found, 'subst_node'))
 *             last_found = 'subst_node'             # <<<<<<<<<<<<<<
 *             result.subst_node = obj['subst_node']
 *             length -= 1
*/
      __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_subst_node);
      __Pyx_DECREF_SET(__pyx_v_last_found, __pyx_mstate_global->__pyx_n_u_subst_node);

      /* "FromPyUnionUtility":59
 *                 raise ValueError("More than one union attribute passed: '%s' and '%s'" % (last_found, 'subst_node'))
 *             last_found = 'subst_node'
 *             result.subst_node = obj['subst_node']             # <<<<<<<<<<<<<<
 *             length -= 1
 *             if not length:
*/
      __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_mstate_global->__pyx_n_u_subst_node); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 59, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 59, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_result.subst_node = __pyx_t_12;

      /* "FromPyUnionUtility":60
 *             last_found = 'subst_node'
 *             result.subst_node = obj['subst_node']
 *             length -= 1             # <<<<<<<<<<<<<<
 *             if not length:
 *                 return result
*/
      __pyx_v_length = (__pyx_v_length - 1);

      /* "FromPyUnionUtility":61
 *             result.subst_node = obj['subst_node']
 *             length -= 1
 *             if not length:             # <<<<<<<<<<<<<<
 *                 return result
 *     if last_found is None:
*/
      __pyx_t_1 = (!(__pyx_v_length != 0));
      if (__pyx_t_1) {

        /* "FromPyUnionUtility":62
 *             length -= 1
 *             if not length:
 *                 return result             # <<<<<<<<<<<<<<
 *     if last_found is None:
 *         raise ValueError("No value specified for any of the union attributes (%s)" %
*/
        __pyx_r = __pyx_v_result;
        goto __pyx_L0;

        /* "FromPyUnionUtility":61
 *             result.subst_node = obj['subst_node']
 *             length -= 1
 *             if not length:             # <<<<<<<<<<<<<<
 *                 return result
 *     if last_found is None:
*/
      }

      /* "FromPyUnionUtility":55
 *             if not length:
 *                 return result
 *         if 'subst_node' in obj:             # <<<<<<<<<<<<<<
 *             if last_found is not None:
 *                 raise ValueError("More than one union attribute passed: '%s' and '%s'" % (last_found, 'subst_node'))
*/
    }

    /* "FromPyUnionUtility":46
 *     last_found = None
 *     length = len(obj)
 *     if length:             # <<<<<<<<<<<<<<
 *         if 'match_node' in obj:
 *             if last_found is not None:
*/
  }

  /* "FromPyUnionUtility":63
 *             if not length:
 *                 return result
 *     if last_found is None:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for any of the union attributes (%s)" %
 *                          'match_node, subst_node')
*/
  __pyx_t_1 = (__pyx_v_last_found == ((PyObject*)Py_None));
  if (unlikely(__pyx_t_1)) {

    /* "FromPyUnionUtility":64
 *                 return result
 *     if last_found is None:
 *         raise ValueError("No value specified for any of the union attributes (%s)" %             # <<<<<<<<<<<<<<
 *                          'match_node, subst_node')
 *     return result
*/
    __pyx_t_9 = NULL;
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_t_7 = __pyx_builtin_ValueError; 
    __pyx_t_6 = PyUnicode_Format(__pyx_mstate_global->__pyx_kp_u_No_value_specified_for_any_of_th, __pyx_mstate_global->__pyx_kp_u_match_node_subst_node); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_6};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 64, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 64, __pyx_L1_error)

    /* "FromPyUnionUtility":63
 *             if not length:
 *                 return result
 *     if last_found is None:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for any of the union attributes (%s)" %
 *                          'match_node, subst_node')
*/
  }

  /* "FromPyUnionUtility":66
 *         raise ValueError("No value specified for any of the union attributes (%s)" %
 *                          'match_node, subst_node')
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "FromPyUnionUtility":37
 *     int __Pyx_RaiseUnexpectedTypeError(const char *expected, object obj) except 0
 * 
 * @cname("__pyx_convert__from_py_union____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC")             # <<<<<<<<<<<<<<
 * cdef struct_type __pyx_convert__from_py_union____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC(obj) except *:
 *     cdef struct_type result
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("FromPyUnionUtility.__pyx_convert__from_py_union____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_last_found);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "FromPyStructUtility":11
 *     int __Pyx_RaiseUnexpectedTypeError(const char *expected, object obj) except 0
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC")             # <<<<<<<<<<<<<<
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC(obj) except *:
 *     cdef struct_type result
*/

static struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC(PyObject *__pyx_v_obj) {
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_v_result;
  PyObject *__pyx_v_value = NULL;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  size_t __pyx_t_12;
  union __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC", 0);

  /* "FromPyStructUtility":14
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
*/
  __pyx_t_1 = (!PyMapping_Check(__pyx_v_obj));
  if (__pyx_t_1) {

    /* "FromPyStructUtility":15
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)             # <<<<<<<<<<<<<<
 * 
 *     try:
*/
    __pyx_t_2 = __Pyx_RaiseUnexpectedTypeError(((char const *)"a mapping"), __pyx_v_obj); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 15, __pyx_L1_error)

    /* "FromPyStructUtility":14
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
*/
  }

  /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['is_match_node']
 *     except KeyError:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":18
 * 
 *     try:
 *         value = obj['is_match_node']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'is_match_node'")
*/
      __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_mstate_global->__pyx_n_u_is_match_node); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 18, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_v_value = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['is_match_node']
 *     except KeyError:
*/
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "FromPyStructUtility":19
 *     try:
 *         value = obj['is_match_node']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'is_match_node'")
 *     result.is_match_node = value
*/
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(1, 19, __pyx_L6_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);

      /* "FromPyStructUtility":20
 *         value = obj['is_match_node']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'is_match_node'")             # <<<<<<<<<<<<<<
 *     result.is_match_node = value
 *     try:
*/
      __pyx_t_10 = NULL;
      __Pyx_INCREF(__pyx_builtin_ValueError);
      __pyx_t_11 = __pyx_builtin_ValueError; 
      __pyx_t_12 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_mstate_global->__pyx_kp_u_No_value_specified_for_struct_at_7};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 20, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 20, __pyx_L6_except_error)
    }
    goto __pyx_L6_except_error;

    /* "FromPyStructUtility":17
 *         __Pyx_RaiseUnexpectedTypeError(b"a mapping", obj)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['is_match_node']
 *     except KeyError:
*/
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "FromPyStructUtility":21
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'is_match_node'")
 *     result.is_match_node = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['inner']
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 21, __pyx_L1_error)
  __pyx_v_result.is_match_node = __pyx_t_1;

  /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'is_match_node'")
 *     result.is_match_node = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['inner']
 *     except KeyError:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":23
 *     result.is_match_node = value
 *     try:
 *         value = obj['inner']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'inner'")
*/
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_mstate_global->__pyx_n_u_inner); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 23, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'is_match_node'")
 *     result.is_match_node = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['inner']
 *     except KeyError:
*/
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L17_try_end;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":24
 *     try:
 *         value = obj['inner']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'inner'")
 *     result.inner = value
*/
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_2) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_6) < 0) __PYX_ERR(1, 24, __pyx_L14_except_error)
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_6);

      /* "FromPyStructUtility":25
 *         value = obj['inner']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'inner'")             # <<<<<<<<<<<<<<
 *     result.inner = value
 *     return result
*/
      __pyx_t_11 = NULL;
      __Pyx_INCREF(__pyx_builtin_ValueError);
      __pyx_t_10 = __pyx_builtin_ValueError; 
      __pyx_t_12 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_mstate_global->__pyx_kp_u_No_value_specified_for_struct_at_8};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 25, __pyx_L14_except_error)
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 25, __pyx_L14_except_error)
    }
    goto __pyx_L14_except_error;

    /* "FromPyStructUtility":22
 *         raise ValueError("No value specified for struct attribute 'is_match_node'")
 *     result.is_match_node = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['inner']
 *     except KeyError:
*/
    __pyx_L14_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L17_try_end:;
  }

  /* "FromPyStructUtility":26
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'inner'")
 *     result.inner = value             # <<<<<<<<<<<<<<
 *     return result
 * 
*/
  __pyx_t_13 = __pyx_convert__from_py_union____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 26, __pyx_L1_error)
  __pyx_v_result.inner = __pyx_t_13;

  /* "FromPyStructUtility":27
 *         raise ValueError("No value specified for struct attribute 'inner'")
 *     result.inner = value
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "FromPyStructUtility":11
 *     int __Pyx_RaiseUnexpectedTypeError(const char *expected, object obj) except 0
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC")             # <<<<<<<<<<<<<<
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC(obj) except *:
 *     cdef struct_type result
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":49
 *     NodeC inner
 * 
 * cdef inline EditTreeC edittree_new_match(             # <<<<<<<<<<<<<<
 *     len_t prefix_len,
 *     len_t suffix_len,
*/

static CYTHON_INLINE struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_edittree_new_match(__pyx_t_5spacy_8typedefs_len_t __pyx_v_prefix_len, __pyx_t_5spacy_8typedefs_len_t __pyx_v_suffix_len, uint32_t __pyx_v_prefix_tree, uint32_t __pyx_v_suffix_tree) {
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC __pyx_v_match_node;
  union __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC __pyx_v_inner;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_r;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC __pyx_t_1;
  union __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC __pyx_t_2;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_t_3;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":56
 * ):
 *     cdef MatchNodeC match_node = MatchNodeC(
 *         prefix_len=prefix_len,             # <<<<<<<<<<<<<<
 *         suffix_len=suffix_len,
 *         prefix_tree=prefix_tree,
*/
  __pyx_t_1.prefix_len = __pyx_v_prefix_len;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":57
 *     cdef MatchNodeC match_node = MatchNodeC(
 *         prefix_len=prefix_len,
 *         suffix_len=suffix_len,             # <<<<<<<<<<<<<<
 *         prefix_tree=prefix_tree,
 *         suffix_tree=suffix_tree
*/
  __pyx_t_1.suffix_len = __pyx_v_suffix_len;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":58
 *         prefix_len=prefix_len,
 *         suffix_len=suffix_len,
 *         prefix_tree=prefix_tree,             # <<<<<<<<<<<<<<
 *         suffix_tree=suffix_tree
 *     )
*/
  __pyx_t_1.prefix_tree = __pyx_v_prefix_tree;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":59
 *         suffix_len=suffix_len,
 *         prefix_tree=prefix_tree,
 *         suffix_tree=suffix_tree             # <<<<<<<<<<<<<<
 *     )
 *     cdef NodeC inner = NodeC(match_node=match_node)
*/
  __pyx_t_1.suffix_tree = __pyx_v_suffix_tree;
  __pyx_v_match_node = __pyx_t_1;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":61
 *         suffix_tree=suffix_tree
 *     )
 *     cdef NodeC inner = NodeC(match_node=match_node)             # <<<<<<<<<<<<<<
 *     return EditTreeC(is_match_node=True, inner=inner)
 * 
*/
  __pyx_t_2.match_node = __pyx_v_match_node;
  __pyx_v_inner = __pyx_t_2;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":62
 *     )
 *     cdef NodeC inner = NodeC(match_node=match_node)
 *     return EditTreeC(is_match_node=True, inner=inner)             # <<<<<<<<<<<<<<
 * 
 * cdef inline EditTreeC edittree_new_subst(attr_t orig, attr_t subst):
*/
  __pyx_t_3.is_match_node = 1;
  __pyx_t_3.inner = __pyx_v_inner;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":49
 *     NodeC inner
 * 
 * cdef inline EditTreeC edittree_new_match(             # <<<<<<<<<<<<<<
 *     len_t prefix_len,
 *     len_t suffix_len,
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":64
 *     return EditTreeC(is_match_node=True, inner=inner)
 * 
 * cdef inline EditTreeC edittree_new_subst(attr_t orig, attr_t subst):             # <<<<<<<<<<<<<<
 *     cdef EditTreeC node
 *     cdef SubstNodeC subst_node = SubstNodeC(orig=orig, subst=subst)
*/

static CYTHON_INLINE struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_edittree_new_subst(__pyx_t_5spacy_8typedefs_attr_t __pyx_v_orig, __pyx_t_5spacy_8typedefs_attr_t __pyx_v_subst) {
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC __pyx_v_subst_node;
  union __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC __pyx_v_inner;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_r;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC __pyx_t_1;
  union __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NodeC __pyx_t_2;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_t_3;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":66
 * cdef inline EditTreeC edittree_new_subst(attr_t orig, attr_t subst):
 *     cdef EditTreeC node
 *     cdef SubstNodeC subst_node = SubstNodeC(orig=orig, subst=subst)             # <<<<<<<<<<<<<<
 *     cdef NodeC inner = NodeC(subst_node=subst_node)
 *     return EditTreeC(is_match_node=False, inner=inner)
*/
  __pyx_t_1.orig = __pyx_v_orig;
  __pyx_t_1.subst = __pyx_v_subst;
  __pyx_v_subst_node = __pyx_t_1;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":67
 *     cdef EditTreeC node
 *     cdef SubstNodeC subst_node = SubstNodeC(orig=orig, subst=subst)
 *     cdef NodeC inner = NodeC(subst_node=subst_node)             # <<<<<<<<<<<<<<
 *     return EditTreeC(is_match_node=False, inner=inner)
 * 
*/
  __pyx_t_2.subst_node = __pyx_v_subst_node;
  __pyx_v_inner = __pyx_t_2;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":68
 *     cdef SubstNodeC subst_node = SubstNodeC(orig=orig, subst=subst)
 *     cdef NodeC inner = NodeC(subst_node=subst_node)
 *     return EditTreeC(is_match_node=False, inner=inner)             # <<<<<<<<<<<<<<
 * 
 * cdef inline uint64_t edittree_hash(EditTreeC tree):
*/
  __pyx_t_3.is_match_node = 0;
  __pyx_t_3.inner = __pyx_v_inner;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":64
 *     return EditTreeC(is_match_node=True, inner=inner)
 * 
 * cdef inline EditTreeC edittree_new_subst(attr_t orig, attr_t subst):             # <<<<<<<<<<<<<<
 *     cdef EditTreeC node
 *     cdef SubstNodeC subst_node = SubstNodeC(orig=orig, subst=subst)
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":70
 *     return EditTreeC(is_match_node=False, inner=inner)
 * 
 * cdef inline uint64_t edittree_hash(EditTreeC tree):             # <<<<<<<<<<<<<<
 *     cdef MatchNodeC match_node
 *     cdef SubstNodeC subst_node
*/

static CYTHON_INLINE uint64_t __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_edittree_hash(struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_v_tree) {
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC __pyx_v_match_node;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC __pyx_v_subst_node;
  uint64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_hash_t __pyx_t_7;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("edittree_hash", 0);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":74
 *     cdef SubstNodeC subst_node
 * 
 *     if tree.is_match_node:             # <<<<<<<<<<<<<<
 *         match_node = tree.inner.match_node
 *         return hash((match_node.prefix_len, match_node.suffix_len, match_node.prefix_tree, match_node.suffix_tree))
*/
  if (__pyx_v_tree.is_match_node) {

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":75
 * 
 *     if tree.is_match_node:
 *         match_node = tree.inner.match_node             # <<<<<<<<<<<<<<
 *         return hash((match_node.prefix_len, match_node.suffix_len, match_node.prefix_tree, match_node.suffix_tree))
 *     else:
*/
    __pyx_t_1 = __pyx_v_tree.inner.match_node;
    __pyx_v_match_node = __pyx_t_1;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":76
 *     if tree.is_match_node:
 *         match_node = tree.inner.match_node
 *         return hash((match_node.prefix_len, match_node.suffix_len, match_node.prefix_tree, match_node.suffix_tree))             # <<<<<<<<<<<<<<
 *     else:
 *         subst_node = tree.inner.subst_node
*/
    __pyx_t_2 = __Pyx_PyLong_From_uint16_t(__pyx_v_match_node.prefix_len); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyLong_From_uint16_t(__pyx_v_match_node.suffix_len); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyLong_From_uint32_t(__pyx_v_match_node.prefix_tree); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyLong_From_uint32_t(__pyx_v_match_node.suffix_tree); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2) != (0)) __PYX_ERR(2, 76, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3) != (0)) __PYX_ERR(2, 76, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_4) != (0)) __PYX_ERR(2, 76, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_5) != (0)) __PYX_ERR(2, 76, __pyx_L1_error);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_7 = PyObject_Hash(__pyx_t_6); if (unlikely(__pyx_t_7 == ((Py_hash_t)-1))) __PYX_ERR(2, 76, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_7;
    goto __pyx_L0;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":74
 *     cdef SubstNodeC subst_node
 * 
 *     if tree.is_match_node:             # <<<<<<<<<<<<<<
 *         match_node = tree.inner.match_node
 *         return hash((match_node.prefix_len, match_node.suffix_len, match_node.prefix_tree, match_node.suffix_tree))
*/
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":78
 *         return hash((match_node.prefix_len, match_node.suffix_len, match_node.prefix_tree, match_node.suffix_tree))
 *     else:
 *         subst_node = tree.inner.subst_node             # <<<<<<<<<<<<<<
 *         return hash((subst_node.orig, subst_node.subst))
 * 
*/
  /*else*/ {
    __pyx_t_8 = __pyx_v_tree.inner.subst_node;
    __pyx_v_subst_node = __pyx_t_8;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":79
 *     else:
 *         subst_node = tree.inner.subst_node
 *         return hash((subst_node.orig, subst_node.subst))             # <<<<<<<<<<<<<<
 * 
 * cdef struct LCS:
*/
    __pyx_t_6 = __Pyx_PyLong_From_uint64_t(__pyx_v_subst_node.orig); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyLong_From_uint64_t(__pyx_v_subst_node.subst); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6) != (0)) __PYX_ERR(2, 79, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5) != (0)) __PYX_ERR(2, 79, __pyx_L1_error);
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_7 = PyObject_Hash(__pyx_t_4); if (unlikely(__pyx_t_7 == ((Py_hash_t)-1))) __PYX_ERR(2, 79, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_7;
    goto __pyx_L0;
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":70
 *     return EditTreeC(is_match_node=False, inner=inner)
 * 
 * cdef inline uint64_t edittree_hash(EditTreeC tree):             # <<<<<<<<<<<<<<
 *     cdef MatchNodeC match_node
 *     cdef SubstNodeC subst_node
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.edittree_hash", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":87
 *     int target_end
 * 
 * cdef inline bint lcs_is_empty(LCS lcs):             # <<<<<<<<<<<<<<
 *     return lcs.source_begin == 0 and lcs.source_end == 0 and lcs.target_begin == 0 and lcs.target_end == 0
 * 
*/

static CYTHON_INLINE int __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_lcs_is_empty(struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_LCS __pyx_v_lcs) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":88
 * 
 * cdef inline bint lcs_is_empty(LCS lcs):
 *     return lcs.source_begin == 0 and lcs.source_end == 0 and lcs.target_begin == 0 and lcs.target_end == 0             # <<<<<<<<<<<<<<
 * 
 * cdef class EditTrees:
*/
  __pyx_t_2 = (__pyx_v_lcs.source_begin == 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_lcs.source_end == 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_lcs.target_begin == 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_lcs.target_end == 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pxd":87
 *     int target_end
 * 
 * cdef inline bint lcs_is_empty(LCS lcs):             # <<<<<<<<<<<<<<
 *     return lcs.source_begin == 0 and lcs.source_end == 0 and lcs.target_begin == 0 and lcs.target_end == 0
 * 
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":18
 * NULL_TREE_ID = UINT32_MAX
 * 
 * cdef LCS find_lcs(str source, str target):             # <<<<<<<<<<<<<<
 *     """
 *     Find the longest common subsequence (LCS) between two strings. If there are
*/

static struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_LCS __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_find_lcs(PyObject *__pyx_v_source, PyObject *__pyx_v_target) {
  Py_ssize_t __pyx_v_target_len;
  size_t __pyx_v_longest_align;
  int __pyx_v_source_idx;
  int __pyx_v_target_idx;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_LCS __pyx_v_lcs;
  Py_UCS4 __pyx_v_source_cp;
  Py_UCS4 __pyx_v_target_cp;
  std::vector<size_t>  __pyx_v_prev_aligns;
  std::vector<size_t>  __pyx_v_cur_aligns;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_LCS __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  std::vector<size_t>  __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  void *__pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_lcs", 0);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":27
 *     RETURNS (LCS): The spans of the longest common subsequences.
 *     """
 *     cdef Py_ssize_t target_len = len(target)             # <<<<<<<<<<<<<<
 *     cdef size_t longest_align = 0
 *     cdef int source_idx, target_idx
*/
  if (unlikely(__pyx_v_target == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 27, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyUnicode_GET_LENGTH(__pyx_v_target); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 27, __pyx_L1_error)
  __pyx_v_target_len = __pyx_t_1;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":28
 *     """
 *     cdef Py_ssize_t target_len = len(target)
 *     cdef size_t longest_align = 0             # <<<<<<<<<<<<<<
 *     cdef int source_idx, target_idx
 *     cdef LCS lcs
*/
  __pyx_v_longest_align = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":33
 *     cdef Py_UCS4 source_cp, target_cp
 * 
 *     memset(&lcs, 0, sizeof(lcs))             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[size_t] prev_aligns = vector[size_t](target_len)
*/
  (void)(memset((&__pyx_v_lcs), 0, (sizeof(__pyx_v_lcs))));

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":35
 *     memset(&lcs, 0, sizeof(lcs))
 * 
 *     cdef vector[size_t] prev_aligns = vector[size_t](target_len)             # <<<<<<<<<<<<<<
 *     cdef vector[size_t] cur_aligns = vector[size_t](target_len)
 * 
*/
  try {
    __pyx_t_2 = std::vector<size_t> (__pyx_v_target_len);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 35, __pyx_L1_error)
  }
  __pyx_v_prev_aligns = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":36
 * 
 *     cdef vector[size_t] prev_aligns = vector[size_t](target_len)
 *     cdef vector[size_t] cur_aligns = vector[size_t](target_len)             # <<<<<<<<<<<<<<
 * 
 *     for (source_idx, source_cp) in enumerate(source):
*/
  try {
    __pyx_t_2 = std::vector<size_t> (__pyx_v_target_len);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 36, __pyx_L1_error)
  }
  __pyx_v_cur_aligns = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":38
 *     cdef vector[size_t] cur_aligns = vector[size_t](target_len)
 * 
 *     for (source_idx, source_cp) in enumerate(source):             # <<<<<<<<<<<<<<
 *         for (target_idx, target_cp) in enumerate(target):
 *             if source_cp == target_cp:
*/
  __pyx_t_3 = 0;
  if (unlikely(__pyx_v_source == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(0, 38, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_source);
  __pyx_t_4 = __pyx_v_source;
  __pyx_t_8 = __Pyx_init_unicode_iteration(__pyx_t_4, (&__pyx_t_5), (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 38, __pyx_L1_error)
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_5; __pyx_t_9++) {
    __pyx_t_1 = __pyx_t_9;
    __pyx_v_source_cp = __Pyx_PyUnicode_READ(__pyx_t_7, __pyx_t_6, __pyx_t_1);

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":39
 * 
 *     for (source_idx, source_cp) in enumerate(source):
 *         for (target_idx, target_cp) in enumerate(target):             # <<<<<<<<<<<<<<
 *             if source_cp == target_cp:
 *                 if source_idx == 0 or target_idx == 0:
*/
    __pyx_v_source_idx = __pyx_t_3;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":38
 *     cdef vector[size_t] cur_aligns = vector[size_t](target_len)
 * 
 *     for (source_idx, source_cp) in enumerate(source):             # <<<<<<<<<<<<<<
 *         for (target_idx, target_cp) in enumerate(target):
 *             if source_cp == target_cp:
*/
    __pyx_t_3 = (__pyx_t_3 + 1);

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":39
 * 
 *     for (source_idx, source_cp) in enumerate(source):
 *         for (target_idx, target_cp) in enumerate(target):             # <<<<<<<<<<<<<<
 *             if source_cp == target_cp:
 *                 if source_idx == 0 or target_idx == 0:
*/
    __pyx_t_8 = 0;
    if (unlikely(__pyx_v_target == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
      __PYX_ERR(0, 39, __pyx_L1_error)
    }
    __Pyx_INCREF(__pyx_v_target);
    __pyx_t_10 = __pyx_v_target;
    __pyx_t_15 = __Pyx_init_unicode_iteration(__pyx_t_10, (&__pyx_t_12), (&__pyx_t_13), (&__pyx_t_14)); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 39, __pyx_L1_error)
    for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_12; __pyx_t_16++) {
      __pyx_t_11 = __pyx_t_16;
      __pyx_v_target_cp = __Pyx_PyUnicode_READ(__pyx_t_14, __pyx_t_13, __pyx_t_11);

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":40
 *     for (source_idx, source_cp) in enumerate(source):
 *         for (target_idx, target_cp) in enumerate(target):
 *             if source_cp == target_cp:             # <<<<<<<<<<<<<<
 *                 if source_idx == 0 or target_idx == 0:
 *                     cur_aligns[target_idx] = 1
*/
      __pyx_v_target_idx = __pyx_t_8;

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":39
 * 
 *     for (source_idx, source_cp) in enumerate(source):
 *         for (target_idx, target_cp) in enumerate(target):             # <<<<<<<<<<<<<<
 *             if source_cp == target_cp:
 *                 if source_idx == 0 or target_idx == 0:
*/
      __pyx_t_8 = (__pyx_t_8 + 1);

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":40
 *     for (source_idx, source_cp) in enumerate(source):
 *         for (target_idx, target_cp) in enumerate(target):
 *             if source_cp == target_cp:             # <<<<<<<<<<<<<<
 *                 if source_idx == 0 or target_idx == 0:
 *                     cur_aligns[target_idx] = 1
*/
      __pyx_t_17 = (__pyx_v_source_cp == __pyx_v_target_cp);
      if (__pyx_t_17) {

        /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":41
 *         for (target_idx, target_cp) in enumerate(target):
 *             if source_cp == target_cp:
 *                 if source_idx == 0 or target_idx == 0:             # <<<<<<<<<<<<<<
 *                     cur_aligns[target_idx] = 1
 *                 else:
*/
        __pyx_t_18 = (__pyx_v_source_idx == 0);
        if (!__pyx_t_18) {
        } else {
          __pyx_t_17 = __pyx_t_18;
          goto __pyx_L9_bool_binop_done;
        }
        __pyx_t_18 = (__pyx_v_target_idx == 0);
        __pyx_t_17 = __pyx_t_18;
        __pyx_L9_bool_binop_done:;
        if (__pyx_t_17) {

          /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":42
 *             if source_cp == target_cp:
 *                 if source_idx == 0 or target_idx == 0:
 *                     cur_aligns[target_idx] = 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     cur_aligns[target_idx] = prev_aligns[target_idx - 1] + 1
*/
          (__pyx_v_cur_aligns[__pyx_v_target_idx]) = 1;

          /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":41
 *         for (target_idx, target_cp) in enumerate(target):
 *             if source_cp == target_cp:
 *                 if source_idx == 0 or target_idx == 0:             # <<<<<<<<<<<<<<
 *                     cur_aligns[target_idx] = 1
 *                 else:
*/
          goto __pyx_L8;
        }

        /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":44
 *                     cur_aligns[target_idx] = 1
 *                 else:
 *                     cur_aligns[target_idx] = prev_aligns[target_idx - 1] + 1             # <<<<<<<<<<<<<<
 * 
 *                 # Check if this is the longest alignment and replace previous
*/
        /*else*/ {
          (__pyx_v_cur_aligns[__pyx_v_target_idx]) = ((__pyx_v_prev_aligns[(__pyx_v_target_idx - 1)]) + 1);
        }
        __pyx_L8:;

        /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":48
 *                 # Check if this is the longest alignment and replace previous
 *                 # best alignment when this is the case.
 *                 if cur_aligns[target_idx] > longest_align:             # <<<<<<<<<<<<<<
 *                     longest_align = cur_aligns[target_idx]
 *                     lcs.source_begin = source_idx - longest_align + 1
*/
        __pyx_t_17 = ((__pyx_v_cur_aligns[__pyx_v_target_idx]) > __pyx_v_longest_align);
        if (__pyx_t_17) {

          /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":49
 *                 # best alignment when this is the case.
 *                 if cur_aligns[target_idx] > longest_align:
 *                     longest_align = cur_aligns[target_idx]             # <<<<<<<<<<<<<<
 *                     lcs.source_begin = source_idx - longest_align + 1
 *                     lcs.source_end = source_idx + 1
*/
          __pyx_v_longest_align = (__pyx_v_cur_aligns[__pyx_v_target_idx]);

          /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":50
 *                 if cur_aligns[target_idx] > longest_align:
 *                     longest_align = cur_aligns[target_idx]
 *                     lcs.source_begin = source_idx - longest_align + 1             # <<<<<<<<<<<<<<
 *                     lcs.source_end = source_idx + 1
 *                     lcs.target_begin = target_idx - longest_align + 1
*/
          __pyx_v_lcs.source_begin = ((__pyx_v_source_idx - __pyx_v_longest_align) + 1);

          /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":51
 *                     longest_align = cur_aligns[target_idx]
 *                     lcs.source_begin = source_idx - longest_align + 1
 *                     lcs.source_end = source_idx + 1             # <<<<<<<<<<<<<<
 *                     lcs.target_begin = target_idx - longest_align + 1
 *                     lcs.target_end = target_idx + 1
*/
          __pyx_v_lcs.source_end = (__pyx_v_source_idx + 1);

          /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":52
 *                     lcs.source_begin = source_idx - longest_align + 1
 *                     lcs.source_end = source_idx + 1
 *                     lcs.target_begin = target_idx - longest_align + 1             # <<<<<<<<<<<<<<
 *                     lcs.target_end = target_idx + 1
 *             else:
*/
          __pyx_v_lcs.target_begin = ((__pyx_v_target_idx - __pyx_v_longest_align) + 1);

          /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":53
 *                     lcs.source_end = source_idx + 1
 *                     lcs.target_begin = target_idx - longest_align + 1
 *                     lcs.target_end = target_idx + 1             # <<<<<<<<<<<<<<
 *             else:
 *                 # No match, we start with a zero-length alignment.
*/
          __pyx_v_lcs.target_end = (__pyx_v_target_idx + 1);

          /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":48
 *                 # Check if this is the longest alignment and replace previous
 *                 # best alignment when this is the case.
 *                 if cur_aligns[target_idx] > longest_align:             # <<<<<<<<<<<<<<
 *                     longest_align = cur_aligns[target_idx]
 *                     lcs.source_begin = source_idx - longest_align + 1
*/
        }

        /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":40
 *     for (source_idx, source_cp) in enumerate(source):
 *         for (target_idx, target_cp) in enumerate(target):
 *             if source_cp == target_cp:             # <<<<<<<<<<<<<<
 *                 if source_idx == 0 or target_idx == 0:
 *                     cur_aligns[target_idx] = 1
*/
        goto __pyx_L7;
      }

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":56
 *             else:
 *                 # No match, we start with a zero-length alignment.
 *                 cur_aligns[target_idx] = 0             # <<<<<<<<<<<<<<
 *         swap(prev_aligns, cur_aligns)
 * 
*/
      /*else*/ {
        (__pyx_v_cur_aligns[__pyx_v_target_idx]) = 0;
      }
      __pyx_L7:;
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":57
 *                 # No match, we start with a zero-length alignment.
 *                 cur_aligns[target_idx] = 0
 *         swap(prev_aligns, cur_aligns)             # <<<<<<<<<<<<<<
 * 
 *     return lcs
*/
    try {
      std::swap<std::vector<size_t> >(__pyx_v_prev_aligns, __pyx_v_cur_aligns);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 57, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":59
 *         swap(prev_aligns, cur_aligns)
 * 
 *     return lcs             # <<<<<<<<<<<<<<
 * 
 * cdef class EditTrees:
*/
  __pyx_r = __pyx_v_lcs;
  goto __pyx_L0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":18
 * NULL_TREE_ID = UINT32_MAX
 * 
 * cdef LCS find_lcs(str source, str target):             # <<<<<<<<<<<<<<
 *     """
 *     Find the longest common subsequence (LCS) between two strings. If there are
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.find_lcs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":63
 * cdef class EditTrees:
 *     """Container for constructing and storing edit trees."""
 *     def __init__(self, strings: StringStore):             # <<<<<<<<<<<<<<
 *         """Create a container for edit trees.
 * 
*/

/* Python wrapper */
static int __pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees___init__, "Create a container for edit trees.\n\n        strings (StringStore): the string store to use.");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees___init__;
#endif
static int __pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_strings = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_strings,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 63, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 63, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__init__", 0) < 0) __PYX_ERR(0, 63, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, i); __PYX_ERR(0, 63, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 63, __pyx_L3_error)
    }
    __pyx_v_strings = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 63, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees___init__(((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self), __pyx_v_strings);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees___init__(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, PyObject *__pyx_v_strings) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":67
 * 
 *         strings (StringStore): the string store to use."""
 *         self.strings = strings             # <<<<<<<<<<<<<<
 * 
 *     cpdef uint32_t add(self, str form, str lemma):
*/
  __pyx_t_1 = __pyx_v_strings;
  __Pyx_INCREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5spacy_7strings_StringStore))))) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->strings);
  __Pyx_DECREF((PyObject *)__pyx_v_self->strings);
  __pyx_v_self->strings = ((struct __pyx_obj_5spacy_7strings_StringStore *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":63
 * cdef class EditTrees:
 *     """Container for constructing and storing edit trees."""
 *     def __init__(self, strings: StringStore):             # <<<<<<<<<<<<<<
 *         """Create a container for edit trees.
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":69
 *         self.strings = strings
 * 
 *     cpdef uint32_t add(self, str form, str lemma):             # <<<<<<<<<<<<<<
 *         """Add an edit tree that rewrites the given string into the given lemma.
 * 
*/

static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_3add(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static uint32_t __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_add(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, PyObject *__pyx_v_form, PyObject *__pyx_v_lemma, int __pyx_skip_dispatch) {
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_v_tree;
  uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  uint32_t __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_add); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_3add)) {
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_form, __pyx_v_lemma};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        __pyx_t_6 = __Pyx_PyLong_As_uint32_t(__pyx_t_2); if (unlikely((__pyx_t_6 == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":80
 *         # recursive tree construction with logic for this case, handle
 *         # it in this wrapper method.
 *         if len(form) == 0 and len(lemma) == 0:             # <<<<<<<<<<<<<<
 *             tree = edittree_new_match(0, 0, NULL_TREE_ID, NULL_TREE_ID)
 *             return self._tree_id(tree)
*/
  if (unlikely(__pyx_v_form == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 80, __pyx_L1_error)
  }
  __pyx_t_8 = __Pyx_PyUnicode_GET_LENGTH(__pyx_v_form); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 80, __pyx_L1_error)
  __pyx_t_9 = (__pyx_t_8 == 0);
  if (__pyx_t_9) {
  } else {
    __pyx_t_7 = __pyx_t_9;
    goto __pyx_L4_bool_binop_done;
  }
  if (unlikely(__pyx_v_lemma == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 80, __pyx_L1_error)
  }
  __pyx_t_8 = __Pyx_PyUnicode_GET_LENGTH(__pyx_v_lemma); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 80, __pyx_L1_error)
  __pyx_t_9 = (__pyx_t_8 == 0);
  __pyx_t_7 = __pyx_t_9;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_7) {

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":81
 *         # it in this wrapper method.
 *         if len(form) == 0 and len(lemma) == 0:
 *             tree = edittree_new_match(0, 0, NULL_TREE_ID, NULL_TREE_ID)             # <<<<<<<<<<<<<<
 *             return self._tree_id(tree)
 * 
*/
    __pyx_t_10 = __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_edittree_new_match(0, 0, __pyx_v_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NULL_TREE_ID, __pyx_v_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NULL_TREE_ID); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 81, __pyx_L1_error)
    __pyx_v_tree = __pyx_t_10;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":82
 *         if len(form) == 0 and len(lemma) == 0:
 *             tree = edittree_new_match(0, 0, NULL_TREE_ID, NULL_TREE_ID)
 *             return self._tree_id(tree)             # <<<<<<<<<<<<<<
 * 
 *         return self._add(form, lemma)
*/
    __pyx_t_6 = ((struct __pyx_vtabstruct_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self->__pyx_vtab)->_tree_id(__pyx_v_self, __pyx_v_tree); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 82, __pyx_L1_error)
    __pyx_r = __pyx_t_6;
    goto __pyx_L0;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":80
 *         # recursive tree construction with logic for this case, handle
 *         # it in this wrapper method.
 *         if len(form) == 0 and len(lemma) == 0:             # <<<<<<<<<<<<<<
 *             tree = edittree_new_match(0, 0, NULL_TREE_ID, NULL_TREE_ID)
 *             return self._tree_id(tree)
*/
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":84
 *             return self._tree_id(tree)
 * 
 *         return self._add(form, lemma)             # <<<<<<<<<<<<<<
 * 
 *     cdef uint32_t _add(self, str form, str lemma):
*/
  __pyx_t_6 = ((struct __pyx_vtabstruct_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self->__pyx_vtab)->_add(__pyx_v_self, __pyx_v_form, __pyx_v_lemma); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 84, __pyx_L1_error)
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":69
 *         self.strings = strings
 * 
 *     cpdef uint32_t add(self, str form, str lemma):             # <<<<<<<<<<<<<<
 *         """Add an edit tree that rewrites the given string into the given lemma.
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_3add(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_2add, "EditTrees.add(self, str form, str lemma) -> uint32_t\nAdd an edit tree that rewrites the given string into the given lemma.\n\nRETURNS (int): identifier of the edit tree in the container.");
static PyMethodDef __pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_3add = {"add", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_3add, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_2add};
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_3add(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_form = 0;
  PyObject *__pyx_v_lemma = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_form,&__pyx_mstate_global->__pyx_n_u_lemma,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 69, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 69, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 69, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "add", 0) < 0) __PYX_ERR(0, 69, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("add", 1, 2, 2, i); __PYX_ERR(0, 69, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 69, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 69, __pyx_L3_error)
    }
    __pyx_v_form = ((PyObject*)values[0]);
    __pyx_v_lemma = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 69, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_form), (&PyUnicode_Type), 1, "form", 1))) __PYX_ERR(0, 69, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_lemma), (&PyUnicode_Type), 1, "lemma", 1))) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_r = __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_2add(((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self), __pyx_v_form, __pyx_v_lemma);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_2add(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, PyObject *__pyx_v_form, PyObject *__pyx_v_lemma) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_add(__pyx_v_self, __pyx_v_form, __pyx_v_lemma, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyLong_From_uint32_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":86
 *         return self._add(form, lemma)
 * 
 *     cdef uint32_t _add(self, str form, str lemma):             # <<<<<<<<<<<<<<
 *         cdef LCS lcs = find_lcs(form, lemma)
 * 
*/

static uint32_t __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees__add(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, PyObject *__pyx_v_form, PyObject *__pyx_v_lemma) {
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_LCS __pyx_v_lcs;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_v_tree;
  uint32_t __pyx_v_prefix_tree;
  uint32_t __pyx_v_suffix_tree;
  uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_LCS __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_t_6;
  __pyx_t_5spacy_8typedefs_attr_t __pyx_t_7;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_t_8;
  int __pyx_t_9;
  uint32_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_add", 0);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":87
 * 
 *     cdef uint32_t _add(self, str form, str lemma):
 *         cdef LCS lcs = find_lcs(form, lemma)             # <<<<<<<<<<<<<<
 * 
 *         cdef EditTreeC tree
*/
  __pyx_t_1 = __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_find_lcs(__pyx_v_form, __pyx_v_lemma); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L1_error)
  __pyx_v_lcs = __pyx_t_1;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":91
 *         cdef EditTreeC tree
 *         cdef uint32_t prefix_tree, suffix_tree
 *         if lcs_is_empty(lcs):             # <<<<<<<<<<<<<<
 *             tree = edittree_new_subst(self.strings.add(form), self.strings.add(lemma))
 *         else:
*/
  __pyx_t_2 = __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_lcs_is_empty(__pyx_v_lcs); if (unlikely(__pyx_t_2 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 91, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":92
 *         cdef uint32_t prefix_tree, suffix_tree
 *         if lcs_is_empty(lcs):
 *             tree = edittree_new_subst(self.strings.add(form), self.strings.add(lemma))             # <<<<<<<<<<<<<<
 *         else:
 *             # If we have a non-empty LCS, such as "gooi" in "ge[gooi]d" and "[gooi]en",
*/
    __pyx_t_4 = ((PyObject *)__pyx_v_self->strings);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_5 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_form};
      __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_add, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 92, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __pyx_t_6 = __Pyx_PyLong_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_6 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = ((PyObject *)__pyx_v_self->strings);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_5 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_lemma};
      __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_add, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 92, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __pyx_t_7 = __Pyx_PyLong_As_uint64_t(__pyx_t_3); if (unlikely((__pyx_t_7 == ((uint64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_edittree_new_subst(__pyx_t_6, __pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 92, __pyx_L1_error)
    __pyx_v_tree = __pyx_t_8;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":91
 *         cdef EditTreeC tree
 *         cdef uint32_t prefix_tree, suffix_tree
 *         if lcs_is_empty(lcs):             # <<<<<<<<<<<<<<
 *             tree = edittree_new_subst(self.strings.add(form), self.strings.add(lemma))
 *         else:
*/
    goto __pyx_L3;
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":96
 *             # If we have a non-empty LCS, such as "gooi" in "ge[gooi]d" and "[gooi]en",
 *             # create edit trees for the prefix pair ("ge"/"") and the suffix pair ("d"/"en").
 *             prefix_tree = NULL_TREE_ID             # <<<<<<<<<<<<<<
 *             if lcs.source_begin != 0 or lcs.target_begin != 0:
 *                 prefix_tree = self.add(form[:lcs.source_begin], lemma[:lcs.target_begin])
*/
  /*else*/ {
    __pyx_v_prefix_tree = __pyx_v_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NULL_TREE_ID;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":97
 *             # create edit trees for the prefix pair ("ge"/"") and the suffix pair ("d"/"en").
 *             prefix_tree = NULL_TREE_ID
 *             if lcs.source_begin != 0 or lcs.target_begin != 0:             # <<<<<<<<<<<<<<
 *                 prefix_tree = self.add(form[:lcs.source_begin], lemma[:lcs.target_begin])
 * 
*/
    __pyx_t_9 = (__pyx_v_lcs.source_begin != 0);
    if (!__pyx_t_9) {
    } else {
      __pyx_t_2 = __pyx_t_9;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_9 = (__pyx_v_lcs.target_begin != 0);
    __pyx_t_2 = __pyx_t_9;
    __pyx_L5_bool_binop_done:;
    if (__pyx_t_2) {

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":98
 *             prefix_tree = NULL_TREE_ID
 *             if lcs.source_begin != 0 or lcs.target_begin != 0:
 *                 prefix_tree = self.add(form[:lcs.source_begin], lemma[:lcs.target_begin])             # <<<<<<<<<<<<<<
 * 
 *             suffix_tree = NULL_TREE_ID
*/
      if (unlikely(__pyx_v_form == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 98, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyUnicode_Substring(__pyx_v_form, 0, __pyx_v_lcs.source_begin); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (unlikely(__pyx_v_lemma == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 98, __pyx_L1_error)
      }
      __pyx_t_4 = __Pyx_PyUnicode_Substring(__pyx_v_lemma, 0, __pyx_v_lcs.target_begin); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = ((struct __pyx_vtabstruct_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self->__pyx_vtab)->add(__pyx_v_self, ((PyObject*)__pyx_t_3), ((PyObject*)__pyx_t_4), 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 98, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_prefix_tree = __pyx_t_10;

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":97
 *             # create edit trees for the prefix pair ("ge"/"") and the suffix pair ("d"/"en").
 *             prefix_tree = NULL_TREE_ID
 *             if lcs.source_begin != 0 or lcs.target_begin != 0:             # <<<<<<<<<<<<<<
 *                 prefix_tree = self.add(form[:lcs.source_begin], lemma[:lcs.target_begin])
 * 
*/
    }

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":100
 *                 prefix_tree = self.add(form[:lcs.source_begin], lemma[:lcs.target_begin])
 * 
 *             suffix_tree = NULL_TREE_ID             # <<<<<<<<<<<<<<
 *             if lcs.source_end != len(form) or lcs.target_end != len(lemma):
 *                 suffix_tree = self.add(form[lcs.source_end:], lemma[lcs.target_end:])
*/
    __pyx_v_suffix_tree = __pyx_v_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NULL_TREE_ID;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":101
 * 
 *             suffix_tree = NULL_TREE_ID
 *             if lcs.source_end != len(form) or lcs.target_end != len(lemma):             # <<<<<<<<<<<<<<
 *                 suffix_tree = self.add(form[lcs.source_end:], lemma[lcs.target_end:])
 * 
*/
    if (unlikely(__pyx_v_form == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 101, __pyx_L1_error)
    }
    __pyx_t_11 = __Pyx_PyUnicode_GET_LENGTH(__pyx_v_form); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 101, __pyx_L1_error)
    __pyx_t_9 = (__pyx_v_lcs.source_end != __pyx_t_11);
    if (!__pyx_t_9) {
    } else {
      __pyx_t_2 = __pyx_t_9;
      goto __pyx_L8_bool_binop_done;
    }
    if (unlikely(__pyx_v_lemma == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 101, __pyx_L1_error)
    }
    __pyx_t_11 = __Pyx_PyUnicode_GET_LENGTH(__pyx_v_lemma); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 101, __pyx_L1_error)
    __pyx_t_9 = (__pyx_v_lcs.target_end != __pyx_t_11);
    __pyx_t_2 = __pyx_t_9;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_2) {

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":102
 *             suffix_tree = NULL_TREE_ID
 *             if lcs.source_end != len(form) or lcs.target_end != len(lemma):
 *                 suffix_tree = self.add(form[lcs.source_end:], lemma[lcs.target_end:])             # <<<<<<<<<<<<<<
 * 
 *             tree = edittree_new_match(lcs.source_begin, len(form) - lcs.source_end, prefix_tree, suffix_tree)
*/
      if (unlikely(__pyx_v_form == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 102, __pyx_L1_error)
      }
      __pyx_t_4 = __Pyx_PyUnicode_Substring(__pyx_v_form, __pyx_v_lcs.source_end, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__pyx_v_lemma == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 102, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyUnicode_Substring(__pyx_v_lemma, __pyx_v_lcs.target_end, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = ((struct __pyx_vtabstruct_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self->__pyx_vtab)->add(__pyx_v_self, ((PyObject*)__pyx_t_4), ((PyObject*)__pyx_t_3), 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_suffix_tree = __pyx_t_10;

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":101
 * 
 *             suffix_tree = NULL_TREE_ID
 *             if lcs.source_end != len(form) or lcs.target_end != len(lemma):             # <<<<<<<<<<<<<<
 *                 suffix_tree = self.add(form[lcs.source_end:], lemma[lcs.target_end:])
 * 
*/
    }

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":104
 *                 suffix_tree = self.add(form[lcs.source_end:], lemma[lcs.target_end:])
 * 
 *             tree = edittree_new_match(lcs.source_begin, len(form) - lcs.source_end, prefix_tree, suffix_tree)             # <<<<<<<<<<<<<<
 * 
 *         return self._tree_id(tree)
*/
    if (unlikely(__pyx_v_form == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 104, __pyx_L1_error)
    }
    __pyx_t_11 = __Pyx_PyUnicode_GET_LENGTH(__pyx_v_form); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 104, __pyx_L1_error)
    __pyx_t_8 = __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_edittree_new_match(__pyx_v_lcs.source_begin, (__pyx_t_11 - __pyx_v_lcs.source_end), __pyx_v_prefix_tree, __pyx_v_suffix_tree); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 104, __pyx_L1_error)
    __pyx_v_tree = __pyx_t_8;
  }
  __pyx_L3:;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":106
 *             tree = edittree_new_match(lcs.source_begin, len(form) - lcs.source_end, prefix_tree, suffix_tree)
 * 
 *         return self._tree_id(tree)             # <<<<<<<<<<<<<<
 * 
 *     cdef uint32_t _tree_id(self, EditTreeC tree):
*/
  __pyx_t_10 = ((struct __pyx_vtabstruct_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self->__pyx_vtab)->_tree_id(__pyx_v_self, __pyx_v_tree); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L1_error)
  __pyx_r = __pyx_t_10;
  goto __pyx_L0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":86
 *         return self._add(form, lemma)
 * 
 *     cdef uint32_t _add(self, str form, str lemma):             # <<<<<<<<<<<<<<
 *         cdef LCS lcs = find_lcs(form, lemma)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees._add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":108
 *         return self._tree_id(tree)
 * 
 *     cdef uint32_t _tree_id(self, EditTreeC tree):             # <<<<<<<<<<<<<<
 *         # If this tree has been constructed before, return its identifier.
 *         cdef hash_t hash = edittree_hash(tree)
*/

static uint32_t __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees__tree_id(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_v_tree) {
  __pyx_t_5spacy_8typedefs_hash_t __pyx_v_hash;
  std::unordered_map<__pyx_t_5spacy_8typedefs_hash_t,uint32_t> ::iterator __pyx_v_iter;
  uint32_t __pyx_v_tree_id;
  uint32_t __pyx_r;
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  std::pair<__pyx_t_5spacy_8typedefs_hash_t,uint32_t>  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":110
 *     cdef uint32_t _tree_id(self, EditTreeC tree):
 *         # If this tree has been constructed before, return its identifier.
 *         cdef hash_t hash = edittree_hash(tree)             # <<<<<<<<<<<<<<
 *         cdef unordered_map[hash_t, uint32_t].iterator iter = self.map.find(hash)
 *         if iter != self.map.end():
*/
  __pyx_t_1 = __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_edittree_hash(__pyx_v_tree); if (unlikely(__pyx_t_1 == ((uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L1_error)
  __pyx_v_hash = __pyx_t_1;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":111
 *         # If this tree has been constructed before, return its identifier.
 *         cdef hash_t hash = edittree_hash(tree)
 *         cdef unordered_map[hash_t, uint32_t].iterator iter = self.map.find(hash)             # <<<<<<<<<<<<<<
 *         if iter != self.map.end():
 *             return deref(iter).second
*/
  __pyx_v_iter = __pyx_v_self->map.find(__pyx_v_hash);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":112
 *         cdef hash_t hash = edittree_hash(tree)
 *         cdef unordered_map[hash_t, uint32_t].iterator iter = self.map.find(hash)
 *         if iter != self.map.end():             # <<<<<<<<<<<<<<
 *             return deref(iter).second
 * 
*/
  __pyx_t_2 = (__pyx_v_iter != __pyx_v_self->map.end());
  if (__pyx_t_2) {

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":113
 *         cdef unordered_map[hash_t, uint32_t].iterator iter = self.map.find(hash)
 *         if iter != self.map.end():
 *             return deref(iter).second             # <<<<<<<<<<<<<<
 * 
 *         #  The tree hasn't been seen before, store it.
*/
    __pyx_r = (*__pyx_v_iter).second;
    goto __pyx_L0;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":112
 *         cdef hash_t hash = edittree_hash(tree)
 *         cdef unordered_map[hash_t, uint32_t].iterator iter = self.map.find(hash)
 *         if iter != self.map.end():             # <<<<<<<<<<<<<<
 *             return deref(iter).second
 * 
*/
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":116
 * 
 *         #  The tree hasn't been seen before, store it.
 *         cdef uint32_t tree_id = self.trees.size()             # <<<<<<<<<<<<<<
 *         self.trees.push_back(tree)
 *         self.map.insert(pair[hash_t, uint32_t](hash, tree_id))
*/
  __pyx_v_tree_id = __pyx_v_self->trees.size();

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":117
 *         #  The tree hasn't been seen before, store it.
 *         cdef uint32_t tree_id = self.trees.size()
 *         self.trees.push_back(tree)             # <<<<<<<<<<<<<<
 *         self.map.insert(pair[hash_t, uint32_t](hash, tree_id))
 * 
*/
  try {
    __pyx_v_self->trees.push_back(__pyx_v_tree);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 117, __pyx_L1_error)
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":118
 *         cdef uint32_t tree_id = self.trees.size()
 *         self.trees.push_back(tree)
 *         self.map.insert(pair[hash_t, uint32_t](hash, tree_id))             # <<<<<<<<<<<<<<
 * 
 *         return tree_id
*/
  try {
    __pyx_t_3 = std::pair<__pyx_t_5spacy_8typedefs_hash_t,uint32_t> (__pyx_v_hash, __pyx_v_tree_id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 118, __pyx_L1_error)
  }
  try {
    __pyx_v_self->map.insert(__pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 118, __pyx_L1_error)
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":120
 *         self.map.insert(pair[hash_t, uint32_t](hash, tree_id))
 * 
 *         return tree_id             # <<<<<<<<<<<<<<
 * 
 *     cpdef str apply(self, uint32_t tree_id, str form):
*/
  __pyx_r = __pyx_v_tree_id;
  goto __pyx_L0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":108
 *         return self._tree_id(tree)
 * 
 *     cdef uint32_t _tree_id(self, EditTreeC tree):             # <<<<<<<<<<<<<<
 *         # If this tree has been constructed before, return its identifier.
 *         cdef hash_t hash = edittree_hash(tree)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees._tree_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":122
 *         return tree_id
 * 
 *     cpdef str apply(self, uint32_t tree_id, str form):             # <<<<<<<<<<<<<<
 *         """Apply an edit tree to a form.
 * 
*/

static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_5apply(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_apply(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, uint32_t __pyx_v_tree_id, PyObject *__pyx_v_form, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_lemma_pieces = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("apply", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_apply); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_5apply)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = __Pyx_PyLong_From_uint32_t(__pyx_v_tree_id); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 122, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_6 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_t_5, __pyx_v_form};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 122, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_2))) __PYX_ERR(0, 122, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":130
 *             could not be applied to the form.
 *         """
 *         if tree_id >= self.trees.size():             # <<<<<<<<<<<<<<
 *             raise IndexError(Errors.E1030)
 * 
*/
  __pyx_t_7 = (__pyx_v_tree_id >= __pyx_v_self->trees.size());
  if (unlikely(__pyx_t_7)) {

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":131
 *         """
 *         if tree_id >= self.trees.size():
 *             raise IndexError(Errors.E1030)             # <<<<<<<<<<<<<<
 * 
 *         lemma_pieces = []
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_builtin_IndexError);
    __pyx_t_4 = __pyx_builtin_IndexError; 
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_Errors); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_E1030); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 131, __pyx_L1_error)

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":130
 *             could not be applied to the form.
 *         """
 *         if tree_id >= self.trees.size():             # <<<<<<<<<<<<<<
 *             raise IndexError(Errors.E1030)
 * 
*/
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":133
 *             raise IndexError(Errors.E1030)
 * 
 *         lemma_pieces = []             # <<<<<<<<<<<<<<
 *         try:
 *             self._apply(tree_id, form, lemma_pieces)
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_lemma_pieces = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":134
 * 
 *         lemma_pieces = []
 *         try:             # <<<<<<<<<<<<<<
 *             self._apply(tree_id, form, lemma_pieces)
 *         except ValueError:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_10);
    /*try:*/ {

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":135
 *         lemma_pieces = []
 *         try:
 *             self._apply(tree_id, form, lemma_pieces)             # <<<<<<<<<<<<<<
 *         except ValueError:
 *             return None
*/
      __pyx_t_1 = ((struct __pyx_vtabstruct_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self->__pyx_vtab)->_apply(__pyx_v_self, __pyx_v_tree_id, __pyx_v_form, __pyx_v_lemma_pieces); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":134
 * 
 *         lemma_pieces = []
 *         try:             # <<<<<<<<<<<<<<
 *             self._apply(tree_id, form, lemma_pieces)
 *         except ValueError:
*/
    }
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":136
 *         try:
 *             self._apply(tree_id, form, lemma_pieces)
 *         except ValueError:             # <<<<<<<<<<<<<<
 *             return None
 *         return "".join(lemma_pieces)
*/
    __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_11) {
      __Pyx_ErrRestore(0,0,0);

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":137
 *             self._apply(tree_id, form, lemma_pieces)
 *         except ValueError:
 *             return None             # <<<<<<<<<<<<<<
 *         return "".join(lemma_pieces)
 * 
*/
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
      goto __pyx_L7_except_return;
    }
    goto __pyx_L6_except_error;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":134
 * 
 *         lemma_pieces = []
 *         try:             # <<<<<<<<<<<<<<
 *             self._apply(tree_id, form, lemma_pieces)
 *         except ValueError:
*/
    __pyx_L6_except_error:;
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
    goto __pyx_L1_error;
    __pyx_L7_except_return:;
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
    goto __pyx_L0;
    __pyx_L9_try_end:;
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":138
 *         except ValueError:
 *             return None
 *         return "".join(lemma_pieces)             # <<<<<<<<<<<<<<
 * 
 *     cdef _apply(self, uint32_t tree_id, str form_part, list lemma_pieces):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyUnicode_Join(__pyx_mstate_global->__pyx_kp_u_, __pyx_v_lemma_pieces); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":122
 *         return tree_id
 * 
 *     cpdef str apply(self, uint32_t tree_id, str form):             # <<<<<<<<<<<<<<
 *         """Apply an edit tree to a form.
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.apply", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lemma_pieces);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_5apply(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_4apply, "EditTrees.apply(self, uint32_t tree_id, str form) -> str\nApply an edit tree to a form.\n\ntree_id (uint32_t): the identifier of the edit tree to apply.\nform (str): the form to apply the edit tree to.\nRETURNS (str): the transformer form or None if the edit tree\n    could not be applied to the form.");
static PyMethodDef __pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_5apply = {"apply", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_5apply, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_4apply};
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_5apply(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  uint32_t __pyx_v_tree_id;
  PyObject *__pyx_v_form = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("apply (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_tree_id,&__pyx_mstate_global->__pyx_n_u_form,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 122, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 122, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 122, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "apply", 0) < 0) __PYX_ERR(0, 122, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("apply", 1, 2, 2, i); __PYX_ERR(0, 122, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 122, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 122, __pyx_L3_error)
    }
    __pyx_v_tree_id = __Pyx_PyLong_As_uint32_t(values[0]); if (unlikely((__pyx_v_tree_id == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 122, __pyx_L3_error)
    __pyx_v_form = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("apply", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 122, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.apply", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_form), (&PyUnicode_Type), 1, "form", 1))) __PYX_ERR(0, 122, __pyx_L1_error)
  __pyx_r = __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_4apply(((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self), __pyx_v_tree_id, __pyx_v_form);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_4apply(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, uint32_t __pyx_v_tree_id, PyObject *__pyx_v_form) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("apply", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_apply(__pyx_v_self, __pyx_v_tree_id, __pyx_v_form, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.apply", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":140
 *         return "".join(lemma_pieces)
 * 
 *     cdef _apply(self, uint32_t tree_id, str form_part, list lemma_pieces):             # <<<<<<<<<<<<<<
 *         """Recursively apply an edit tree to a form, adding pieces to
 *         the lemma_pieces list."""
*/

static PyObject *__pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees__apply(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, uint32_t __pyx_v_tree_id, PyObject *__pyx_v_form_part, PyObject *__pyx_v_lemma_pieces) {
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_v_tree;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC __pyx_v_match_node;
  int __pyx_v_suffix_start;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  size_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_apply", 0);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":143
 *         """Recursively apply an edit tree to a form, adding pieces to
 *         the lemma_pieces list."""
 *         assert tree_id <= self.trees.size()             # <<<<<<<<<<<<<<
 * 
 *         cdef EditTreeC tree = self.trees[tree_id]
*/
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = (__pyx_v_tree_id <= __pyx_v_self->trees.size());
    if (unlikely(!__pyx_t_1)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 143, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 143, __pyx_L1_error)
  #endif

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":145
 *         assert tree_id <= self.trees.size()
 * 
 *         cdef EditTreeC tree = self.trees[tree_id]             # <<<<<<<<<<<<<<
 *         cdef MatchNodeC match_node
 *         cdef int suffix_start
*/
  __pyx_v_tree = (__pyx_v_self->trees[__pyx_v_tree_id]);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":149
 *         cdef int suffix_start
 * 
 *         if tree.is_match_node:             # <<<<<<<<<<<<<<
 *             match_node = tree.inner.match_node
 * 
*/
  if (__pyx_v_tree.is_match_node) {

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":150
 * 
 *         if tree.is_match_node:
 *             match_node = tree.inner.match_node             # <<<<<<<<<<<<<<
 * 
 *             if match_node.prefix_len + match_node.suffix_len > len(form_part):
*/
    __pyx_t_2 = __pyx_v_tree.inner.match_node;
    __pyx_v_match_node = __pyx_t_2;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":152
 *             match_node = tree.inner.match_node
 * 
 *             if match_node.prefix_len + match_node.suffix_len > len(form_part):             # <<<<<<<<<<<<<<
 *                 raise ValueError(Errors.E1029)
 * 
*/
    if (unlikely(__pyx_v_form_part == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 152, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyUnicode_GET_LENGTH(__pyx_v_form_part); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 152, __pyx_L1_error)
    __pyx_t_1 = ((__pyx_v_match_node.prefix_len + __pyx_v_match_node.suffix_len) > __pyx_t_3);
    if (unlikely(__pyx_t_1)) {

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":153
 * 
 *             if match_node.prefix_len + match_node.suffix_len > len(form_part):
 *                 raise ValueError(Errors.E1029)             # <<<<<<<<<<<<<<
 * 
 *             suffix_start = len(form_part) - match_node.suffix_len
*/
      __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_builtin_ValueError);
      __pyx_t_6 = __pyx_builtin_ValueError; 
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_Errors); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_E1029); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_8};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 153, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 153, __pyx_L1_error)

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":152
 *             match_node = tree.inner.match_node
 * 
 *             if match_node.prefix_len + match_node.suffix_len > len(form_part):             # <<<<<<<<<<<<<<
 *                 raise ValueError(Errors.E1029)
 * 
*/
    }

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":155
 *                 raise ValueError(Errors.E1029)
 * 
 *             suffix_start = len(form_part) - match_node.suffix_len             # <<<<<<<<<<<<<<
 * 
 *             if match_node.prefix_tree != NULL_TREE_ID:
*/
    if (unlikely(__pyx_v_form_part == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 155, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyUnicode_GET_LENGTH(__pyx_v_form_part); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 155, __pyx_L1_error)
    __pyx_v_suffix_start = (__pyx_t_3 - __pyx_v_match_node.suffix_len);

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":157
 *             suffix_start = len(form_part) - match_node.suffix_len
 * 
 *             if match_node.prefix_tree != NULL_TREE_ID:             # <<<<<<<<<<<<<<
 *                 self._apply(match_node.prefix_tree, form_part[:match_node.prefix_len], lemma_pieces)
 * 
*/
    __pyx_t_1 = (__pyx_v_match_node.prefix_tree != __pyx_v_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NULL_TREE_ID);
    if (__pyx_t_1) {

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":158
 * 
 *             if match_node.prefix_tree != NULL_TREE_ID:
 *                 self._apply(match_node.prefix_tree, form_part[:match_node.prefix_len], lemma_pieces)             # <<<<<<<<<<<<<<
 * 
 *             lemma_pieces.append(form_part[match_node.prefix_len:suffix_start])
*/
      if (unlikely(__pyx_v_form_part == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 158, __pyx_L1_error)
      }
      __pyx_t_4 = __Pyx_PyUnicode_Substring(__pyx_v_form_part, 0, __pyx_v_match_node.prefix_len); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = ((struct __pyx_vtabstruct_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self->__pyx_vtab)->_apply(__pyx_v_self, __pyx_v_match_node.prefix_tree, ((PyObject*)__pyx_t_4), __pyx_v_lemma_pieces); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":157
 *             suffix_start = len(form_part) - match_node.suffix_len
 * 
 *             if match_node.prefix_tree != NULL_TREE_ID:             # <<<<<<<<<<<<<<
 *                 self._apply(match_node.prefix_tree, form_part[:match_node.prefix_len], lemma_pieces)
 * 
*/
    }

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":160
 *                 self._apply(match_node.prefix_tree, form_part[:match_node.prefix_len], lemma_pieces)
 * 
 *             lemma_pieces.append(form_part[match_node.prefix_len:suffix_start])             # <<<<<<<<<<<<<<
 * 
 *             if match_node.suffix_tree != NULL_TREE_ID:
*/
    if (unlikely(__pyx_v_lemma_pieces == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(0, 160, __pyx_L1_error)
    }
    if (unlikely(__pyx_v_form_part == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 160, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyUnicode_Substring(__pyx_v_form_part, __pyx_v_match_node.prefix_len, __pyx_v_suffix_start); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_lemma_pieces, __pyx_t_6); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":162
 *             lemma_pieces.append(form_part[match_node.prefix_len:suffix_start])
 * 
 *             if match_node.suffix_tree != NULL_TREE_ID:             # <<<<<<<<<<<<<<
 *                 self._apply(match_node.suffix_tree, form_part[suffix_start:], lemma_pieces)
 *         else:
*/
    __pyx_t_1 = (__pyx_v_match_node.suffix_tree != __pyx_v_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NULL_TREE_ID);
    if (__pyx_t_1) {

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":163
 * 
 *             if match_node.suffix_tree != NULL_TREE_ID:
 *                 self._apply(match_node.suffix_tree, form_part[suffix_start:], lemma_pieces)             # <<<<<<<<<<<<<<
 *         else:
 *             if form_part == self.strings[tree.inner.subst_node.orig]:
*/
      if (unlikely(__pyx_v_form_part == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 163, __pyx_L1_error)
      }
      __pyx_t_6 = __Pyx_PyUnicode_Substring(__pyx_v_form_part, __pyx_v_suffix_start, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = ((struct __pyx_vtabstruct_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self->__pyx_vtab)->_apply(__pyx_v_self, __pyx_v_match_node.suffix_tree, ((PyObject*)__pyx_t_6), __pyx_v_lemma_pieces); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":162
 *             lemma_pieces.append(form_part[match_node.prefix_len:suffix_start])
 * 
 *             if match_node.suffix_tree != NULL_TREE_ID:             # <<<<<<<<<<<<<<
 *                 self._apply(match_node.suffix_tree, form_part[suffix_start:], lemma_pieces)
 *         else:
*/
    }

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":149
 *         cdef int suffix_start
 * 
 *         if tree.is_match_node:             # <<<<<<<<<<<<<<
 *             match_node = tree.inner.match_node
 * 
*/
    goto __pyx_L3;
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":165
 *                 self._apply(match_node.suffix_tree, form_part[suffix_start:], lemma_pieces)
 *         else:
 *             if form_part == self.strings[tree.inner.subst_node.orig]:             # <<<<<<<<<<<<<<
 *                 lemma_pieces.append(self.strings[tree.inner.subst_node.subst])
 *             else:
*/
  /*else*/ {
    __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->strings), __pyx_v_tree.inner.subst_node.orig, __pyx_t_5spacy_8typedefs_attr_t, 0, __Pyx_PyLong_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_form_part, __pyx_t_4, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(__pyx_t_1)) {

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":166
 *         else:
 *             if form_part == self.strings[tree.inner.subst_node.orig]:
 *                 lemma_pieces.append(self.strings[tree.inner.subst_node.subst])             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(Errors.E1029)
*/
      if (unlikely(__pyx_v_lemma_pieces == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
        __PYX_ERR(0, 166, __pyx_L1_error)
      }
      __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->strings), __pyx_v_tree.inner.subst_node.subst, __pyx_t_5spacy_8typedefs_attr_t, 0, __Pyx_PyLong_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_lemma_pieces, __pyx_t_4); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 166, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":165
 *                 self._apply(match_node.suffix_tree, form_part[suffix_start:], lemma_pieces)
 *         else:
 *             if form_part == self.strings[tree.inner.subst_node.orig]:             # <<<<<<<<<<<<<<
 *                 lemma_pieces.append(self.strings[tree.inner.subst_node.subst])
 *             else:
*/
      goto __pyx_L7;
    }

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":168
 *                 lemma_pieces.append(self.strings[tree.inner.subst_node.subst])
 *             else:
 *                 raise ValueError(Errors.E1029)             # <<<<<<<<<<<<<<
 * 
 *     cpdef unicode tree_to_str(self, uint32_t tree_id):
*/
    /*else*/ {
      __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_builtin_ValueError);
      __pyx_t_8 = __pyx_builtin_ValueError; 
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_Errors); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 168, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_E1029); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 168, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_7};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 168, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 168, __pyx_L1_error)
    }
    __pyx_L7:;
  }
  __pyx_L3:;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":140
 *         return "".join(lemma_pieces)
 * 
 *     cdef _apply(self, uint32_t tree_id, str form_part, list lemma_pieces):             # <<<<<<<<<<<<<<
 *         """Recursively apply an edit tree to a form, adding pieces to
 *         the lemma_pieces list."""
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees._apply", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":170
 *                 raise ValueError(Errors.E1029)
 * 
 *     cpdef unicode tree_to_str(self, uint32_t tree_id):             # <<<<<<<<<<<<<<
 *         """Return the tree as a string. The tree tree string is formatted
 *         like an S-expression. This is primarily useful for debugging. Match
*/

static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_7tree_to_str(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_tree_to_str(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, uint32_t __pyx_v_tree_id, int __pyx_skip_dispatch) {
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_v_tree;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC __pyx_v_subst_node;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC __pyx_v_match_node;
  PyObject *__pyx_v_prefix_tree = NULL;
  PyObject *__pyx_v_suffix_tree = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  int __pyx_t_7;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_SubstNodeC __pyx_t_8;
  PyObject *__pyx_t_9[5];
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_MatchNodeC __pyx_t_10;
  PyObject *__pyx_t_11[9];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tree_to_str", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_tree_to_str); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_7tree_to_str)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = __Pyx_PyLong_From_uint32_t(__pyx_v_tree_id); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 170, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_6 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 170, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_2))) __PYX_ERR(0, 170, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":185
 *         """
 * 
 *         if tree_id >= self.trees.size():             # <<<<<<<<<<<<<<
 *             raise IndexError(Errors.E1030)
 * 
*/
  __pyx_t_7 = (__pyx_v_tree_id >= __pyx_v_self->trees.size());
  if (unlikely(__pyx_t_7)) {

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":186
 * 
 *         if tree_id >= self.trees.size():
 *             raise IndexError(Errors.E1030)             # <<<<<<<<<<<<<<
 * 
 *         cdef EditTreeC tree = self.trees[tree_id]
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_builtin_IndexError);
    __pyx_t_4 = __pyx_builtin_IndexError; 
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_Errors); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_E1030); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 186, __pyx_L1_error)

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":185
 *         """
 * 
 *         if tree_id >= self.trees.size():             # <<<<<<<<<<<<<<
 *             raise IndexError(Errors.E1030)
 * 
*/
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":188
 *             raise IndexError(Errors.E1030)
 * 
 *         cdef EditTreeC tree = self.trees[tree_id]             # <<<<<<<<<<<<<<
 *         cdef SubstNodeC subst_node
 * 
*/
  __pyx_v_tree = (__pyx_v_self->trees[__pyx_v_tree_id]);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":191
 *         cdef SubstNodeC subst_node
 * 
 *         if not tree.is_match_node:             # <<<<<<<<<<<<<<
 *             subst_node = tree.inner.subst_node
 *             return f"(s '{self.strings[subst_node.orig]}' '{self.strings[subst_node.subst]}')"
*/
  __pyx_t_7 = (!__pyx_v_tree.is_match_node);
  if (__pyx_t_7) {

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":192
 * 
 *         if not tree.is_match_node:
 *             subst_node = tree.inner.subst_node             # <<<<<<<<<<<<<<
 *             return f"(s '{self.strings[subst_node.orig]}' '{self.strings[subst_node.subst]}')"
 * 
*/
    __pyx_t_8 = __pyx_v_tree.inner.subst_node;
    __pyx_v_subst_node = __pyx_t_8;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":193
 *         if not tree.is_match_node:
 *             subst_node = tree.inner.subst_node
 *             return f"(s '{self.strings[subst_node.orig]}' '{self.strings[subst_node.subst]}')"             # <<<<<<<<<<<<<<
 * 
 *         cdef MatchNodeC match_node = tree.inner.match_node
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->strings), __pyx_v_subst_node.orig, __pyx_t_5spacy_8typedefs_attr_t, 0, __Pyx_PyLong_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->strings), __pyx_v_subst_node.subst, __pyx_t_5spacy_8typedefs_attr_t, 0, __Pyx_PyLong_From_uint64_t, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9[0] = __pyx_mstate_global->__pyx_kp_u_s;
    __pyx_t_9[1] = __pyx_t_4;
    __pyx_t_9[2] = __pyx_mstate_global->__pyx_kp_u__2;
    __pyx_t_9[3] = __pyx_t_3;
    __pyx_t_9[4] = __pyx_mstate_global->__pyx_kp_u__3;
    __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_9, 5, 4 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4) + 3 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3) + 2, 127 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3));
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":191
 *         cdef SubstNodeC subst_node
 * 
 *         if not tree.is_match_node:             # <<<<<<<<<<<<<<
 *             subst_node = tree.inner.subst_node
 *             return f"(s '{self.strings[subst_node.orig]}' '{self.strings[subst_node.subst]}')"
*/
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":195
 *             return f"(s '{self.strings[subst_node.orig]}' '{self.strings[subst_node.subst]}')"
 * 
 *         cdef MatchNodeC match_node = tree.inner.match_node             # <<<<<<<<<<<<<<
 * 
 *         prefix_tree = "()"
*/
  __pyx_t_10 = __pyx_v_tree.inner.match_node;
  __pyx_v_match_node = __pyx_t_10;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":197
 *         cdef MatchNodeC match_node = tree.inner.match_node
 * 
 *         prefix_tree = "()"             # <<<<<<<<<<<<<<
 *         if match_node.prefix_tree != NULL_TREE_ID:
 *             prefix_tree = self.tree_to_str(match_node.prefix_tree)
*/
  __Pyx_INCREF(__pyx_mstate_global->__pyx_kp_u__4);
  __pyx_v_prefix_tree = __pyx_mstate_global->__pyx_kp_u__4;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":198
 * 
 *         prefix_tree = "()"
 *         if match_node.prefix_tree != NULL_TREE_ID:             # <<<<<<<<<<<<<<
 *             prefix_tree = self.tree_to_str(match_node.prefix_tree)
 * 
*/
  __pyx_t_7 = (__pyx_v_match_node.prefix_tree != __pyx_v_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NULL_TREE_ID);
  if (__pyx_t_7) {

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":199
 *         prefix_tree = "()"
 *         if match_node.prefix_tree != NULL_TREE_ID:
 *             prefix_tree = self.tree_to_str(match_node.prefix_tree)             # <<<<<<<<<<<<<<
 * 
 *         suffix_tree = "()"
*/
    __pyx_t_1 = ((struct __pyx_vtabstruct_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self->__pyx_vtab)->tree_to_str(__pyx_v_self, __pyx_v_match_node.prefix_tree, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_prefix_tree, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":198
 * 
 *         prefix_tree = "()"
 *         if match_node.prefix_tree != NULL_TREE_ID:             # <<<<<<<<<<<<<<
 *             prefix_tree = self.tree_to_str(match_node.prefix_tree)
 * 
*/
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":201
 *             prefix_tree = self.tree_to_str(match_node.prefix_tree)
 * 
 *         suffix_tree = "()"             # <<<<<<<<<<<<<<
 *         if match_node.suffix_tree != NULL_TREE_ID:
 *             suffix_tree = self.tree_to_str(match_node.suffix_tree)
*/
  __Pyx_INCREF(__pyx_mstate_global->__pyx_kp_u__4);
  __pyx_v_suffix_tree = __pyx_mstate_global->__pyx_kp_u__4;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":202
 * 
 *         suffix_tree = "()"
 *         if match_node.suffix_tree != NULL_TREE_ID:             # <<<<<<<<<<<<<<
 *             suffix_tree = self.tree_to_str(match_node.suffix_tree)
 * 
*/
  __pyx_t_7 = (__pyx_v_match_node.suffix_tree != __pyx_v_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_NULL_TREE_ID);
  if (__pyx_t_7) {

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":203
 *         suffix_tree = "()"
 *         if match_node.suffix_tree != NULL_TREE_ID:
 *             suffix_tree = self.tree_to_str(match_node.suffix_tree)             # <<<<<<<<<<<<<<
 * 
 *         return f"(m {match_node.prefix_len} {match_node.suffix_len} {prefix_tree} {suffix_tree})"
*/
    __pyx_t_1 = ((struct __pyx_vtabstruct_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self->__pyx_vtab)->tree_to_str(__pyx_v_self, __pyx_v_match_node.suffix_tree, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_suffix_tree, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":202
 * 
 *         suffix_tree = "()"
 *         if match_node.suffix_tree != NULL_TREE_ID:             # <<<<<<<<<<<<<<
 *             suffix_tree = self.tree_to_str(match_node.suffix_tree)
 * 
*/
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":205
 *             suffix_tree = self.tree_to_str(match_node.suffix_tree)
 * 
 *         return f"(m {match_node.prefix_len} {match_node.suffix_len} {prefix_tree} {suffix_tree})"             # <<<<<<<<<<<<<<
 * 
 *     def from_json(self, trees: list) -> "EditTrees":
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_uint16_t(__pyx_v_match_node.prefix_len); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyLong_From_uint16_t(__pyx_v_match_node.suffix_len); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyUnicode_Unicode(__pyx_v_prefix_tree); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyUnicode_Unicode(__pyx_v_suffix_tree); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_11[0] = __pyx_mstate_global->__pyx_kp_u_m;
  __pyx_t_11[1] = __pyx_t_3;
  __pyx_t_11[2] = __pyx_mstate_global->__pyx_kp_u__5;
  __pyx_t_11[3] = __pyx_t_4;
  __pyx_t_11[4] = __pyx_mstate_global->__pyx_kp_u__5;
  __pyx_t_11[5] = __pyx_t_1;
  __pyx_t_11[6] = __pyx_mstate_global->__pyx_kp_u__5;
  __pyx_t_11[7] = __pyx_t_2;
  __pyx_t_11[8] = __pyx_mstate_global->__pyx_kp_u__6;
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_11, 9, 3 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3) + 1 * 4 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4) + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1) + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2), 127 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2));
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":170
 *                 raise ValueError(Errors.E1029)
 * 
 *     cpdef unicode tree_to_str(self, uint32_t tree_id):             # <<<<<<<<<<<<<<
 *         """Return the tree as a string. The tree tree string is formatted
 *         like an S-expression. This is primarily useful for debugging. Match
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.tree_to_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_prefix_tree);
  __Pyx_XDECREF(__pyx_v_suffix_tree);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_7tree_to_str(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_6tree_to_str, "EditTrees.tree_to_str(self, uint32_t tree_id) -> str\nReturn the tree as a string. The tree tree string is formatted\nlike an S-expression. This is primarily useful for debugging. Match\nnodes have the following format:\n\n(m prefix_len suffix_len prefix_tree suffix_tree)\n\nSubstitution nodes have the following format:\n\n(s original substitute)\n\ntree_id (uint32_t): the identifier of the edit tree.\nRETURNS (str): the tree as an S-expression.");
static PyMethodDef __pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_7tree_to_str = {"tree_to_str", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_7tree_to_str, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_6tree_to_str};
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_7tree_to_str(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  uint32_t __pyx_v_tree_id;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tree_to_str (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_tree_id,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 170, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 170, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "tree_to_str", 0) < 0) __PYX_ERR(0, 170, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("tree_to_str", 1, 1, 1, i); __PYX_ERR(0, 170, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 170, __pyx_L3_error)
    }
    __pyx_v_tree_id = __Pyx_PyLong_As_uint32_t(values[0]); if (unlikely((__pyx_v_tree_id == ((uint32_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 170, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tree_to_str", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 170, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.tree_to_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_6tree_to_str(((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self), __pyx_v_tree_id);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_6tree_to_str(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, uint32_t __pyx_v_tree_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tree_to_str", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_tree_to_str(__pyx_v_self, __pyx_v_tree_id, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.tree_to_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":207
 *         return f"(m {match_node.prefix_len} {match_node.suffix_len} {prefix_tree} {suffix_tree})"
 * 
 *     def from_json(self, trees: list) -> "EditTrees":             # <<<<<<<<<<<<<<
 *         self.trees.clear()
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_9from_json(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_8from_json, "EditTrees.from_json(self, trees: list) -> 'EditTrees'");
static PyMethodDef __pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_9from_json = {"from_json", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_9from_json, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_8from_json};
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_9from_json(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_trees = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_json (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_trees,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 207, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 207, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "from_json", 0) < 0) __PYX_ERR(0, 207, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("from_json", 1, 1, 1, i); __PYX_ERR(0, 207, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 207, __pyx_L3_error)
    }
    __pyx_v_trees = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_json", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 207, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.from_json", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_8from_json(((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self), __pyx_v_trees);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_8from_json(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, PyObject *__pyx_v_trees) {
  PyObject *__pyx_v_tree = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_json", 0);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":208
 * 
 *     def from_json(self, trees: list) -> "EditTrees":
 *         self.trees.clear()             # <<<<<<<<<<<<<<
 * 
 *         for tree in trees:
*/
  __pyx_v_self->trees.clear();

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":210
 *         self.trees.clear()
 * 
 *         for tree in trees:             # <<<<<<<<<<<<<<
 *             tree = _dict2tree(tree)
 *             self.trees.push_back(tree)
*/
  if (likely(PyList_CheckExact(__pyx_v_trees)) || PyTuple_CheckExact(__pyx_v_trees)) {
    __pyx_t_1 = __pyx_v_trees; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_trees); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 210, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 210, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_2);
        ++__pyx_t_2;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 210, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2));
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2);
        #endif
        ++__pyx_t_2;
      }
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 210, __pyx_L1_error)
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 210, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_tree, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":211
 * 
 *         for tree in trees:
 *             tree = _dict2tree(tree)             # <<<<<<<<<<<<<<
 *             self.trees.push_back(tree)
 * 
*/
    __pyx_t_5 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_dict2tree); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      assert(__pyx_t_5);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_6, __pyx__function);
      __pyx_t_7 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_tree};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 211, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_DECREF_SET(__pyx_v_tree, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":212
 *         for tree in trees:
 *             tree = _dict2tree(tree)
 *             self.trees.push_back(tree)             # <<<<<<<<<<<<<<
 * 
 *         self._rebuild_tree_map()
*/
    __pyx_t_8 = __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC(__pyx_v_tree); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 212, __pyx_L1_error)
    try {
      __pyx_v_self->trees.push_back(__pyx_t_8);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 212, __pyx_L1_error)
    }

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":210
 *         self.trees.clear()
 * 
 *         for tree in trees:             # <<<<<<<<<<<<<<
 *             tree = _dict2tree(tree)
 *             self.trees.push_back(tree)
*/
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":214
 *             self.trees.push_back(tree)
 * 
 *         self._rebuild_tree_map()             # <<<<<<<<<<<<<<
 * 
 *     def from_bytes(self, bytes_data: bytes, *) -> "EditTrees":
*/
  __pyx_t_4 = ((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_7 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_rebuild_tree_map, __pyx_callargs+__pyx_t_7, (1-__pyx_t_7) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":207
 *         return f"(m {match_node.prefix_len} {match_node.suffix_len} {prefix_tree} {suffix_tree})"
 * 
 *     def from_json(self, trees: list) -> "EditTrees":             # <<<<<<<<<<<<<<
 *         self.trees.clear()
 * 
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.from_json", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tree);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":216
 *         self._rebuild_tree_map()
 * 
 *     def from_bytes(self, bytes_data: bytes, *) -> "EditTrees":             # <<<<<<<<<<<<<<
 *         def deserialize_trees(tree_dicts):
 *             cdef EditTreeC c_tree
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_11from_bytes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes, "EditTrees.from_bytes(self, bytes_data: bytes) -> 'EditTrees'");
static PyMethodDef __pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_11from_bytes = {"from_bytes", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_11from_bytes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes};
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_11from_bytes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_bytes_data = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_bytes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_bytes_data,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 216, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 216, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "from_bytes", 0) < 0) __PYX_ERR(0, 216, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("from_bytes", 1, 1, 1, i); __PYX_ERR(0, 216, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 216, __pyx_L3_error)
    }
    __pyx_v_bytes_data = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_bytes", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 216, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.from_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes(((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self), __pyx_v_bytes_data);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":217
 * 
 *     def from_bytes(self, bytes_data: bytes, *) -> "EditTrees":
 *         def deserialize_trees(tree_dicts):             # <<<<<<<<<<<<<<
 *             cdef EditTreeC c_tree
 *             for tree_dict in tree_dicts:
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes_1deserialize_trees(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes_1deserialize_trees = {"deserialize_trees", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes_1deserialize_trees, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes_1deserialize_trees(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_tree_dicts = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deserialize_trees (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_tree_dicts,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 217, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 217, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "deserialize_trees", 0) < 0) __PYX_ERR(0, 217, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("deserialize_trees", 1, 1, 1, i); __PYX_ERR(0, 217, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 217, __pyx_L3_error)
    }
    __pyx_v_tree_dicts = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("deserialize_trees", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 217, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.from_bytes.deserialize_trees", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes_deserialize_trees(__pyx_self, __pyx_v_tree_dicts);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes_deserialize_trees(PyObject *__pyx_self, PyObject *__pyx_v_tree_dicts) {
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes *__pyx_cur_scope;
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes *__pyx_outer_scope;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_v_c_tree;
  PyObject *__pyx_v_tree_dict = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("deserialize_trees", 0);
  __pyx_outer_scope = (struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":219
 *         def deserialize_trees(tree_dicts):
 *             cdef EditTreeC c_tree
 *             for tree_dict in tree_dicts:             # <<<<<<<<<<<<<<
 *                 c_tree = _dict2tree(tree_dict)
 *                 self.trees.push_back(c_tree)
*/
  if (likely(PyList_CheckExact(__pyx_v_tree_dicts)) || PyTuple_CheckExact(__pyx_v_tree_dicts)) {
    __pyx_t_1 = __pyx_v_tree_dicts; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_tree_dicts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 219, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 219, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_2);
        ++__pyx_t_2;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 219, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2));
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2);
        #endif
        ++__pyx_t_2;
      }
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 219, __pyx_L1_error)
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 219, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_tree_dict, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":220
 *             cdef EditTreeC c_tree
 *             for tree_dict in tree_dicts:
 *                 c_tree = _dict2tree(tree_dict)             # <<<<<<<<<<<<<<
 *                 self.trees.push_back(c_tree)
 * 
*/
    __pyx_t_5 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_dict2tree); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      assert(__pyx_t_5);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_6, __pyx__function);
      __pyx_t_7 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_tree_dict};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 220, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_t_8 = __pyx_convert__from_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_c_tree = __pyx_t_8;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":221
 *             for tree_dict in tree_dicts:
 *                 c_tree = _dict2tree(tree_dict)
 *                 self.trees.push_back(c_tree)             # <<<<<<<<<<<<<<
 * 
 *         deserializers = {}
*/
    if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 221, __pyx_L1_error) }
    try {
      __pyx_cur_scope->__pyx_v_self->trees.push_back(__pyx_v_c_tree);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 221, __pyx_L1_error)
    }

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":219
 *         def deserialize_trees(tree_dicts):
 *             cdef EditTreeC c_tree
 *             for tree_dict in tree_dicts:             # <<<<<<<<<<<<<<
 *                 c_tree = _dict2tree(tree_dict)
 *                 self.trees.push_back(c_tree)
*/
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":217
 * 
 *     def from_bytes(self, bytes_data: bytes, *) -> "EditTrees":
 *         def deserialize_trees(tree_dicts):             # <<<<<<<<<<<<<<
 *             cdef EditTreeC c_tree
 *             for tree_dict in tree_dicts:
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.from_bytes.deserialize_trees", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tree_dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":224
 * 
 *         deserializers = {}
 *         deserializers["trees"] = lambda n: deserialize_trees(n)             # <<<<<<<<<<<<<<
 *         util.from_bytes(bytes_data, deserializers, [])
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes_2lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes_2lambda = {"lambda", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes_2lambda, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes_2lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_n = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_n,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 224, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 224, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "lambda", 0) < 0) __PYX_ERR(0, 224, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("lambda", 1, 1, 1, i); __PYX_ERR(0, 224, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 224, __pyx_L3_error)
    }
    __pyx_v_n = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 224, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.from_bytes.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, __pyx_v_n);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, PyObject *__pyx_v_n) {
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes *__pyx_cur_scope;
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda", 0);
  __pyx_outer_scope = (struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_deserialize_trees)) { __Pyx_RaiseClosureNameError("deserialize_trees"); __PYX_ERR(0, 224, __pyx_L1_error) }
  __pyx_t_1 = __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes_deserialize_trees(__pyx_cur_scope->__pyx_v_deserialize_trees, __pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.from_bytes.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":216
 *         self._rebuild_tree_map()
 * 
 *     def from_bytes(self, bytes_data: bytes, *) -> "EditTrees":             # <<<<<<<<<<<<<<
 *         def deserialize_trees(tree_dicts):
 *             cdef EditTreeC c_tree
*/

static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, PyObject *__pyx_v_bytes_data) {
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes *__pyx_cur_scope;
  PyObject *__pyx_v_deserializers = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_bytes", 0);
  __pyx_cur_scope = (struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes *)__pyx_tp_new_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes(__pyx_mstate_global->__pyx_ptype_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes, __pyx_mstate_global->__pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 216, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":217
 * 
 *     def from_bytes(self, bytes_data: bytes, *) -> "EditTrees":
 *         def deserialize_trees(tree_dicts):             # <<<<<<<<<<<<<<
 *             cdef EditTreeC c_tree
 *             for tree_dict in tree_dicts:
*/
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes_1deserialize_trees, 0, __pyx_mstate_global->__pyx_n_u_from_bytes_locals_deserialize_tr, ((PyObject*)__pyx_cur_scope), __pyx_mstate_global->__pyx_n_u_spacy_pipeline__edit_tree_intern, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_deserialize_trees = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":223
 *                 self.trees.push_back(c_tree)
 * 
 *         deserializers = {}             # <<<<<<<<<<<<<<
 *         deserializers["trees"] = lambda n: deserialize_trees(n)
 *         util.from_bytes(bytes_data, deserializers, [])
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_deserializers = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":224
 * 
 *         deserializers = {}
 *         deserializers["trees"] = lambda n: deserialize_trees(n)             # <<<<<<<<<<<<<<
 *         util.from_bytes(bytes_data, deserializers, [])
 * 
*/
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes_2lambda, 0, __pyx_mstate_global->__pyx_n_u_from_bytes_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_mstate_global->__pyx_n_u_spacy_pipeline__edit_tree_intern, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[1])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_deserializers, __pyx_mstate_global->__pyx_n_u_trees, __pyx_t_1) < 0))) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":225
 *         deserializers = {}
 *         deserializers["trees"] = lambda n: deserialize_trees(n)
 *         util.from_bytes(bytes_data, deserializers, [])             # <<<<<<<<<<<<<<
 * 
 *         self._rebuild_tree_map()
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_util); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_from_bytes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_2, __pyx_v_bytes_data, __pyx_v_deserializers, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (4-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":227
 *         util.from_bytes(bytes_data, deserializers, [])
 * 
 *         self._rebuild_tree_map()             # <<<<<<<<<<<<<<
 * 
 *         return self
*/
  __pyx_t_4 = ((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_rebuild_tree_map, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":229
 *         self._rebuild_tree_map()
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def to_bytes(self, **kwargs) -> bytes:
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v_self);
  goto __pyx_L0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":216
 *         self._rebuild_tree_map()
 * 
 *     def from_bytes(self, bytes_data: bytes, *) -> "EditTrees":             # <<<<<<<<<<<<<<
 *         def deserialize_trees(tree_dicts):
 *             cdef EditTreeC c_tree
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.from_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_deserializers);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":231
 *         return self
 * 
 *     def to_bytes(self, **kwargs) -> bytes:             # <<<<<<<<<<<<<<
 *         tree_dicts = []
 *         for tree in self.trees:
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_13to_bytes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_12to_bytes, "EditTrees.to_bytes(self, **kwargs) -> bytes");
static PyMethodDef __pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_13to_bytes = {"to_bytes", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_13to_bytes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_12to_bytes};
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_13to_bytes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_bytes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("to_bytes", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (__pyx_kwds_len > 0) {
    if (unlikely(__Pyx_CheckKeywordStrings("to_bytes", __pyx_kwds) == -1)) return NULL;
  }
  __pyx_r = __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_12to_bytes(((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":238
 * 
 *         serializers = {}
 *         serializers["trees"] = lambda: tree_dicts             # <<<<<<<<<<<<<<
 * 
 *         return util.to_bytes(serializers, [])
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_8to_bytes_lambda1(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_8to_bytes_lambda1 = {"lambda1", (PyCFunction)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_8to_bytes_lambda1, METH_NOARGS, 0};
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_8to_bytes_lambda1(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_lambda_funcdef_lambda1(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self) {
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes *__pyx_cur_scope;
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda1", 0);
  __pyx_outer_scope = (struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_tree_dicts)) { __Pyx_RaiseClosureNameError("tree_dicts"); __PYX_ERR(0, 238, __pyx_L1_error) }
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tree_dicts);
  __pyx_r = __pyx_cur_scope->__pyx_v_tree_dicts;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.to_bytes.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":231
 *         return self
 * 
 *     def to_bytes(self, **kwargs) -> bytes:             # <<<<<<<<<<<<<<
 *         tree_dicts = []
 *         for tree in self.trees:
*/

static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_12to_bytes(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes *__pyx_cur_scope;
  PyObject *__pyx_v_tree = NULL;
  PyObject *__pyx_v_serializers = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC> ::iterator __pyx_t_2;
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_bytes", 0);
  __pyx_cur_scope = (struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes *)__pyx_tp_new_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes(__pyx_mstate_global->__pyx_ptype_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes, __pyx_mstate_global->__pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 231, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":232
 * 
 *     def to_bytes(self, **kwargs) -> bytes:
 *         tree_dicts = []             # <<<<<<<<<<<<<<
 *         for tree in self.trees:
 *             tree = _tree2dict(tree)
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_tree_dicts = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":233
 *     def to_bytes(self, **kwargs) -> bytes:
 *         tree_dicts = []
 *         for tree in self.trees:             # <<<<<<<<<<<<<<
 *             tree = _tree2dict(tree)
 *             tree_dicts.append(tree)
*/
  __pyx_t_2 = __pyx_v_self->trees.begin();
  for (; __pyx_t_2 != __pyx_v_self->trees.end(); ++__pyx_t_2) {
    __pyx_t_3 = *__pyx_t_2;
    __pyx_t_1 = __pyx_convert__to_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_tree, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":234
 *         tree_dicts = []
 *         for tree in self.trees:
 *             tree = _tree2dict(tree)             # <<<<<<<<<<<<<<
 *             tree_dicts.append(tree)
 * 
*/
    __pyx_t_4 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_tree2dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      assert(__pyx_t_4);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
      __pyx_t_6 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_tree};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_DECREF_SET(__pyx_v_tree, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":235
 *         for tree in self.trees:
 *             tree = _tree2dict(tree)
 *             tree_dicts.append(tree)             # <<<<<<<<<<<<<<
 * 
 *         serializers = {}
*/
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_tree_dicts, __pyx_v_tree); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 235, __pyx_L1_error)

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":233
 *     def to_bytes(self, **kwargs) -> bytes:
 *         tree_dicts = []
 *         for tree in self.trees:             # <<<<<<<<<<<<<<
 *             tree = _tree2dict(tree)
 *             tree_dicts.append(tree)
*/
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":237
 *             tree_dicts.append(tree)
 * 
 *         serializers = {}             # <<<<<<<<<<<<<<
 *         serializers["trees"] = lambda: tree_dicts
 * 
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_serializers = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":238
 * 
 *         serializers = {}
 *         serializers["trees"] = lambda: tree_dicts             # <<<<<<<<<<<<<<
 * 
 *         return util.to_bytes(serializers, [])
*/
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_8to_bytes_lambda1, 0, __pyx_mstate_global->__pyx_n_u_to_bytes_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_mstate_global->__pyx_n_u_spacy_pipeline__edit_tree_intern, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[2])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyDict_SetItem(__pyx_v_serializers, __pyx_mstate_global->__pyx_n_u_trees, __pyx_t_1) < 0))) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":240
 *         serializers["trees"] = lambda: tree_dicts
 * 
 *         return util.to_bytes(serializers, [])             # <<<<<<<<<<<<<<
 * 
 *     def to_disk(self, path, **kwargs) -> "EditTrees":
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_util); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_to_bytes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    assert(__pyx_t_5);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_8);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_8, __pyx__function);
    __pyx_t_6 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_v_serializers, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":231
 *         return self
 * 
 *     def to_bytes(self, **kwargs) -> bytes:             # <<<<<<<<<<<<<<
 *         tree_dicts = []
 *         for tree in self.trees:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tree);
  __Pyx_XDECREF(__pyx_v_serializers);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":242
 *         return util.to_bytes(serializers, [])
 * 
 *     def to_disk(self, path, **kwargs) -> "EditTrees":             # <<<<<<<<<<<<<<
 *         path = util.ensure_path(path)
 *         with path.open("wb") as file_:
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_15to_disk(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_14to_disk, "EditTrees.to_disk(self, path, **kwargs) -> 'EditTrees'");
static PyMethodDef __pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_15to_disk = {"to_disk", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_15to_disk, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_14to_disk};
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_15to_disk(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_path = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_disk (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_path,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 242, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 242, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values, kwd_pos_args, __pyx_kwds_len, "to_disk", 1) < 0) __PYX_ERR(0, 242, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("to_disk", 1, 1, 1, i); __PYX_ERR(0, 242, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 242, __pyx_L3_error)
    }
    __pyx_v_path = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("to_disk", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 242, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_XDECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.to_disk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_14to_disk(((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self), __pyx_v_path, __pyx_v_kwargs);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_14to_disk(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, PyObject *__pyx_v_path, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_file_ = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_disk", 0);
  __Pyx_INCREF(__pyx_v_path);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":243
 * 
 *     def to_disk(self, path, **kwargs) -> "EditTrees":
 *         path = util.ensure_path(path)             # <<<<<<<<<<<<<<
 *         with path.open("wb") as file_:
 *             file_.write(self.to_bytes())
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_util); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ensure_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_path};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF_SET(__pyx_v_path, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":244
 *     def to_disk(self, path, **kwargs) -> "EditTrees":
 *         path = util.ensure_path(path)
 *         with path.open("wb") as file_:             # <<<<<<<<<<<<<<
 *             file_.write(self.to_bytes())
 * 
*/
  /*with:*/ {
    __pyx_t_4 = __pyx_v_path;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_5 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_n_u_wb};
      __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_open, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_exit); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = NULL;
    __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 244, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = 1;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      assert(__pyx_t_2);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
      __pyx_t_5 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 244, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {
          __pyx_v_file_ = __pyx_t_3;
          __pyx_t_3 = 0;

          /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":245
 *         path = util.ensure_path(path)
 *         with path.open("wb") as file_:
 *             file_.write(self.to_bytes())             # <<<<<<<<<<<<<<
 * 
 *     def from_disk(self, path, **kwargs) -> "EditTrees":
*/
          __pyx_t_1 = __pyx_v_file_;
          __Pyx_INCREF(__pyx_t_1);
          __pyx_t_2 = ((PyObject *)__pyx_v_self);
          __Pyx_INCREF(__pyx_t_2);
          __pyx_t_5 = 0;
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
            __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_to_bytes, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 245, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_4);
          }
          __pyx_t_5 = 0;
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_4};
            __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_write, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 245, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":244
 *     def to_disk(self, path, **kwargs) -> "EditTrees":
 *         path = util.ensure_path(path)
 *         with path.open("wb") as file_:             # <<<<<<<<<<<<<<
 *             file_.write(self.to_bytes())
 * 
*/
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L12_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.to_disk", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_4, &__pyx_t_1) < 0) __PYX_ERR(0, 244, __pyx_L9_except_error)
          __Pyx_XGOTREF(__pyx_t_3);
          __Pyx_XGOTREF(__pyx_t_4);
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 244, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 244, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (__pyx_t_11 < 0) __PYX_ERR(0, 244, __pyx_L9_except_error)
          __pyx_t_12 = (!__pyx_t_11);
          if (unlikely(__pyx_t_12)) {
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_XGIVEREF(__pyx_t_1);
            __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_4, __pyx_t_1);
            __pyx_t_3 = 0;  __pyx_t_4 = 0;  __pyx_t_1 = 0; 
            __PYX_ERR(0, 244, __pyx_L9_except_error)
          }
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L12_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_6) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_mstate_global->__pyx_tuple[0], NULL);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 244, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L16;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L1_error;
    __pyx_L16:;
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":242
 *         return util.to_bytes(serializers, [])
 * 
 *     def to_disk(self, path, **kwargs) -> "EditTrees":             # <<<<<<<<<<<<<<
 *         path = util.ensure_path(path)
 *         with path.open("wb") as file_:
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.to_disk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_file_);
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":247
 *             file_.write(self.to_bytes())
 * 
 *     def from_disk(self, path, **kwargs) -> "EditTrees":             # <<<<<<<<<<<<<<
 *         path = util.ensure_path(path)
 *         if path.exists():
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_17from_disk(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_16from_disk, "EditTrees.from_disk(self, path, **kwargs) -> 'EditTrees'");
static PyMethodDef __pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_17from_disk = {"from_disk", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_17from_disk, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_16from_disk};
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_17from_disk(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_path = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_disk (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_path,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 247, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 247, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values, kwd_pos_args, __pyx_kwds_len, "from_disk", 1) < 0) __PYX_ERR(0, 247, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("from_disk", 1, 1, 1, i); __PYX_ERR(0, 247, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 247, __pyx_L3_error)
    }
    __pyx_v_path = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_disk", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 247, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_XDECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.from_disk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_16from_disk(((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self), __pyx_v_path, __pyx_v_kwargs);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_16from_disk(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, PyObject *__pyx_v_path, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_file_ = NULL;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_disk", 0);
  __Pyx_INCREF(__pyx_v_path);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":248
 * 
 *     def from_disk(self, path, **kwargs) -> "EditTrees":
 *         path = util.ensure_path(path)             # <<<<<<<<<<<<<<
 *         if path.exists():
 *             with path.open("rb") as file_:
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_util); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ensure_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_path};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF_SET(__pyx_v_path, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":249
 *     def from_disk(self, path, **kwargs) -> "EditTrees":
 *         path = util.ensure_path(path)
 *         if path.exists():             # <<<<<<<<<<<<<<
 *             with path.open("rb") as file_:
 *                 data = file_.read()
*/
  __pyx_t_4 = __pyx_v_path;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_exists, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":250
 *         path = util.ensure_path(path)
 *         if path.exists():
 *             with path.open("rb") as file_:             # <<<<<<<<<<<<<<
 *                 data = file_.read()
 *             return self.from_bytes(data)
*/
    /*with:*/ {
      __pyx_t_4 = __pyx_v_path;
      __Pyx_INCREF(__pyx_t_4);
      __pyx_t_5 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_n_u_rb};
        __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_open, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
      }
      __pyx_t_7 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_exit); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 250, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = NULL;
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = 1;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        assert(__pyx_t_2);
        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx__function);
        __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
        __pyx_t_5 = 0;
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 250, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
      }
      __pyx_t_3 = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
          __Pyx_XGOTREF(__pyx_t_8);
          __Pyx_XGOTREF(__pyx_t_9);
          __Pyx_XGOTREF(__pyx_t_10);
          /*try:*/ {
            __pyx_v_file_ = __pyx_t_3;
            __pyx_t_3 = 0;

            /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":251
 *         if path.exists():
 *             with path.open("rb") as file_:
 *                 data = file_.read()             # <<<<<<<<<<<<<<
 *             return self.from_bytes(data)
 * 
*/
            __pyx_t_1 = __pyx_v_file_;
            __Pyx_INCREF(__pyx_t_1);
            __pyx_t_5 = 0;
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
              __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_read, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 251, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_3);
            }
            __pyx_v_data = __pyx_t_3;
            __pyx_t_3 = 0;

            /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":250
 *         path = util.ensure_path(path)
 *         if path.exists():
 *             with path.open("rb") as file_:             # <<<<<<<<<<<<<<
 *                 data = file_.read()
 *             return self.from_bytes(data)
*/
          }
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          goto __pyx_L13_try_end;
          __pyx_L8_error:;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          /*except:*/ {
            __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.from_disk", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_1, &__pyx_t_4) < 0) __PYX_ERR(0, 250, __pyx_L10_except_error)
            __Pyx_XGOTREF(__pyx_t_3);
            __Pyx_XGOTREF(__pyx_t_1);
            __Pyx_XGOTREF(__pyx_t_4);
            __pyx_t_2 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 250, __pyx_L10_except_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_2, NULL);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 250, __pyx_L10_except_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (__pyx_t_6 < 0) __PYX_ERR(0, 250, __pyx_L10_except_error)
            __pyx_t_12 = (!__pyx_t_6);
            if (unlikely(__pyx_t_12)) {
              __Pyx_GIVEREF(__pyx_t_3);
              __Pyx_GIVEREF(__pyx_t_1);
              __Pyx_XGIVEREF(__pyx_t_4);
              __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_1, __pyx_t_4);
              __pyx_t_3 = 0;  __pyx_t_1 = 0;  __pyx_t_4 = 0; 
              __PYX_ERR(0, 250, __pyx_L10_except_error)
            }
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            goto __pyx_L9_exception_handled;
          }
          __pyx_L10_except_error:;
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
          goto __pyx_L1_error;
          __pyx_L9_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_8);
          __Pyx_XGIVEREF(__pyx_t_9);
          __Pyx_XGIVEREF(__pyx_t_10);
          __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
          __pyx_L13_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_7) {
            __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_mstate_global->__pyx_tuple[0], NULL);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 250, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
          goto __pyx_L7;
        }
        __pyx_L7:;
      }
      goto __pyx_L17;
      __pyx_L4_error:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L1_error;
      __pyx_L17:;
    }

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":252
 *             with path.open("rb") as file_:
 *                 data = file_.read()
 *             return self.from_bytes(data)             # <<<<<<<<<<<<<<
 * 
 *         return self
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = ((PyObject *)__pyx_v_self);
    __Pyx_INCREF(__pyx_t_1);
    if (unlikely(!__pyx_v_data)) { __Pyx_RaiseUnboundLocalError("data"); __PYX_ERR(0, 252, __pyx_L1_error) }
    __pyx_t_5 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_data};
      __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_from_bytes, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 252, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":249
 *     def from_disk(self, path, **kwargs) -> "EditTrees":
 *         path = util.ensure_path(path)
 *         if path.exists():             # <<<<<<<<<<<<<<
 *             with path.open("rb") as file_:
 *                 data = file_.read()
*/
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":254
 *             return self.from_bytes(data)
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, idx):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":247
 *             file_.write(self.to_bytes())
 * 
 *     def from_disk(self, path, **kwargs) -> "EditTrees":             # <<<<<<<<<<<<<<
 *         path = util.ensure_path(path)
 *         if path.exists():
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.from_disk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_file_);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":256
 *         return self
 * 
 *     def __getitem__(self, idx):             # <<<<<<<<<<<<<<
 *         return _tree2dict(self.trees[idx])
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_19__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_idx); /*proto*/
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_19__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_idx) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_18__getitem__(((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self), ((PyObject *)__pyx_v_idx));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_18__getitem__(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self, PyObject *__pyx_v_idx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC> ::size_type __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":257
 * 
 *     def __getitem__(self, idx):
 *         return _tree2dict(self.trees[idx])             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_tree2dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyLong_As_size_t(__pyx_v_idx); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 257, __pyx_L1_error)
  __pyx_t_5 = __pyx_convert__to_py_struct____pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC((__pyx_v_self->trees[__pyx_t_4])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
    __pyx_t_6 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":256
 *         return self
 * 
 *     def __getitem__(self, idx):             # <<<<<<<<<<<<<<
 *         return _tree2dict(self.trees[idx])
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":259
 *         return _tree2dict(self.trees[idx])
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.trees.size()
 * 
*/

/* Python wrapper */
static Py_ssize_t __pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_21__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_21__len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_20__len__(((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_20__len__(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self) {
  Py_ssize_t __pyx_r;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":260
 * 
 *     def __len__(self):
 *         return self.trees.size()             # <<<<<<<<<<<<<<
 * 
 *     def _rebuild_tree_map(self):
*/
  __pyx_r = __pyx_v_self->trees.size();
  goto __pyx_L0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":259
 *         return _tree2dict(self.trees[idx])
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.trees.size()
 * 
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":262
 *         return self.trees.size()
 * 
 *     def _rebuild_tree_map(self):             # <<<<<<<<<<<<<<
 *         """Rebuild the tree hash -> tree id mapping"""
 *         cdef EditTreeC c_tree
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_23_rebuild_tree_map(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_22_rebuild_tree_map, "EditTrees._rebuild_tree_map(self)\nRebuild the tree hash -> tree id mapping");
static PyMethodDef __pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_23_rebuild_tree_map = {"_rebuild_tree_map", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_23_rebuild_tree_map, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_22_rebuild_tree_map};
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_23_rebuild_tree_map(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_rebuild_tree_map (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("_rebuild_tree_map", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("_rebuild_tree_map", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_22_rebuild_tree_map(((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_22_rebuild_tree_map(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self) {
  struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC __pyx_v_c_tree;
  uint32_t __pyx_v_tree_id;
  __pyx_t_5spacy_8typedefs_hash_t __pyx_v_tree_hash;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC> ::size_type __pyx_t_1;
  std::vector<struct __pyx_t_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTreeC> ::size_type __pyx_t_2;
  uint32_t __pyx_t_3;
  uint64_t __pyx_t_4;
  std::pair<__pyx_t_5spacy_8typedefs_hash_t,uint32_t>  __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_rebuild_tree_map", 0);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":268
 *         cdef hash_t tree_hash
 * 
 *         self.map.clear()             # <<<<<<<<<<<<<<
 * 
 *         for tree_id in range(self.trees.size()):
*/
  __pyx_v_self->map.clear();

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":270
 *         self.map.clear()
 * 
 *         for tree_id in range(self.trees.size()):             # <<<<<<<<<<<<<<
 *             c_tree = self.trees[tree_id]
 *             tree_hash = edittree_hash(c_tree)
*/
  __pyx_t_1 = __pyx_v_self->trees.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_tree_id = __pyx_t_3;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":271
 * 
 *         for tree_id in range(self.trees.size()):
 *             c_tree = self.trees[tree_id]             # <<<<<<<<<<<<<<
 *             tree_hash = edittree_hash(c_tree)
 *             self.map.insert(pair[hash_t, uint32_t](tree_hash, tree_id))
*/
    __pyx_v_c_tree = (__pyx_v_self->trees[__pyx_v_tree_id]);

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":272
 *         for tree_id in range(self.trees.size()):
 *             c_tree = self.trees[tree_id]
 *             tree_hash = edittree_hash(c_tree)             # <<<<<<<<<<<<<<
 *             self.map.insert(pair[hash_t, uint32_t](tree_hash, tree_id))
 * 
*/
    __pyx_t_4 = __pyx_f_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_edittree_hash(__pyx_v_c_tree); if (unlikely(__pyx_t_4 == ((uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 272, __pyx_L1_error)
    __pyx_v_tree_hash = __pyx_t_4;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":273
 *             c_tree = self.trees[tree_id]
 *             tree_hash = edittree_hash(c_tree)
 *             self.map.insert(pair[hash_t, uint32_t](tree_hash, tree_id))             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
*/
    try {
      __pyx_t_5 = std::pair<__pyx_t_5spacy_8typedefs_hash_t,uint32_t> (__pyx_v_tree_hash, __pyx_v_tree_id);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 273, __pyx_L1_error)
    }
    try {
      __pyx_v_self->map.insert(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 273, __pyx_L1_error)
    }
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":262
 *         return self.trees.size()
 * 
 *     def _rebuild_tree_map(self):             # <<<<<<<<<<<<<<
 *         """Rebuild the tree hash -> tree id mapping"""
 *         cdef EditTreeC c_tree
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees._rebuild_tree_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":275
 *             self.map.insert(pair[hash_t, uint32_t](tree_hash, tree_id))
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (unpickle_edittrees, (self.strings, self.to_bytes()))
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_25__reduce__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_24__reduce__, "EditTrees.__reduce__(self)");
static PyMethodDef __pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_25__reduce__ = {"__reduce__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_25__reduce__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_24__reduce__};
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_25__reduce__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_24__reduce__(((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_24__reduce__(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":276
 * 
 *     def __reduce__(self):
 *         return (unpickle_edittrees, (self.strings, self.to_bytes()))             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_unpickle_edittrees); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = ((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_to_bytes, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF((PyObject *)__pyx_v_self->strings);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->strings);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self->strings)) != (0)) __PYX_ERR(0, 276, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2) != (0)) __PYX_ERR(0, 276, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1) != (0)) __PYX_ERR(0, 276, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3) != (0)) __PYX_ERR(0, 276, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":275
 *             self.map.insert(pair[hash_t, uint32_t](tree_hash, tree_id))
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (unpickle_edittrees, (self.strings, self.to_bytes()))
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.EditTrees.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":279
 * 
 * 
 * def unpickle_edittrees(strings, trees_data):             # <<<<<<<<<<<<<<
 *     return EditTrees(strings).from_bytes(trees_data)
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_1unpickle_edittrees(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_unpickle_edittrees, "unpickle_edittrees(strings, trees_data)");
static PyMethodDef __pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_1unpickle_edittrees = {"unpickle_edittrees", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_1unpickle_edittrees, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_unpickle_edittrees};
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_1unpickle_edittrees(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_strings = 0;
  PyObject *__pyx_v_trees_data = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unpickle_edittrees (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_strings,&__pyx_mstate_global->__pyx_n_u_trees_data,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 279, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 279, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 279, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "unpickle_edittrees", 0) < 0) __PYX_ERR(0, 279, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("unpickle_edittrees", 1, 2, 2, i); __PYX_ERR(0, 279, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 279, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 279, __pyx_L3_error)
    }
    __pyx_v_strings = values[0];
    __pyx_v_trees_data = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("unpickle_edittrees", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 279, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.unpickle_edittrees", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_unpickle_edittrees(__pyx_self, __pyx_v_strings, __pyx_v_trees_data);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_unpickle_edittrees(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_strings, PyObject *__pyx_v_trees_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unpickle_edittrees", 0);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":280
 * 
 * def unpickle_edittrees(strings, trees_data):
 *     return EditTrees(strings).from_bytes(trees_data)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees);
  __pyx_t_5 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees); 
  __pyx_t_6 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_strings};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_3);
  }
  __pyx_t_2 = ((PyObject *)__pyx_t_3);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_6 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_trees_data};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_from_bytes, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF((PyObject *)__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":279
 * 
 * 
 * def unpickle_edittrees(strings, trees_data):             # <<<<<<<<<<<<<<
 *     return EditTrees(strings).from_bytes(trees_data)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees.unpickle_edittrees", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":283
 * 
 * 
 * def _tree2dict(tree):             # <<<<<<<<<<<<<<
 *     if tree["is_match_node"]:
 *         tree = tree["inner"]["match_node"]
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_3_tree2dict(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_2_tree2dict, "_tree2dict(tree)");
static PyMethodDef __pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_3_tree2dict = {"_tree2dict", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_3_tree2dict, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_2_tree2dict};
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_3_tree2dict(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_tree = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_tree2dict (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_tree,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 283, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 283, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_tree2dict", 0) < 0) __PYX_ERR(0, 283, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_tree2dict", 1, 1, 1, i); __PYX_ERR(0, 283, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 283, __pyx_L3_error)
    }
    __pyx_v_tree = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_tree2dict", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 283, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees._tree2dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_2_tree2dict(__pyx_self, __pyx_v_tree);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_2_tree2dict(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_tree) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_tree2dict", 0);
  __Pyx_INCREF(__pyx_v_tree);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":284
 * 
 * def _tree2dict(tree):
 *     if tree["is_match_node"]:             # <<<<<<<<<<<<<<
 *         tree = tree["inner"]["match_node"]
 *     else:
*/
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_tree, __pyx_mstate_global->__pyx_n_u_is_match_node); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":285
 * def _tree2dict(tree):
 *     if tree["is_match_node"]:
 *         tree = tree["inner"]["match_node"]             # <<<<<<<<<<<<<<
 *     else:
 *         tree = tree["inner"]["subst_node"]
*/
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_tree, __pyx_mstate_global->__pyx_n_u_inner); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_match_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_tree, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":284
 * 
 * def _tree2dict(tree):
 *     if tree["is_match_node"]:             # <<<<<<<<<<<<<<
 *         tree = tree["inner"]["match_node"]
 *     else:
*/
    goto __pyx_L3;
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":287
 *         tree = tree["inner"]["match_node"]
 *     else:
 *         tree = tree["inner"]["subst_node"]             # <<<<<<<<<<<<<<
 *     return(dict(tree))
 * 
*/
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_tree, __pyx_mstate_global->__pyx_n_u_inner); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_subst_node); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_tree, __pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":288
 *     else:
 *         tree = tree["inner"]["subst_node"]
 *     return(dict(tree))             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = NULL;
  __Pyx_INCREF((PyObject *)(&PyDict_Type));
  __pyx_t_4 = ((PyObject *)(&PyDict_Type)); 
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_tree};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":283
 * 
 * 
 * def _tree2dict(tree):             # <<<<<<<<<<<<<<
 *     if tree["is_match_node"]:
 *         tree = tree["inner"]["match_node"]
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees._tree2dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tree);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":291
 * 
 * 
 * def _dict2tree(tree):             # <<<<<<<<<<<<<<
 *     errors = validate_edit_tree(tree)
 *     if errors:
*/

/* Python wrapper */
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_5_dict2tree(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_4_dict2tree, "_dict2tree(tree)");
static PyMethodDef __pyx_mdef_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_5_dict2tree = {"_dict2tree", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_5_dict2tree, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_4_dict2tree};
static PyObject *__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_5_dict2tree(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_tree = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_dict2tree (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_tree,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 291, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 291, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_dict2tree", 0) < 0) __PYX_ERR(0, 291, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_dict2tree", 1, 1, 1, i); __PYX_ERR(0, 291, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 291, __pyx_L3_error)
    }
    __pyx_v_tree = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_dict2tree", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 291, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees._dict2tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_4_dict2tree(__pyx_self, __pyx_v_tree);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_4_dict2tree(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_tree) {
  PyObject *__pyx_v_errors = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_dict2tree", 0);
  __Pyx_INCREF(__pyx_v_tree);

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":292
 * 
 * def _dict2tree(tree):
 *     errors = validate_edit_tree(tree)             # <<<<<<<<<<<<<<
 *     if errors:
 *         raise ValueError(Errors.E1026.format(errors="\n".join(errors)))
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_validate_edit_tree); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
    __pyx_t_4 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_tree};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_errors = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":293
 * def _dict2tree(tree):
 *     errors = validate_edit_tree(tree)
 *     if errors:             # <<<<<<<<<<<<<<
 *         raise ValueError(Errors.E1026.format(errors="\n".join(errors)))
 * 
*/
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_errors); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 293, __pyx_L1_error)
  if (unlikely(__pyx_t_5)) {

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":294
 *     errors = validate_edit_tree(tree)
 *     if errors:
 *         raise ValueError(Errors.E1026.format(errors="\n".join(errors)))             # <<<<<<<<<<<<<<
 * 
 *     tree = dict(tree)
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_t_2 = __pyx_builtin_ValueError; 
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_Errors); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_E1026); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_7 = __pyx_t_9;
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_8 = PyUnicode_Join(__pyx_mstate_global->__pyx_kp_u__7, __pyx_v_errors); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_4 = 0;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_7, NULL};
      __pyx_t_10 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 294, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_errors, __pyx_t_8, __pyx_t_10, __pyx_callargs+1, 0) < 0) __PYX_ERR(0, 294, __pyx_L1_error)
      __pyx_t_6 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_format, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_10);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 294, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
    }
    __pyx_t_4 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 294, __pyx_L1_error)

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":293
 * def _dict2tree(tree):
 *     errors = validate_edit_tree(tree)
 *     if errors:             # <<<<<<<<<<<<<<
 *         raise ValueError(Errors.E1026.format(errors="\n".join(errors)))
 * 
*/
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":296
 *         raise ValueError(Errors.E1026.format(errors="\n".join(errors)))
 * 
 *     tree = dict(tree)             # <<<<<<<<<<<<<<
 *     if "prefix_len" in tree:
 *         tree = {"is_match_node": True, "inner": {"match_node": tree}}
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)(&PyDict_Type));
  __pyx_t_6 = ((PyObject *)(&PyDict_Type)); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_tree};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF_SET(__pyx_v_tree, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":297
 * 
 *     tree = dict(tree)
 *     if "prefix_len" in tree:             # <<<<<<<<<<<<<<
 *         tree = {"is_match_node": True, "inner": {"match_node": tree}}
 *     else:
*/
  __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_n_u_prefix_len, __pyx_v_tree, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 297, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":298
 *     tree = dict(tree)
 *     if "prefix_len" in tree:
 *         tree = {"is_match_node": True, "inner": {"match_node": tree}}             # <<<<<<<<<<<<<<
 *     else:
 *         tree = {"is_match_node": False, "inner": {"subst_node": tree}}
*/
    __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_is_match_node, Py_True) < 0) __PYX_ERR(0, 298, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_match_node, __pyx_v_tree) < 0) __PYX_ERR(0, 298, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_inner, __pyx_t_6) < 0) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_tree, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":297
 * 
 *     tree = dict(tree)
 *     if "prefix_len" in tree:             # <<<<<<<<<<<<<<
 *         tree = {"is_match_node": True, "inner": {"match_node": tree}}
 *     else:
*/
    goto __pyx_L4;
  }

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":300
 *         tree = {"is_match_node": True, "inner": {"match_node": tree}}
 *     else:
 *         tree = {"is_match_node": False, "inner": {"subst_node": tree}}             # <<<<<<<<<<<<<<
 * 
 *     return tree
*/
  /*else*/ {
    __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_is_match_node, Py_False) < 0) __PYX_ERR(0, 300, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_subst_node, __pyx_v_tree) < 0) __PYX_ERR(0, 300, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_inner, __pyx_t_6) < 0) __PYX_ERR(0, 300, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_tree, __pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L4:;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":302
 *         tree = {"is_match_node": False, "inner": {"subst_node": tree}}
 * 
 *     return tree             # <<<<<<<<<<<<<<
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_tree);
  __pyx_r = __pyx_v_tree;
  goto __pyx_L0;

  /* "spacy/pipeline/_edit_tree_internals/edit_trees.pyx":291
 * 
 * 
 * def _dict2tree(tree):             # <<<<<<<<<<<<<<
 *     errors = validate_edit_tree(tree)
 *     if errors:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("spacy.pipeline._edit_tree_internals.edit_trees._dict2tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_errors);
  __Pyx_XDECREF(__pyx_v_tree);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
/* #### Code section: module_exttypes ### */
static struct __pyx_vtabstruct_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees __pyx_vtable_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees;

static PyObject *__pyx_tp_new_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)o);
  p->__pyx_vtab = __pyx_vtabptr_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees;
  __Pyx_default_placement_construct(&(p->trees));
  __Pyx_default_placement_construct(&(p->map));
  p->strings = ((struct __pyx_obj_5spacy_7strings_StringStore *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees(PyObject *o) {
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *p = (struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->trees);
  __Pyx_call_destructor(p->map);
  Py_CLEAR(p->strings);
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *p = (struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->strings) {
    e = (*v)(((PyObject *)p->strings), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *p = (struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)o;
  tmp = ((PyObject*)p->strings);
  p->strings = ((struct __pyx_obj_5spacy_7strings_StringStore *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_sq_item_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyLong_FromSsize_t(i); if(!x) return 0;
  #if CYTHON_USE_TYPE_SLOTS || (!CYTHON_USE_TYPE_SPECS && __PYX_LIMITED_VERSION_HEX < 0x030A0000)
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  #else
  r = ((binaryfunc)PyType_GetSlot(Py_TYPE(o), Py_mp_subscript))(o, x);
  #endif
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees[] = {
  {"from_json", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_9from_json, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_8from_json},
  {"from_bytes", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_11from_bytes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_10from_bytes},
  {"to_bytes", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_13to_bytes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_12to_bytes},
  {"to_disk", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_15to_disk, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_14to_disk},
  {"from_disk", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_17from_disk, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_16from_disk},
  {"_rebuild_tree_map", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_23_rebuild_tree_map, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_22_rebuild_tree_map},
  {"__reduce__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_25__reduce__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_24__reduce__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees},
  {Py_sq_length, (void *)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_21__len__},
  {Py_sq_item, (void *)__pyx_sq_item_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees},
  {Py_mp_length, (void *)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_21__len__},
  {Py_mp_subscript, (void *)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_19__getitem__},
  {Py_tp_doc, (void *)PyDoc_STR("EditTrees(strings: StringStore)\nContainer for constructing and storing edit trees.")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees},
  {Py_tp_clear, (void *)__pyx_tp_clear_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees},
  {Py_tp_methods, (void *)__pyx_methods_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees},
  {Py_tp_init, (void *)__pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees},
  {0, 0},
};
static PyType_Spec __pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees_spec = {
  "spacy.pipeline._edit_tree_internals.edit_trees.EditTrees",
  sizeof(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence_EditTrees = {
  __pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_21__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_EditTrees = {
  __pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_21__len__, /*mp_length*/
  __pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_19__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees = {
  PyVarObject_HEAD_INIT(0, 0)
  "spacy.pipeline._edit_tree_internals.edit_trees.""EditTrees", /*tp_name*/
  sizeof(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_EditTrees, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_EditTrees, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("EditTrees(strings: StringStore)\nContainer for constructing and storing edit trees."), /*tp_doc*/
  __pyx_tp_traverse_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees, /*tp_traverse*/
  __pyx_tp_clear_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_9EditTrees_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_mstate_global->__pyx_freecount_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes)))) {
    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes[--__pyx_mstate_global->__pyx_freecount_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes];
    memset(o, 0, sizeof(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes(PyObject *o) {
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes *p = (struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_deserialize_trees);
  Py_CLEAR(p->__pyx_v_self);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_mstate_global->__pyx_freecount_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes)))) {
    __pyx_mstate_global->__pyx_freelist_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes[__pyx_mstate_global->__pyx_freecount_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes++] = ((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes *p = (struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->__pyx_v_deserialize_trees) {
    e = (*v)(p->__pyx_v_deserialize_trees, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes *p = (struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes *)o;
  tmp = ((PyObject*)p->__pyx_v_deserialize_trees);
  p->__pyx_v_deserialize_trees = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees_EditTrees *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes},
  {Py_tp_clear, (void *)__pyx_tp_clear_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes},
  {Py_tp_new, (void *)__pyx_tp_new_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes},
  {0, 0},
};
static PyType_Spec __pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes_spec = {
  "spacy.pipeline._edit_tree_internals.edit_trees.__pyx_scope_struct__from_bytes",
  sizeof(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes_slots,
};
#else

static PyTypeObject __pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes = {
  PyVarObject_HEAD_INIT(0, 0)
  "spacy.pipeline._edit_tree_internals.edit_trees.""__pyx_scope_struct__from_bytes", /*tp_name*/
  sizeof(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes, /*tp_traverse*/
  __pyx_tp_clear_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct__from_bytes, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_mstate_global->__pyx_freecount_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes)))) {
    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes[--__pyx_mstate_global->__pyx_freecount_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes];
    memset(o, 0, sizeof(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes(PyObject *o) {
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes *p = (struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_tree_dicts);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_mstate_global->__pyx_freecount_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes)))) {
    __pyx_mstate_global->__pyx_freelist_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes[__pyx_mstate_global->__pyx_freecount_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes++] = ((struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes *p = (struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->__pyx_v_tree_dicts) {
    e = (*v)(p->__pyx_v_tree_dicts, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes *p = (struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes *)o;
  tmp = ((PyObject*)p->__pyx_v_tree_dicts);
  p->__pyx_v_tree_dicts = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes},
  {Py_tp_clear, (void *)__pyx_tp_clear_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes},
  {Py_tp_new, (void *)__pyx_tp_new_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes},
  {0, 0},
};
static PyType_Spec __pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes_spec = {
  "spacy.pipeline._edit_tree_internals.edit_trees.__pyx_scope_struct_1_to_bytes",
  sizeof(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes_slots,
};
#else

static PyTypeObject __pyx_type_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes = {
  PyVarObject_HEAD_INIT(0, 0)
  "spacy.pipeline._edit_tree_internals.edit_trees.""__pyx_scope_struct_1_to_bytes", /*tp_name*/
  sizeof(struct __pyx_obj_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes, /*tp_traverse*/
  __pyx_tp_clear_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5spacy_8pipeline_20_edit_tree_internals_10edit_trees___pyx_scope_struct_1_to_bytes, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
/* #### Code section: initfunc_declarations ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitConstants(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_CreateCodeObjects(__pyx_mstatetype *__pyx_mstate); /*proto*/
/* #### Code section: init_module ### */

static int __Pyx_modinit_global_init_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variab